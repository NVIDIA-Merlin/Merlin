{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "71d18943-381f-4096-b8c2-349cd12f57bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Copyright (c) 2022, NVIDIA CORPORATION.\n",
    "#\n",
    "# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
    "# you may not use this file except in compliance with the License.\n",
    "# You may obtain a copy of the License at\n",
    "#\n",
    "#     http://www.apache.org/licenses/LICENSE-2.0\n",
    "#\n",
    "# Unless required by applicable law or agreed to in writing, software\n",
    "# distributed under the License is distributed on an \"AS IS\" BASIS,\n",
    "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
    "# See the License for the specific language governing permissions and\n",
    "# limitations under the License."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e73569d-99f1-4449-bfd1-8331fcde362d",
   "metadata": {},
   "source": [
    "<img src=\"https://developer.download.nvidia.com/notebooks/dlsw-notebooks/merlin_merlin_getting-started-movielens-01-download-convert/nvidia_logo.png\" style=\"width: 90px; float: right;\">\n",
    "\n",
    "# Training and Serving Merlin on AWS SageMaker\n",
    "\n",
    "This notebook is created using the latest stable [merlin-tensorflow](https://catalog.ngc.nvidia.com/orgs/nvidia/teams/merlin/containers/merlin-tensorflow/tags) container.\n",
    "Note that AWS libraries in this notebook require AWS credentials, and if you are running this notebook in a container, you might need to restart the container with the AWS credentials mounted, e.g., `docker -v $HOME/.aws:$HOME/.aws ...`.\n",
    "\n",
    "\n",
    "With AWS Sagemaker, you can package your own models that can then be trained and deployed in the SageMaker environment. This notebook shows you how to use Merlin for training and inference in the SageMaker environment.\n",
    "\n",
    "To run this notebook, you need to be able to run [AWS CLI](https://aws.amazon.com/cli/) and also have [Amazon SageMaker Python SDK](https://sagemaker.readthedocs.io/en/stable/) installed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "526ece09-f855-44af-8d82-5e2ff9a317d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "! python3 -m pip -q install sagemaker"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbe6eadc-10ab-41c4-ba55-67ea59ac6fb5",
   "metadata": {},
   "source": [
    "## Part 1: Preparing your Merlin model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32c864a8-5c09-44e7-9ae1-bc02c9b700e6",
   "metadata": {},
   "source": [
    "## Testing your algorithm on your local machine"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a3f34b1-6bc2-4338-9d4e-09940c378966",
   "metadata": {},
   "source": [
    "In this notebook, we use the synthetic train and test datasets generated by mimicking the real [Ali-CCP](https://tianchi.aliyun.com/dataset/dataDetail?dataId=408#1): Alibaba Click and Conversion Prediction dataset to build our recommender system ranking models. The Ali-CCP is a dataset gathered from real-world traffic logs of the recommender system in Taobao, the largest online retail platform in the world.\n",
    "\n",
    "If you would like to use real Ali-CCP dataset instead, you can download the training and test datasets on [tianchi.aliyun.com](https://tianchi.aliyun.com/dataset/dataDetail?dataId=408#1). You can then use [get_aliccp()](https://github.com/NVIDIA-Merlin/models/blob/main/merlin/datasets/ecommerce/aliccp/dataset.py#L43) function to curate the raw csv files and save them as parquet files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e96e35df-27b4-4979-a3f5-676593c87106",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "from merlin.datasets.synthetic import generate_data\n",
    "\n",
    "DATA_FOLDER = os.environ.get(\"DATA_FOLDER\", \"/workspace/data/aliccp-raw\")\n",
    "#NUM_ROWS = os.environ.get(\"NUM_ROWS\", 1000000)\n",
    "NUM_ROWS = os.environ.get(\"NUM_ROWS\", 1000)\n",
    "SYNTHETIC_DATA = eval(os.environ.get(\"SYNTHETIC_DATA\", \"True\"))\n",
    "BATCH_SIZE = int(os.environ.get(\"BATCH_SIZE\", 512))\n",
    "\n",
    "if SYNTHETIC_DATA:\n",
    "    train, valid = generate_data(\"aliccp-raw\", int(NUM_ROWS), set_sizes=(0.7, 0.3))\n",
    "    # save the datasets as parquet files\n",
    "    train.to_ddf().to_parquet(os.path.join(DATA_FOLDER, \"train\"))\n",
    "    valid.to_ddf().to_parquet(os.path.join(DATA_FOLDER, \"valid\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3eb0b2e-b865-4b48-8182-ce6f8c4f0789",
   "metadata": {},
   "source": [
    "Before you run your algorithm on SageMaker, you probably want to test and train your training algorithm locally first to make sure that it's working correctly.\n",
    "The training script [train.py](./train.py) in this example starts with the synthethic dataset we have created in the previous cell and produces a ranking model by performing the following tasks:\n",
    "- Perform feature engineering and preprocessing with [NVTabular](https://github.com/NVIDIA-Merlin/NVTabular). NVTabular implements common feature engineering and preprocessing operators in easy-to-use, high-level APIs.\n",
    "- Use [Merlin Models](https://github.com/NVIDIA-Merlin/models/) to train [Facebook's DLRM model](https://arxiv.org/pdf/1906.00091.pdf) in Tensorflow.\n",
    "- Prepares [ensemble models](https://github.com/triton-inference-server/server/blob/main/docs/user_guide/architecture.md#ensemble-models) for serving on [Triton Inference Server](https://github.com/triton-inference-server/server).\n",
    "The training script outputs the final ensemble models to `model_dir`. You want to make sure that your script generates any artifacts within `model_dir`, since SageMaker packages any files in this directory into a compressed tar archive and made available at the S3 location. Ensemble models that are uploaded to S3 will be used later to handle predictions in Triton inference server later in this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "60996955-1d6c-43e7-b29a-ad451b9aee91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2022-10-22 21:41:27.164737: I tensorflow/core/util/util.cc:169] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\n",
      "/usr/lib/python3/dist-packages/requests/__init__.py:89: RequestsDependencyWarning: urllib3 (1.26.12) or chardet (3.0.4) doesn't match a supported version!\n",
      "  warnings.warn(\"urllib3 ({}) or chardet ({}) doesn't match a supported \"\n",
      "2022-10-22 21:41:28.123185: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:991] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-10-22 21:41:28.123505: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:991] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-10-22 21:41:28.123585: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:991] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-10-22 21:41:28.134792: I tensorflow/core/platform/cpu_feature_guard.cc:194] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE3 SSE4.1 SSE4.2 AVX\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-10-22 21:41:28.135740: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:991] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-10-22 21:41:28.135875: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:991] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-10-22 21:41:28.135967: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:991] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-10-22 21:41:28.995050: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:991] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-10-22 21:41:28.995185: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:991] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-10-22 21:41:28.995266: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:991] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-10-22 21:41:28.995352: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1532] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 2867 MB memory:  -> device: 0, name: NVIDIA T600 Laptop GPU, pci bus id: 0000:01:00.0, compute capability: 7.5\n",
      "2022-10-22 21:41:28.999180: I tensorflow/stream_executor/cuda/cuda_driver.cc:739] failed to allocate 2.80G (3006267392 bytes) from device: CUDA_ERROR_OUT_OF_MEMORY: out of memory\n",
      "2022-10-22 21:41:28.999404: I tensorflow/stream_executor/cuda/cuda_driver.cc:739] failed to allocate 2.52G (2705640704 bytes) from device: CUDA_ERROR_OUT_OF_MEMORY: out of memory\n",
      "2022-10-22 21:41:28.999616: I tensorflow/stream_executor/cuda/cuda_driver.cc:739] failed to allocate 2.27G (2435076608 bytes) from device: CUDA_ERROR_OUT_OF_MEMORY: out of memory\n",
      "/usr/local/lib/python3.8/dist-packages/merlin/schema/tags.py:148: UserWarning: Compound tags like Tags.USER_ID have been deprecated and will be removed in a future version. Please use the atomic versions of these tags, like [<Tags.USER: 'user'>, <Tags.ID: 'id'>].\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.8/dist-packages/merlin/schema/tags.py:148: UserWarning: Compound tags like Tags.ITEM_ID have been deprecated and will be removed in a future version. Please use the atomic versions of these tags, like [<Tags.ITEM: 'item'>, <Tags.ID: 'id'>].\n",
      "  warnings.warn(\n",
      "Workflow saved to /tmp/tmp88u49_j7/workflow.\n",
      "batch_size = 512, epochs = 1\n",
      "2022-10-22 21:41:30.492481: E tensorflow/stream_executor/cuda/cuda_blas.cc:245] failed to create cublas handle: CUBLAS_STATUS_NOT_INITIALIZED\n",
      "2022-10-22 21:41:30.492513: E tensorflow/stream_executor/cuda/cuda_blas.cc:247] Failure to initialize cublas may be due to OOM (cublas needs some free memory when you initialize it, and your deep-learning framework may have preallocated more than its fair share), or may be because this binary was not built with support for the GPU in your machine.\n",
      "2022-10-22 21:41:30.492533: W tensorflow/core/framework/op_kernel.cc:1745] OP_REQUIRES failed at matmul_op_impl.h:445 : INTERNAL: Attempting to perform BLAS operation using StreamExecutor without BLAS support\n",
      "Traceback (most recent call last):\n",
      "  File \"train.py\", line 193, in <module>\n",
      "    train()\n",
      "  File \"train.py\", line 165, in train\n",
      "    model.fit(\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/merlin/models/tf/models/base.py\", line 721, in fit\n",
      "    return super().fit(**fit_kwargs)\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/keras/utils/traceback_utils.py\", line 67, in error_handler\n",
      "    raise e.with_traceback(filtered_tb) from None\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/merlin/models/tf/models/base.py\", line 919, in call\n",
      "    outputs, context = self._call_child(block, outputs, context)\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/merlin/models/tf/models/base.py\", line 948, in _call_child\n",
      "    outputs = call_layer(child, inputs, **call_kwargs)\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/merlin/models/tf/utils/tf_utils.py\", line 398, in call_layer\n",
      "    return layer(inputs, *args, **filtered_kwargs)\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/merlin/models/config/schema.py\", line 58, in __call__\n",
      "    return super().__call__(*args, **kwargs)\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/merlin/models/tf/core/combinators.py\", line 269, in call\n",
      "    return call_sequentially(self.layers, inputs, training=training, **kwargs)\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/merlin/models/tf/core/combinators.py\", line 819, in call_sequentially\n",
      "    outputs = call_layer(layer, outputs, **kwargs)\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/merlin/models/tf/utils/tf_utils.py\", line 398, in call_layer\n",
      "    return layer(inputs, *args, **filtered_kwargs)\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/merlin/models/config/schema.py\", line 58, in __call__\n",
      "    return super().__call__(*args, **kwargs)\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/merlin/models/tf/core/combinators.py\", line 269, in call\n",
      "    return call_sequentially(self.layers, inputs, training=training, **kwargs)\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/merlin/models/tf/core/combinators.py\", line 819, in call_sequentially\n",
      "    outputs = call_layer(layer, outputs, **kwargs)\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/merlin/models/tf/utils/tf_utils.py\", line 398, in call_layer\n",
      "    return layer(inputs, *args, **filtered_kwargs)\n",
      "  File \"/usr/local/lib/python3.8/dist-packages/merlin/models/tf/blocks/interaction.py\", line 102, in call\n",
      "    interactions = tf.matmul(left, right, transpose_b=True)\n",
      "tensorflow.python.framework.errors_impl.InternalError: Exception encountered when calling layer \"dot_product_interaction\" (type DotProductInteraction).\n",
      "\n",
      "Attempting to perform BLAS operation using StreamExecutor without BLAS support [Op:BatchMatMulV2]\n",
      "\n",
      "Call arguments received by layer \"dot_product_interaction\" (type DotProductInteraction):\n",
      "  • inputs=tf.Tensor(shape=(512, 16, 64), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "! python3 train.py \\\n",
    "    --train_dir={DATA_FOLDER}/train/ \\\n",
    "    --valid_dir={DATA_FOLDER}/valid/ \\\n",
    "    --model_dir=/tmp/ \\\n",
    "    --batch_size=512 \\\n",
    "    --epochs=1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "361e6bb6-1d68-4797-a2b5-d87d164995cc",
   "metadata": {},
   "source": [
    "### The `Dockerfile`\n",
    "\n",
    "The `Dockerfile` describes the image that will be used on SageMaker for training and inference.\n",
    "We start from the latest stable [merlin-tensorflow](https://catalog.ngc.nvidia.com/orgs/nvidia/teams/merlin/containers/merlin-tensorflow/tags) docker image and install the [sagemaker-training-toolkit](https://github.com/aws/sagemaker-training-toolkit) library, which makes the image compatible with Sagemaker for training models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "26ba6bc5-f6ea-4d35-88f9-23683826e45b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FROM nvcr.io/nvidia/merlin/merlin-tensorflow:22.09\n",
      "\n",
      "RUN pip3 install sagemaker-training\n"
     ]
    }
   ],
   "source": [
    "! cat container/Dockerfile"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb9afdca-19f6-45e6-8a73-3878c87a3577",
   "metadata": {},
   "source": [
    "### Building and registering the container\n",
    "\n",
    "The following shell code shows how to build the container image using `docker build` and push the container image to ECR using `docker push`. This code is available as the shell script `build_and_push_image.sh`. If you are running this notebook inside the [merlin-tensorflow](https://catalog.ngc.nvidia.com/orgs/nvidia/teams/merlin/containers/merlin-tensorflow/tags) docker container, you probably want to execute the script outside the container.\n",
    "\n",
    "This code looks for an ECR repository in the account you're using and the current default region (if you're using a SageMaker notebook instance, this is the region where the notebook instance was created). If the repository doesn't exist, the script will create it.\n",
    "\n",
    "Note that running the following script requires permissions to create new repositories on Amazon ECR."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2e40ffca-b651-413f-ac64-43f44a01e7ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#!/bin/bash\n",
      "\n",
      "set -euo pipefail\n",
      "\n",
      "# The name of our algorithm\n",
      "ALGORITHM_NAME=sagemaker-merlin-tensorflow\n",
      "REGION=us-east-1\n",
      "\n",
      "cd container\n",
      "\n",
      "ACCOUNT=$(aws sts get-caller-identity --query Account --output text --region ${REGION})\n",
      "\n",
      "# Get the region defined in the current configuration (default to us-west-2 if none defined)\n",
      "\n",
      "REPOSITORY=\"${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com\"\n",
      "IMAGE_URI=\"${REPOSITORY}/${ALGORITHM_NAME}:latest\"\n",
      "\n",
      "# Get the login command from ECR and execute it directly\n",
      "aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${REPOSITORY}\n",
      "\n",
      "# If the repository doesn't exist in ECR, create it.\n",
      "\n",
      "aws ecr describe-repositories --repository-names \"${ALGORITHM_NAME}\" --region ${REGION} > /dev/null 2>&1\n",
      "\n",
      "if [ $? -ne 0 ]\n",
      "then\n",
      "    aws ecr create-repository --repository-name \"${ALGORITHM_NAME}\" --region ${REGION} > /dev/null\n",
      "fi\n",
      "\n",
      "# Build the docker image locally with the image name and then push it to ECR\n",
      "# with the full name.\n",
      "\n",
      "docker build  -t ${ALGORITHM_NAME} .\n",
      "docker tag ${ALGORITHM_NAME} ${IMAGE_URI}\n",
      "\n",
      "docker push ${IMAGE_URI}\n"
     ]
    }
   ],
   "source": [
    "! cat ./build_and_push_image.sh"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d525205-b00a-4177-ab14-8d3a218d4ac9",
   "metadata": {},
   "source": [
    "## Part 2: Training your Merlin model on Sagemaker\n",
    "\n",
    "Once you have tested your script that creates a Merlin ensemble graph, you can use it to train it on Sagemaker.\n",
    "\n",
    "Here, we create a Sagemaker session that we will use to perform our Sagemaker operations, specify the bucket to use, and the role for working with Sagemaker."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2b62f39e-af41-4aec-857f-0541038d9c5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Couldn't call 'get_role' to get Role ARN from role name AWSOS-AD-Engineer to get Role path.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "arn:aws:iam::843263297212:role/AWSOS-AD-Engineer\n"
     ]
    }
   ],
   "source": [
    "import sagemaker\n",
    "\n",
    "sess = sagemaker.Session()\n",
    "\n",
    "# S3 prefix\n",
    "prefix = \"DEMO-merlin-tensorflow-aliccp\"\n",
    "\n",
    "role = sagemaker.get_execution_role()\n",
    "\n",
    "print(role)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6e5d758-e4f3-4f44-ba4f-9823f74a04e0",
   "metadata": {},
   "source": [
    "We can use the Sagemaker Python SDK to upload the Ali-CCP synthetic data to our S3 bucket."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cd9109d1-73cf-4177-b896-09cff9289bf8",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'DATA_DIRECTORY' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn [8], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m data_location \u001b[38;5;241m=\u001b[39m sess\u001b[38;5;241m.\u001b[39mupload_data(DATA_DIRECTORY, key_prefix\u001b[38;5;241m=\u001b[39mprefix)\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(data_location)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'DATA_DIRECTORY' is not defined"
     ]
    }
   ],
   "source": [
    "data_location = sess.upload_data(DATA_DIRECTORY, key_prefix=prefix)\n",
    "\n",
    "print(data_location)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "922dbb12-76fb-41c0-ad90-32b7d1328e62",
   "metadata": {},
   "source": [
    "### Training on Sagemaker using the Python SDK\n",
    "\n",
    "Sagemaker provides the Python SDK for training a model on Sagemaker.\n",
    "\n",
    "Here, we start by using the ECR image URL of the image we pushed in the previous section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14b9fc54-bafa-4487-8f34-2f9448c0b3cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import boto3\n",
    "\n",
    "client = boto3.client(\"sts\")\n",
    "account = client.get_caller_identity()[\"Account\"]\n",
    "\n",
    "my_session = boto3.session.Session()\n",
    "region = my_session.region_name\n",
    "\n",
    "algorithm_name = \"sagemaker-merlin-tensorflow\"\n",
    "\n",
    "ecr_image = \"{}.dkr.ecr.{}.amazonaws.com/{}:latest\".format(account, region, algorithm_name)\n",
    "\n",
    "print(ecr_image)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c51cafe-8685-4789-b348-e70b2f811035",
   "metadata": {},
   "source": [
    "We can call `Estimator.fit()` to start training on Sagemaker. Here, we use a `g4dn` GPU instance that are equipped with NVIDIA T4 GPUs.\n",
    "Our training script `train.py` is passed to the Estimator through the `entry_point` parameter, and we can adjust our hyperparameters in the `hyperparameters`.\n",
    "We have uploaded our training dataset to our S3 bucket in the previous code cell, and the S3 URLs to our training and validation sets are passed into the `fit()` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f238c8c6-656e-4b3d-96c6-32654357fc13",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from sagemaker.estimator import Estimator\n",
    "\n",
    "\n",
    "training_instance_type = \"ml.g4dn.xlarge\"  # GPU instance, T4\n",
    "\n",
    "estimator = Estimator(\n",
    "    role=role,\n",
    "    instance_count=1,\n",
    "    instance_type=training_instance_type,\n",
    "    image_uri=ecr_image,\n",
    "    entry_point=\"train.py\",\n",
    "    hyperparameters={\n",
    "        \"batch_size\": 1_024,\n",
    "        \"epoch\": 10, \n",
    "    },\n",
    ")\n",
    "\n",
    "estimator.fit(\n",
    "    {\n",
    "        \"train\": f\"{data_location}/train/\",\n",
    "        \"valid\": f\"{data_location}/valid/\",\n",
    "    }\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d44a96bd-a6ab-4ff7-9232-9e0f0c330ecb",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(estimator.model_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5d6d979-1976-46dd-bf88-669bbad39ede",
   "metadata": {},
   "outputs": [],
   "source": [
    "! aws s3 cp {estimator.model_data} /tmp/ensemble/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d90341dc-8c5a-4500-acf8-1491664cd426",
   "metadata": {},
   "outputs": [],
   "source": [
    "! tar xvzf /tmp/ensemble/model.tar.gz"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62e0c0a7-0815-4aa9-8536-5a2085406f7a",
   "metadata": {},
   "source": [
    "## Part 3: Retrieving Recommendations from Triton Inference Server\n",
    "\n",
    "Although we use the Sagemaker Python SDK to train our model, here we will use `boto3` to launch our inference endpoint as it offers more low-level control than the Python SDK.\n",
    "\n",
    "The model artificat `model.tar.gz` uploaded to S3 from the Sagemaker training job contained three directories: `0_transformworkflow` for the NVTabular workflow, `1_predicttensorflow` for the Tensorflow model, and `ensemble_model` for the ensemble graph that we can use in Triton.\n",
    "\n",
    "```shell\n",
    "/tmp/ensemble/\n",
    "├── 0_transformworkflow\n",
    "│   ├── 1\n",
    "│   │   ├── model.py\n",
    "│   │   └── workflow\n",
    "│   │       ├── categories\n",
    "│   │       │   ├── unique.item_brand.parquet\n",
    "│   │       │   ├── unique.item_category.parquet\n",
    "│   │       │   ├── unique.item_id.parquet\n",
    "│   │       │   ├── unique.item_shop.parquet\n",
    "│   │       │   ├── unique.user_age.parquet\n",
    "│   │       │   ├── unique.user_brands.parquet\n",
    "│   │       │   ├── unique.user_categories.parquet\n",
    "│   │       │   ├── unique.user_consumption_2.parquet\n",
    "│   │       │   ├── unique.user_gender.parquet\n",
    "│   │       │   ├── unique.user_geography.parquet\n",
    "│   │       │   ├── unique.user_group.parquet\n",
    "│   │       │   ├── unique.user_id.parquet\n",
    "│   │       │   ├── unique.user_intentions.parquet\n",
    "│   │       │   ├── unique.user_is_occupied.parquet\n",
    "│   │       │   ├── unique.user_profile.parquet\n",
    "│   │       │   └── unique.user_shops.parquet\n",
    "│   │       ├── metadata.json\n",
    "│   │       └── workflow.pkl\n",
    "│   └── config.pbtxt\n",
    "├── 1_predicttensorflow\n",
    "│   ├── 1\n",
    "│   │   └── model.savedmodel\n",
    "│   │       ├── assets\n",
    "│   │       ├── keras_metadata.pb\n",
    "│   │       ├── saved_model.pb\n",
    "│   │       └── variables\n",
    "│   │           ├── variables.data-00000-of-00001\n",
    "│   │           └── variables.index\n",
    "│   └── config.pbtxt\n",
    "├── ensemble_model\n",
    "│   ├── 1\n",
    "│   └── config.pbtxt\n",
    "└── model.tar.gz\n",
    "```\n",
    "\n",
    "We specify that we only want to use `ensemble_model` in Triton by passing the environment variable `SAGEMAKER_TRITON_DEFAULT_MODEL_NAME`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2aaa86d7-093e-4bdc-a606-a730c1bf9a5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "\n",
    "import boto3\n",
    "\n",
    "sm_client = boto3.client(service_name=\"sagemaker\")\n",
    "\n",
    "container = {\n",
    "    \"Image\": ecr_image,\n",
    "    \"ModelDataUrl\": estimator.model_data,\n",
    "    \"Environment\": {\n",
    "        \"SAGEMAKER_TRITON_TENSORFLOW_VERSION\": \"2\",\n",
    "        \"SAGEMAKER_TRITON_DEFAULT_MODEL_NAME\": \"ensemble_model\",\n",
    "    },\n",
    "}\n",
    "\n",
    "model_name = \"model-triton-merlin-ensemble-\" + time.strftime(\"%Y-%m-%d-%H-%M-%S\", time.gmtime())\n",
    "\n",
    "create_model_response = sm_client.create_model(\n",
    "    ModelName=model_name, ExecutionRoleArn=role, PrimaryContainer=container\n",
    ")\n",
    "\n",
    "model_arn = create_model_response[\"ModelArn\"]\n",
    "\n",
    "print(f\"Model Arn: {model_arn}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d97661e2-e54b-435c-96e3-63507418afe1",
   "metadata": {},
   "source": [
    "We again use the `g4dn` GPU instance that are equipped with NVIDIA T4 GPUs for launching the Triton inference server."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9cade896-0e92-42ff-b507-96a82a248814",
   "metadata": {},
   "outputs": [],
   "source": [
    "endpoint_instance_type = \"ml.g4dn.xlarge\"\n",
    "\n",
    "endpoint_config_name = \"endpoint-config-triton-merlin-ensemble-\" + time.strftime(\"%Y-%m-%d-%H-%M-%S\", time.gmtime())\n",
    "\n",
    "create_endpoint_config_response = sm_client.create_endpoint_config(\n",
    "    EndpointConfigName=endpoint_config_name,\n",
    "    ProductionVariants=[\n",
    "        {\n",
    "            \"InstanceType\": endpoint_instance_type,\n",
    "            \"InitialVariantWeight\": 1,\n",
    "            \"InitialInstanceCount\": 1,\n",
    "            \"ModelName\": model_name,\n",
    "            \"VariantName\": \"AllTraffic\",\n",
    "        }\n",
    "    ],\n",
    ")\n",
    "\n",
    "endpoint_config_arn = create_endpoint_config_response[\"EndpointConfigArn\"]\n",
    "\n",
    "print(f\"Endpoint Config Arn: {endpoint_config_arn}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "004eb730-0eaa-4945-b8be-6c820ed96485",
   "metadata": {},
   "outputs": [],
   "source": [
    "endpoint_name = \"endpoint-triton-merlin-ensemble-\" + time.strftime(\"%Y-%m-%d-%H-%M-%S\", time.gmtime())\n",
    "\n",
    "create_endpoint_response = sm_client.create_endpoint(\n",
    "    EndpointName=endpoint_name, EndpointConfigName=endpoint_config_name\n",
    ")\n",
    "\n",
    "endpoint_arn = create_endpoint_response[\"EndpointArn\"]\n",
    "\n",
    "print(f\"Endpoint Arn: {endpoint_arn}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd230b47-6a95-46ad-9555-ed8f1ee29be0",
   "metadata": {},
   "outputs": [],
   "source": [
    "status = sm_client.describe_endpoint(EndpointName=endpoint_name)[\"EndpointStatus\"]\n",
    "print(f\"Endpoint Creation Status: {status}\")\n",
    "\n",
    "while status == \"Creating\":\n",
    "    time.sleep(60)\n",
    "    rv = sm_client.describe_endpoint(EndpointName=endpoint_name)\n",
    "    status = rv[\"EndpointStatus\"]\n",
    "    print(f\"Endpoint Creation Status: {status}\")\n",
    "\n",
    "endpoint_arn = rv[\"EndpointArn\"]\n",
    "\n",
    "print(f\"Endpoint Arn: {endpoint_arn}\")\n",
    "print(f\"Endpoint Status: {status}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acb458d8-3169-40cc-8cae-6b72a300394c",
   "metadata": {},
   "source": [
    "### Send a Request to Triton Inference Server to Transform a Raw Dataset\n",
    "\n",
    "Once we have an endpoint running, we can test it by sending requests.\n",
    "Here, we use the raw validation set and transform it using the saved VTabular workflow we have downloaded from S3 in the previous section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9524fc1d-e613-4c24-b733-f7dcf673f584",
   "metadata": {},
   "outputs": [],
   "source": [
    "from merlin.schema.tags import Tags\n",
    "from merlin.core.dispatch import get_lib\n",
    "from nvtabular.workflow import Workflow\n",
    "\n",
    "df_lib = get_lib()\n",
    "\n",
    "original_data_path = DATA_DIRECTORY\n",
    "workflow = Workflow.load(\"/tmp/ensemble/0_transformworkflow/1/workflow/\")\n",
    "\n",
    "label_columns = workflow.output_schema.select_by_tag(Tags.TARGET).column_names\n",
    "workflow.remove_inputs(label_columns)\n",
    "\n",
    "# read in data for request\n",
    "batch = df_lib.read_parquet(\n",
    "    os.path.join(original_data_path, \"valid\", \"part.0.parquet\"),\n",
    "    columns=workflow.input_schema.column_names\n",
    ")\n",
    "print(batch)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "577d86d6-a17a-47e8-9966-8738f5bdcbd4",
   "metadata": {},
   "source": [
    "In the following code cell, we use a utility function provided in [Merlin Systems](https://github.com/NVIDIA-Merlin/systems) to convert our dataframe to the payload format that can be used as inference request format for Triton."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6dcae463-6d80-4a7a-981a-a9d034d49fa9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from merlin.systems.triton import convert_df_to_triton_input\n",
    "import tritonclient.http as httpclient\n",
    "\n",
    "inputs = convert_df_to_triton_input(workflow.input_schema, batch, httpclient.InferInput)\n",
    "\n",
    "request_body, header_length = httpclient.InferenceServerClient.generate_request_body(inputs)\n",
    "\n",
    "print(request_body)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21cdb596-0cd8-415c-bab5-f750a213a938",
   "metadata": {},
   "source": [
    "Triton uses the [KServe community standard inference protocols](https://github.com/triton-inference-server/server/blob/main/docs/protocol/README.md).\n",
    "Here, we use the [binary+json format](https://github.com/triton-inference-server/server/blob/main/docs/protocol/extension_binary_data.md) for optimal performance in the inference request.\n",
    "\n",
    "In order for Triton to correctly parse the binary payload, we have to specify the length of the request metadata in the header `json-header-size`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2484510b-4b50-410a-8b93-93ef8c546cb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "runtime_sm_client = boto3.client(\"sagemaker-runtime\")\n",
    "\n",
    "response = runtime_sm_client.invoke_endpoint(\n",
    "    EndpointName=endpoint_name,\n",
    "    ContentType=f\"application/vnd.sagemaker-triton.binary+json;json-header-size={header_length}\",\n",
    "    Body=request_body,\n",
    ")\n",
    "\n",
    "# Parse json header size length from the response\n",
    "header_length_prefix = \"application/vnd.sagemaker-triton.binary+json;json-header-size=\"\n",
    "header_length_str = response[\"ContentType\"][len(header_length_prefix) :]\n",
    "\n",
    "# Read response body\n",
    "result = httpclient.InferenceServerClient.parse_response_body(\n",
    "    response[\"Body\"].read(), header_length=int(header_length_str)\n",
    ")\n",
    "output_data = result.as_numpy(\"click/binary_classification_task\")\n",
    "print(\"predicted sigmoid result:\\n\", output_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43b660ca-6376-4615-aef4-474c66fa2bec",
   "metadata": {},
   "source": [
    "## Terminate endpoint and clean up artifacts\n",
    "\n",
    "Don't forget to clean up artifacts and terminate the endpoint, or the endpoint will continue to incur costs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ce1630c-96aa-49ee-ac79-cf44120adb78",
   "metadata": {},
   "outputs": [],
   "source": [
    "sm_client.delete_model(ModelName=model_name)\n",
    "sm_client.delete_endpoint_config(EndpointConfigName=endpoint_config_name)\n",
    "sm_client.delete_endpoint(EndpointName=endpoint_name)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
