Search.setIndex({"docnames": ["README", "api_core/generated/merlin.dag.BaseOperator", "api_core/generated/merlin.dag.ColumnSelector", "api_core/generated/merlin.dag.Graph", "api_core/generated/merlin.dag.Node", "api_core/generated/merlin.io.Dataset", "api_core/generated/merlin.schema.ColumnSchema", "api_core/generated/merlin.schema.Schema", "api_core/generated/merlin.schema.Tags", "api_core/index", "api_core/merlin.dag", "api_core/merlin.io", "api_core/merlin.schema", "api_dataloader", "api_models", "api_nvtabular", "api_systems", "api_transformers4rec/merlin_standard_lib", "api_transformers4rec/merlin_standard_lib.proto", "api_transformers4rec/merlin_standard_lib.schema", "api_transformers4rec/merlin_standard_lib.utils", "api_transformers4rec/modules", "api_transformers4rec/transformers4rec", "api_transformers4rec/transformers4rec.config", "api_transformers4rec/transformers4rec.torch", "api_transformers4rec/transformers4rec.torch.block", "api_transformers4rec/transformers4rec.torch.features", "api_transformers4rec/transformers4rec.torch.model", "api_transformers4rec/transformers4rec.torch.tabular", "api_transformers4rec/transformers4rec.torch.utils", "api_transformers4rec/transformers4rec.utils", "containers", "examples/Building-and-deploying-multi-stage-RecSys/01-Building-Recommender-Systems-with-Merlin", "examples/Building-and-deploying-multi-stage-RecSys/02-Deploying-multi-stage-RecSys-with-Merlin-Systems", "examples/Building-and-deploying-multi-stage-RecSys/index", "examples/Next-Item-Prediction-with-Transformers/tf/transformers-next-item-prediction", "examples/Next-Item-Prediction-with-Transformers/tf/transformers-next-item-prediction-with-pretrained-embeddings", "examples/getting-started-movielens/01-Download-Convert", "examples/getting-started-movielens/02-ETL-with-NVTabular", "examples/getting-started-movielens/03-Training-with-HugeCTR", "examples/getting-started-movielens/03-Training-with-PyTorch", "examples/getting-started-movielens/03-Training-with-TF", "examples/getting-started-movielens/04-Triton-Inference-with-HugeCTR", "examples/getting-started-movielens/04-Triton-Inference-with-TF", "examples/getting-started-movielens/index", "examples/index", "examples/quick_start/index", "examples/quick_start/ranking", "examples/quick_start/scripts/inference/index", "examples/quick_start/scripts/inference/inference", "examples/quick_start/scripts/preproc/index", "examples/quick_start/scripts/ranking/hypertuning/index", "examples/quick_start/scripts/ranking/hypertuning/tutorial_with_wb_sweeps", "examples/quick_start/scripts/ranking/index", "examples/ranking/index", "examples/ranking/tf/Training-and-Deploying-DLRM-model-with-Models-and-Systems", "examples/sagemaker-tensorflow/index", "examples/sagemaker-tensorflow/sagemaker-merlin-tensorflow", "examples/scaling-criteo/01-Download-Convert", "examples/scaling-criteo/02-ETL-with-NVTabular", "examples/scaling-criteo/03-Training-with-HugeCTR", "examples/scaling-criteo/03-Training-with-Merlin-Models-TensorFlow", "examples/scaling-criteo/04-Triton-Inference-with-HugeCTR", "examples/scaling-criteo/04-Triton-Inference-with-Merlin-Models-TensorFlow", "examples/scaling-criteo/index", "examples/traditional-ml/Serving-An-Implicit-Model-With-Merlin-Systems", "examples/traditional-ml/Serving-An-XGboost-Model-With-Merlin-Systems", "generated/merlin.dataloader.jax.Loader", "generated/merlin.dataloader.loader_base.ChunkQueue", "generated/merlin.dataloader.loader_base.LoaderBase", "generated/merlin.dataloader.tensorflow.KerasSequenceValidater", "generated/merlin.dataloader.tensorflow.Loader", "generated/merlin.dataloader.tf_utils.HAS_GPU", "generated/merlin.dataloader.tf_utils.configure_tensorflow", "generated/merlin.dataloader.tf_utils.get_dataset_schema_from_feature_columns", "generated/merlin.dataloader.torch.DLDataLoader", "generated/merlin.dataloader.torch.Loader", "generated/merlin.models.tf.AsTabular", "generated/merlin.models.tf.AverageEmbeddingsByWeightFeature", "generated/merlin.models.tf.AvgPrecisionAt", "generated/merlin.models.tf.BinaryClassificationTask", "generated/merlin.models.tf.BinaryOutput", "generated/merlin.models.tf.BroadcastToSequence", "generated/merlin.models.tf.CGCBlock", "generated/merlin.models.tf.CategoricalOutput", "generated/merlin.models.tf.CategoryEncoding", "generated/merlin.models.tf.ColumnBasedSampleWeight", "generated/merlin.models.tf.Cond", "generated/merlin.models.tf.Continuous", "generated/merlin.models.tf.ContinuousEmbedding", "generated/merlin.models.tf.ContinuousFeatures", "generated/merlin.models.tf.ContinuousProjection", "generated/merlin.models.tf.ContrastiveOutput", "generated/merlin.models.tf.CrossBlock", "generated/merlin.models.tf.DCNModel", "generated/merlin.models.tf.DLRMBlock", "generated/merlin.models.tf.DLRMModel", "generated/merlin.models.tf.DeepFMModel", "generated/merlin.models.tf.DenseResidualBlock", "generated/merlin.models.tf.DotProductInteraction", "generated/merlin.models.tf.DualEncoderBlock", "generated/merlin.models.tf.EmbeddingEncoder", "generated/merlin.models.tf.EmbeddingTable", "generated/merlin.models.tf.Embeddings", "generated/merlin.models.tf.Encoder", "generated/merlin.models.tf.ExpandDims", "generated/merlin.models.tf.FMBlock", "generated/merlin.models.tf.FMPairwiseInteraction", "generated/merlin.models.tf.Filter", "generated/merlin.models.tf.HashedCross", "generated/merlin.models.tf.HashedCrossAll", "generated/merlin.models.tf.InBatchSampler", "generated/merlin.models.tf.InputBlock", "generated/merlin.models.tf.InputBlockV2", "generated/merlin.models.tf.ItemRetrievalScorer", "generated/merlin.models.tf.ItemRetrievalTask", "generated/merlin.models.tf.ItemSampler", "generated/merlin.models.tf.L2Norm", "generated/merlin.models.tf.LazyAdam", "generated/merlin.models.tf.Loader", "generated/merlin.models.tf.MLPBlock", "generated/merlin.models.tf.MMOEBlock", "generated/merlin.models.tf.MRRAt", "generated/merlin.models.tf.MapValues", "generated/merlin.models.tf.MatrixFactorizationBlock", "generated/merlin.models.tf.MatrixFactorizationModel", "generated/merlin.models.tf.MatrixFactorizationModelV2", "generated/merlin.models.tf.ModelOutput", "generated/merlin.models.tf.MultiClassClassificationTask", "generated/merlin.models.tf.MultiOptimizer", "generated/merlin.models.tf.NDCGAt", "generated/merlin.models.tf.OptimizerBlocks", "generated/merlin.models.tf.OutputBlock", "generated/merlin.models.tf.PLEBlock", "generated/merlin.models.tf.ParallelBlock", "generated/merlin.models.tf.ParallelPredictionBlock", "generated/merlin.models.tf.PopularityBasedSampler", "generated/merlin.models.tf.PrecisionAt", "generated/merlin.models.tf.PredictionTask", "generated/merlin.models.tf.PredictionTasks", "generated/merlin.models.tf.PrepareFeatures", "generated/merlin.models.tf.PrepareListFeatures", "generated/merlin.models.tf.RecallAt", "generated/merlin.models.tf.RegressionOutput", "generated/merlin.models.tf.RegressionTask", "generated/merlin.models.tf.ReplaceMaskedEmbeddings", "generated/merlin.models.tf.ResidualBlock", "generated/merlin.models.tf.RetrievalModelV2", "generated/merlin.models.tf.SequenceEmbeddingFeatures", "generated/merlin.models.tf.SequenceMaskLast", "generated/merlin.models.tf.SequenceMaskRandom", "generated/merlin.models.tf.SequencePredictLast", "generated/merlin.models.tf.SequencePredictNext", "generated/merlin.models.tf.SequencePredictRandom", "generated/merlin.models.tf.SequenceTargetAsInput", "generated/merlin.models.tf.SequentialBlock", "generated/merlin.models.tf.StochasticSwapNoise", "generated/merlin.models.tf.TabularBlock", "generated/merlin.models.tf.TensorInitializer", "generated/merlin.models.tf.ToDense", "generated/merlin.models.tf.ToOneHot", "generated/merlin.models.tf.ToSparse", "generated/merlin.models.tf.ToTarget", "generated/merlin.models.tf.TopKEncoder", "generated/merlin.models.tf.TopKMetricsAggregator", "generated/merlin.models.tf.TwoTowerBlock", "generated/merlin.models.tf.TwoTowerModel", "generated/merlin.models.tf.TwoTowerModelV2", "generated/merlin.models.tf.WideAndDeepModel", "generated/merlin.models.tf.YoutubeDNNRetrievalModel", "generated/merlin.models.tf.YoutubeDNNRetrievalModelV2", "generated/merlin.models.tf.losses.BPRLoss", "generated/merlin.models.tf.losses.BPRmaxLoss", "generated/merlin.models.tf.losses.CategoricalCrossEntropy", "generated/merlin.models.tf.losses.HingeLoss", "generated/merlin.models.tf.losses.LogisticLoss", "generated/merlin.models.tf.losses.SparseCategoricalCrossEntropy", "generated/merlin.models.tf.losses.TOP1Loss", "generated/merlin.models.tf.losses.TOP1maxLoss", "generated/merlin.models.tf.losses.TOP1v2Loss", "generated/merlin.models.tf.split_embeddings_on_size", "generated/merlin.models.utils.misc_utils.Timing", "generated/merlin.models.utils.misc_utils.filter_kwargs", "generated/merlin.models.utils.misc_utils.get_filenames", "generated/merlin.models.utils.misc_utils.get_label_feature_name", "generated/merlin.models.utils.misc_utils.get_object_size", "generated/merlin.models.utils.misc_utils.get_parquet_files_names", "generated/merlin.models.utils.misc_utils.get_timestamp_feature_name", "generated/merlin.models.utils.misc_utils.safe_json", "generated/merlin.models.utils.misc_utils.validate_dataset", "generated/merlin.models.utils.registry.Registry", "generated/merlin.models.utils.registry.RegistryMixin", "generated/merlin.models.utils.registry.camelcase_to_snakecase", "generated/merlin.models.utils.registry.default_name", "generated/merlin.models.utils.registry.default_object_name", "generated/merlin.models.utils.registry.display_list_by_prefix", "generated/merlin.models.utils.registry.snakecase_to_camelcase", "generated/merlin.models.utils.schema_utils.categorical_cardinalities", "generated/merlin.models.utils.schema_utils.categorical_domains", "generated/merlin.models.utils.schema_utils.create_categorical_column", "generated/merlin.models.utils.schema_utils.create_continuous_column", "generated/merlin.models.utils.schema_utils.filter_dict_by_schema", "generated/merlin.models.utils.schema_utils.get_embedding_size_from_cardinality", "generated/merlin.models.utils.schema_utils.get_embedding_sizes_from_schema", "generated/merlin.models.utils.schema_utils.schema_to_tensorflow_metadata_json", "generated/merlin.models.utils.schema_utils.select_targets", "generated/merlin.models.utils.schema_utils.tensorflow_metadata_json_to_schema", "generated/merlin.systems.dag.Ensemble", "generated/merlin.systems.dag.ops.fil.PredictForest", "generated/merlin.systems.dag.ops.implicit.PredictImplicit", "generated/merlin.systems.dag.ops.session_filter.FilterCandidates", "generated/merlin.systems.dag.ops.softmax_sampling.SoftmaxSampling", "generated/merlin.systems.dag.ops.tensorflow.PredictTensorflow", "generated/merlin.systems.dag.ops.unroll_features.UnrollFeatures", "generated/merlin.systems.dag.ops.workflow.TransformWorkflow", "generated/merlin.systems.triton.convert_df_to_triton_input", "generated/merlin.systems.triton.convert_triton_output_to_df", "generated/nvcr.io-nvidia-merlin-merlin-hugectr", "generated/nvcr.io-nvidia-merlin-merlin-pytorch", "generated/nvcr.io-nvidia-merlin-merlin-tensorflow", "generated/nvtabular.ops.AddMetadata", "generated/nvtabular.ops.AddProperties", "generated/nvtabular.ops.AddTags", "generated/nvtabular.ops.Bucketize", "generated/nvtabular.ops.Categorify", "generated/nvtabular.ops.Clip", "generated/nvtabular.ops.ColumnSimilarity", "generated/nvtabular.ops.DifferenceLag", "generated/nvtabular.ops.DropLowCardinality", "generated/nvtabular.ops.Dropna", "generated/nvtabular.ops.FillMedian", "generated/nvtabular.ops.FillMissing", "generated/nvtabular.ops.Filter", "generated/nvtabular.ops.Groupby", "generated/nvtabular.ops.HashBucket", "generated/nvtabular.ops.HashedCross", "generated/nvtabular.ops.JoinExternal", "generated/nvtabular.ops.JoinGroupby", "generated/nvtabular.ops.LambdaOp", "generated/nvtabular.ops.ListSlice", "generated/nvtabular.ops.LogOp", "generated/nvtabular.ops.Normalize", "generated/nvtabular.ops.NormalizeMinMax", "generated/nvtabular.ops.Operator", "generated/nvtabular.ops.ReduceDtypeSize", "generated/nvtabular.ops.Rename", "generated/nvtabular.ops.StatOperator", "generated/nvtabular.ops.TagAsItemFeatures", "generated/nvtabular.ops.TagAsItemID", "generated/nvtabular.ops.TagAsUserFeatures", "generated/nvtabular.ops.TagAsUserID", "generated/nvtabular.ops.TargetEncoding", "generated/nvtabular.ops.ValueCount", "generated/nvtabular.workflow.workflow.Workflow", "generated/nvtabular.workflow.workflow.WorkflowNode", "guide/recommender_models", "guide/recommender_system_guide", "index", "support_matrix/index", "support_matrix/support_matrix_merlin_hugectr", "support_matrix/support_matrix_merlin_pytorch", "support_matrix/support_matrix_merlin_tensorflow"], "filenames": ["README.md", "api_core/generated/merlin.dag.BaseOperator.rst", "api_core/generated/merlin.dag.ColumnSelector.rst", "api_core/generated/merlin.dag.Graph.rst", "api_core/generated/merlin.dag.Node.rst", "api_core/generated/merlin.io.Dataset.rst", "api_core/generated/merlin.schema.ColumnSchema.rst", "api_core/generated/merlin.schema.Schema.rst", "api_core/generated/merlin.schema.Tags.rst", "api_core/index.rst", "api_core/merlin.dag.rst", "api_core/merlin.io.rst", "api_core/merlin.schema.rst", "api_dataloader.rst", "api_models.rst", "api_nvtabular.rst", "api_systems.rst", "api_transformers4rec/merlin_standard_lib.rst", "api_transformers4rec/merlin_standard_lib.proto.rst", "api_transformers4rec/merlin_standard_lib.schema.rst", "api_transformers4rec/merlin_standard_lib.utils.rst", "api_transformers4rec/modules.rst", "api_transformers4rec/transformers4rec.rst", "api_transformers4rec/transformers4rec.config.rst", "api_transformers4rec/transformers4rec.torch.rst", "api_transformers4rec/transformers4rec.torch.block.rst", "api_transformers4rec/transformers4rec.torch.features.rst", "api_transformers4rec/transformers4rec.torch.model.rst", "api_transformers4rec/transformers4rec.torch.tabular.rst", "api_transformers4rec/transformers4rec.torch.utils.rst", "api_transformers4rec/transformers4rec.utils.rst", "containers.rst", "examples/Building-and-deploying-multi-stage-RecSys/01-Building-Recommender-Systems-with-Merlin.ipynb", "examples/Building-and-deploying-multi-stage-RecSys/02-Deploying-multi-stage-RecSys-with-Merlin-Systems.ipynb", "examples/Building-and-deploying-multi-stage-RecSys/index.md", "examples/Next-Item-Prediction-with-Transformers/tf/transformers-next-item-prediction.ipynb", "examples/Next-Item-Prediction-with-Transformers/tf/transformers-next-item-prediction-with-pretrained-embeddings.ipynb", "examples/getting-started-movielens/01-Download-Convert.ipynb", "examples/getting-started-movielens/02-ETL-with-NVTabular.ipynb", "examples/getting-started-movielens/03-Training-with-HugeCTR.ipynb", "examples/getting-started-movielens/03-Training-with-PyTorch.ipynb", "examples/getting-started-movielens/03-Training-with-TF.ipynb", "examples/getting-started-movielens/04-Triton-Inference-with-HugeCTR.ipynb", "examples/getting-started-movielens/04-Triton-Inference-with-TF.ipynb", "examples/getting-started-movielens/index.md", "examples/index.md", "examples/quick_start/index.md", "examples/quick_start/ranking.md", "examples/quick_start/scripts/inference/index.md", "examples/quick_start/scripts/inference/inference.ipynb", "examples/quick_start/scripts/preproc/index.md", "examples/quick_start/scripts/ranking/hypertuning/index.md", "examples/quick_start/scripts/ranking/hypertuning/tutorial_with_wb_sweeps.md", "examples/quick_start/scripts/ranking/index.md", "examples/ranking/index.md", "examples/ranking/tf/Training-and-Deploying-DLRM-model-with-Models-and-Systems.ipynb", "examples/sagemaker-tensorflow/index.md", "examples/sagemaker-tensorflow/sagemaker-merlin-tensorflow.ipynb", "examples/scaling-criteo/01-Download-Convert.ipynb", "examples/scaling-criteo/02-ETL-with-NVTabular.ipynb", "examples/scaling-criteo/03-Training-with-HugeCTR.ipynb", "examples/scaling-criteo/03-Training-with-Merlin-Models-TensorFlow.ipynb", "examples/scaling-criteo/04-Triton-Inference-with-HugeCTR.ipynb", "examples/scaling-criteo/04-Triton-Inference-with-Merlin-Models-TensorFlow.ipynb", "examples/scaling-criteo/index.md", "examples/traditional-ml/Serving-An-Implicit-Model-With-Merlin-Systems.ipynb", "examples/traditional-ml/Serving-An-XGboost-Model-With-Merlin-Systems.ipynb", "generated/merlin.dataloader.jax.Loader.rst", "generated/merlin.dataloader.loader_base.ChunkQueue.rst", "generated/merlin.dataloader.loader_base.LoaderBase.rst", "generated/merlin.dataloader.tensorflow.KerasSequenceValidater.rst", "generated/merlin.dataloader.tensorflow.Loader.rst", "generated/merlin.dataloader.tf_utils.HAS_GPU.rst", "generated/merlin.dataloader.tf_utils.configure_tensorflow.rst", "generated/merlin.dataloader.tf_utils.get_dataset_schema_from_feature_columns.rst", "generated/merlin.dataloader.torch.DLDataLoader.rst", "generated/merlin.dataloader.torch.Loader.rst", "generated/merlin.models.tf.AsTabular.rst", "generated/merlin.models.tf.AverageEmbeddingsByWeightFeature.rst", "generated/merlin.models.tf.AvgPrecisionAt.rst", "generated/merlin.models.tf.BinaryClassificationTask.rst", "generated/merlin.models.tf.BinaryOutput.rst", "generated/merlin.models.tf.BroadcastToSequence.rst", "generated/merlin.models.tf.CGCBlock.rst", "generated/merlin.models.tf.CategoricalOutput.rst", "generated/merlin.models.tf.CategoryEncoding.rst", "generated/merlin.models.tf.ColumnBasedSampleWeight.rst", "generated/merlin.models.tf.Cond.rst", "generated/merlin.models.tf.Continuous.rst", "generated/merlin.models.tf.ContinuousEmbedding.rst", "generated/merlin.models.tf.ContinuousFeatures.rst", "generated/merlin.models.tf.ContinuousProjection.rst", "generated/merlin.models.tf.ContrastiveOutput.rst", "generated/merlin.models.tf.CrossBlock.rst", "generated/merlin.models.tf.DCNModel.rst", "generated/merlin.models.tf.DLRMBlock.rst", "generated/merlin.models.tf.DLRMModel.rst", "generated/merlin.models.tf.DeepFMModel.rst", "generated/merlin.models.tf.DenseResidualBlock.rst", "generated/merlin.models.tf.DotProductInteraction.rst", "generated/merlin.models.tf.DualEncoderBlock.rst", "generated/merlin.models.tf.EmbeddingEncoder.rst", "generated/merlin.models.tf.EmbeddingTable.rst", "generated/merlin.models.tf.Embeddings.rst", "generated/merlin.models.tf.Encoder.rst", "generated/merlin.models.tf.ExpandDims.rst", "generated/merlin.models.tf.FMBlock.rst", "generated/merlin.models.tf.FMPairwiseInteraction.rst", "generated/merlin.models.tf.Filter.rst", "generated/merlin.models.tf.HashedCross.rst", "generated/merlin.models.tf.HashedCrossAll.rst", "generated/merlin.models.tf.InBatchSampler.rst", "generated/merlin.models.tf.InputBlock.rst", "generated/merlin.models.tf.InputBlockV2.rst", "generated/merlin.models.tf.ItemRetrievalScorer.rst", "generated/merlin.models.tf.ItemRetrievalTask.rst", "generated/merlin.models.tf.ItemSampler.rst", "generated/merlin.models.tf.L2Norm.rst", "generated/merlin.models.tf.LazyAdam.rst", "generated/merlin.models.tf.Loader.rst", "generated/merlin.models.tf.MLPBlock.rst", "generated/merlin.models.tf.MMOEBlock.rst", "generated/merlin.models.tf.MRRAt.rst", "generated/merlin.models.tf.MapValues.rst", "generated/merlin.models.tf.MatrixFactorizationBlock.rst", "generated/merlin.models.tf.MatrixFactorizationModel.rst", "generated/merlin.models.tf.MatrixFactorizationModelV2.rst", "generated/merlin.models.tf.ModelOutput.rst", "generated/merlin.models.tf.MultiClassClassificationTask.rst", "generated/merlin.models.tf.MultiOptimizer.rst", "generated/merlin.models.tf.NDCGAt.rst", "generated/merlin.models.tf.OptimizerBlocks.rst", "generated/merlin.models.tf.OutputBlock.rst", "generated/merlin.models.tf.PLEBlock.rst", "generated/merlin.models.tf.ParallelBlock.rst", "generated/merlin.models.tf.ParallelPredictionBlock.rst", "generated/merlin.models.tf.PopularityBasedSampler.rst", "generated/merlin.models.tf.PrecisionAt.rst", "generated/merlin.models.tf.PredictionTask.rst", "generated/merlin.models.tf.PredictionTasks.rst", "generated/merlin.models.tf.PrepareFeatures.rst", "generated/merlin.models.tf.PrepareListFeatures.rst", "generated/merlin.models.tf.RecallAt.rst", "generated/merlin.models.tf.RegressionOutput.rst", "generated/merlin.models.tf.RegressionTask.rst", "generated/merlin.models.tf.ReplaceMaskedEmbeddings.rst", "generated/merlin.models.tf.ResidualBlock.rst", "generated/merlin.models.tf.RetrievalModelV2.rst", "generated/merlin.models.tf.SequenceEmbeddingFeatures.rst", "generated/merlin.models.tf.SequenceMaskLast.rst", "generated/merlin.models.tf.SequenceMaskRandom.rst", "generated/merlin.models.tf.SequencePredictLast.rst", "generated/merlin.models.tf.SequencePredictNext.rst", "generated/merlin.models.tf.SequencePredictRandom.rst", "generated/merlin.models.tf.SequenceTargetAsInput.rst", "generated/merlin.models.tf.SequentialBlock.rst", "generated/merlin.models.tf.StochasticSwapNoise.rst", "generated/merlin.models.tf.TabularBlock.rst", "generated/merlin.models.tf.TensorInitializer.rst", "generated/merlin.models.tf.ToDense.rst", "generated/merlin.models.tf.ToOneHot.rst", "generated/merlin.models.tf.ToSparse.rst", "generated/merlin.models.tf.ToTarget.rst", "generated/merlin.models.tf.TopKEncoder.rst", "generated/merlin.models.tf.TopKMetricsAggregator.rst", "generated/merlin.models.tf.TwoTowerBlock.rst", "generated/merlin.models.tf.TwoTowerModel.rst", "generated/merlin.models.tf.TwoTowerModelV2.rst", "generated/merlin.models.tf.WideAndDeepModel.rst", "generated/merlin.models.tf.YoutubeDNNRetrievalModel.rst", "generated/merlin.models.tf.YoutubeDNNRetrievalModelV2.rst", "generated/merlin.models.tf.losses.BPRLoss.rst", "generated/merlin.models.tf.losses.BPRmaxLoss.rst", "generated/merlin.models.tf.losses.CategoricalCrossEntropy.rst", "generated/merlin.models.tf.losses.HingeLoss.rst", "generated/merlin.models.tf.losses.LogisticLoss.rst", "generated/merlin.models.tf.losses.SparseCategoricalCrossEntropy.rst", "generated/merlin.models.tf.losses.TOP1Loss.rst", "generated/merlin.models.tf.losses.TOP1maxLoss.rst", "generated/merlin.models.tf.losses.TOP1v2Loss.rst", "generated/merlin.models.tf.split_embeddings_on_size.rst", "generated/merlin.models.utils.misc_utils.Timing.rst", "generated/merlin.models.utils.misc_utils.filter_kwargs.rst", "generated/merlin.models.utils.misc_utils.get_filenames.rst", "generated/merlin.models.utils.misc_utils.get_label_feature_name.rst", "generated/merlin.models.utils.misc_utils.get_object_size.rst", "generated/merlin.models.utils.misc_utils.get_parquet_files_names.rst", "generated/merlin.models.utils.misc_utils.get_timestamp_feature_name.rst", "generated/merlin.models.utils.misc_utils.safe_json.rst", "generated/merlin.models.utils.misc_utils.validate_dataset.rst", "generated/merlin.models.utils.registry.Registry.rst", "generated/merlin.models.utils.registry.RegistryMixin.rst", "generated/merlin.models.utils.registry.camelcase_to_snakecase.rst", "generated/merlin.models.utils.registry.default_name.rst", "generated/merlin.models.utils.registry.default_object_name.rst", "generated/merlin.models.utils.registry.display_list_by_prefix.rst", "generated/merlin.models.utils.registry.snakecase_to_camelcase.rst", "generated/merlin.models.utils.schema_utils.categorical_cardinalities.rst", "generated/merlin.models.utils.schema_utils.categorical_domains.rst", "generated/merlin.models.utils.schema_utils.create_categorical_column.rst", "generated/merlin.models.utils.schema_utils.create_continuous_column.rst", "generated/merlin.models.utils.schema_utils.filter_dict_by_schema.rst", "generated/merlin.models.utils.schema_utils.get_embedding_size_from_cardinality.rst", "generated/merlin.models.utils.schema_utils.get_embedding_sizes_from_schema.rst", "generated/merlin.models.utils.schema_utils.schema_to_tensorflow_metadata_json.rst", "generated/merlin.models.utils.schema_utils.select_targets.rst", "generated/merlin.models.utils.schema_utils.tensorflow_metadata_json_to_schema.rst", "generated/merlin.systems.dag.Ensemble.rst", "generated/merlin.systems.dag.ops.fil.PredictForest.rst", "generated/merlin.systems.dag.ops.implicit.PredictImplicit.rst", "generated/merlin.systems.dag.ops.session_filter.FilterCandidates.rst", "generated/merlin.systems.dag.ops.softmax_sampling.SoftmaxSampling.rst", "generated/merlin.systems.dag.ops.tensorflow.PredictTensorflow.rst", "generated/merlin.systems.dag.ops.unroll_features.UnrollFeatures.rst", "generated/merlin.systems.dag.ops.workflow.TransformWorkflow.rst", "generated/merlin.systems.triton.convert_df_to_triton_input.rst", "generated/merlin.systems.triton.convert_triton_output_to_df.rst", "generated/nvcr.io-nvidia-merlin-merlin-hugectr.rst", "generated/nvcr.io-nvidia-merlin-merlin-pytorch.rst", "generated/nvcr.io-nvidia-merlin-merlin-tensorflow.rst", "generated/nvtabular.ops.AddMetadata.rst", "generated/nvtabular.ops.AddProperties.rst", "generated/nvtabular.ops.AddTags.rst", "generated/nvtabular.ops.Bucketize.rst", "generated/nvtabular.ops.Categorify.rst", "generated/nvtabular.ops.Clip.rst", "generated/nvtabular.ops.ColumnSimilarity.rst", "generated/nvtabular.ops.DifferenceLag.rst", "generated/nvtabular.ops.DropLowCardinality.rst", "generated/nvtabular.ops.Dropna.rst", "generated/nvtabular.ops.FillMedian.rst", "generated/nvtabular.ops.FillMissing.rst", "generated/nvtabular.ops.Filter.rst", "generated/nvtabular.ops.Groupby.rst", "generated/nvtabular.ops.HashBucket.rst", "generated/nvtabular.ops.HashedCross.rst", "generated/nvtabular.ops.JoinExternal.rst", "generated/nvtabular.ops.JoinGroupby.rst", "generated/nvtabular.ops.LambdaOp.rst", "generated/nvtabular.ops.ListSlice.rst", "generated/nvtabular.ops.LogOp.rst", "generated/nvtabular.ops.Normalize.rst", "generated/nvtabular.ops.NormalizeMinMax.rst", "generated/nvtabular.ops.Operator.rst", "generated/nvtabular.ops.ReduceDtypeSize.rst", "generated/nvtabular.ops.Rename.rst", "generated/nvtabular.ops.StatOperator.rst", "generated/nvtabular.ops.TagAsItemFeatures.rst", "generated/nvtabular.ops.TagAsItemID.rst", "generated/nvtabular.ops.TagAsUserFeatures.rst", "generated/nvtabular.ops.TagAsUserID.rst", "generated/nvtabular.ops.TargetEncoding.rst", "generated/nvtabular.ops.ValueCount.rst", "generated/nvtabular.workflow.workflow.Workflow.rst", "generated/nvtabular.workflow.workflow.WorkflowNode.rst", "guide/recommender_models.rst", "guide/recommender_system_guide.rst", "index.rst", "support_matrix/index.rst", "support_matrix/support_matrix_merlin_hugectr.rst", "support_matrix/support_matrix_merlin_pytorch.rst", "support_matrix/support_matrix_merlin_tensorflow.rst"], "titles": ["NVIDIA Merlin", "merlin.dag.BaseOperator", "merlin.dag.ColumnSelector", "merlin.dag.Graph", "merlin.dag.Node", "merlin.io.Dataset", "merlin.schema.ColumnSchema", "merlin.schema.Schema", "merlin.schema.Tags", "merlin namespace", "Merlin DAG", "Merlin IO", "Merlin Schema", "API Documentation", "API Documentation", "API Documentation", "API Documentation", "merlin_standard_lib package", "merlin_standard_lib.proto package", "merlin_standard_lib.schema package", "merlin_standard_lib.utils package", "API Documentation", "transformers4rec package", "transformers4rec.config package", "transformers4rec.torch package", "transformers4rec.torch.block package", "transformers4rec.torch.features package", "transformers4rec.torch.model package", "transformers4rec.torch.tabular package", "transformers4rec.torch.utils package", "transformers4rec.utils package", "Merlin Containers", "Building Intelligent Recommender Systems with Merlin", "Deploying a Multi-Stage RecSys into Production with Merlin Systems and Triton Inference Server", "Deploying a Multi-Stage Recommender System", "Transformer-based architecture for next-item prediction task", "Transformer-based architecture for next-item prediction task with pretrained embeddings", "Getting Started MovieLens: Download and Convert", "Getting Started MovieLens: ETL with NVTabular", "Getting Started MovieLens: Training with HugeCTR", "Getting Started MovieLens: Training with PyTorch", "Getting Started MovieLens: Training with TensorFlow", "Serve Recommendations from the HugeCTR Model", "Serve Recommendations from the TensorFlow Model", "Getting Started with Merlin and the MovieLens Dataset", "NVIDIA Merlin Example Notebooks", "Quick-start for Merlin", "Quick-start for ranking models with Merlin", "Deploying a Ranking model on Triton Inference Server", "Deploying Ranking Models with Merlin Systems", "Preprocessing script", "Benchmark of ranking models", "Hyperparameter tuning with Quick-start and Weights&amp;Biases Sweeps", "Ranking script", "Training and Deploying Ranking models with Merlin", "Exporting Ranking Models", "Training and Serving Merlin on AWS SageMaker", "Training and Serving Merlin on AWS SageMaker", "Scaling Criteo: Download and Convert", "Scaling Criteo: ETL with NVTabular", "Scaling Criteo: Training with HugeCTR", "Scaling Criteo: Training with Merlin Models TensorFlow", "Scaling Criteo: Triton Inference with HugeCTR", "Scaling Criteo: Triton Inference with Merlin Models TensorFlow", "Scaling Large Datasets with Criteo", "Serving an Implicit Model with Merlin Systems", "Serving an XGBoost Model with Merlin Systems", "merlin.dataloader.jax.Loader", "merlin.dataloader.loader_base.ChunkQueue", "merlin.dataloader.loader_base.LoaderBase", "merlin.dataloader.tensorflow.KerasSequenceValidater", "merlin.dataloader.tensorflow.Loader", "merlin.dataloader.tf_utils.HAS_GPU", "merlin.dataloader.tf_utils.configure_tensorflow", "merlin.dataloader.tf_utils.get_dataset_schema_from_feature_columns", "merlin.dataloader.torch.DLDataLoader", "merlin.dataloader.torch.Loader", "merlin.models.tf.AsTabular", "merlin.models.tf.AverageEmbeddingsByWeightFeature", "merlin.models.tf.AvgPrecisionAt", "merlin.models.tf.BinaryClassificationTask", "merlin.models.tf.BinaryOutput", "merlin.models.tf.BroadcastToSequence", "merlin.models.tf.CGCBlock", "merlin.models.tf.CategoricalOutput", "merlin.models.tf.CategoryEncoding", "merlin.models.tf.ColumnBasedSampleWeight", "merlin.models.tf.Cond", "merlin.models.tf.Continuous", "merlin.models.tf.ContinuousEmbedding", "merlin.models.tf.ContinuousFeatures", "merlin.models.tf.ContinuousProjection", "merlin.models.tf.ContrastiveOutput", "merlin.models.tf.CrossBlock", "merlin.models.tf.DCNModel", "merlin.models.tf.DLRMBlock", "merlin.models.tf.DLRMModel", "merlin.models.tf.DeepFMModel", "merlin.models.tf.DenseResidualBlock", "merlin.models.tf.DotProductInteraction", "merlin.models.tf.DualEncoderBlock", "merlin.models.tf.EmbeddingEncoder", "merlin.models.tf.EmbeddingTable", "merlin.models.tf.Embeddings", "merlin.models.tf.Encoder", "merlin.models.tf.ExpandDims", "merlin.models.tf.FMBlock", "merlin.models.tf.FMPairwiseInteraction", "merlin.models.tf.Filter", "merlin.models.tf.HashedCross", "merlin.models.tf.HashedCrossAll", "merlin.models.tf.InBatchSampler", "merlin.models.tf.InputBlock", "merlin.models.tf.InputBlockV2", "merlin.models.tf.ItemRetrievalScorer", "merlin.models.tf.ItemRetrievalTask", "merlin.models.tf.ItemSampler", "merlin.models.tf.L2Norm", "merlin.models.tf.LazyAdam", "merlin.models.tf.Loader", "merlin.models.tf.MLPBlock", "merlin.models.tf.MMOEBlock", "merlin.models.tf.MRRAt", "merlin.models.tf.MapValues", "merlin.models.tf.MatrixFactorizationBlock", "merlin.models.tf.MatrixFactorizationModel", "merlin.models.tf.MatrixFactorizationModelV2", "merlin.models.tf.ModelOutput", "merlin.models.tf.MultiClassClassificationTask", "merlin.models.tf.MultiOptimizer", "merlin.models.tf.NDCGAt", "merlin.models.tf.OptimizerBlocks", "merlin.models.tf.OutputBlock", "merlin.models.tf.PLEBlock", "merlin.models.tf.ParallelBlock", "merlin.models.tf.ParallelPredictionBlock", "merlin.models.tf.PopularityBasedSampler", "merlin.models.tf.PrecisionAt", "merlin.models.tf.PredictionTask", "merlin.models.tf.PredictionTasks", "merlin.models.tf.PrepareFeatures", "merlin.models.tf.PrepareListFeatures", "merlin.models.tf.RecallAt", "merlin.models.tf.RegressionOutput", "merlin.models.tf.RegressionTask", "merlin.models.tf.ReplaceMaskedEmbeddings", "merlin.models.tf.ResidualBlock", "merlin.models.tf.RetrievalModelV2", "merlin.models.tf.SequenceEmbeddingFeatures", "merlin.models.tf.SequenceMaskLast", "merlin.models.tf.SequenceMaskRandom", "merlin.models.tf.SequencePredictLast", "merlin.models.tf.SequencePredictNext", "merlin.models.tf.SequencePredictRandom", "merlin.models.tf.SequenceTargetAsInput", "merlin.models.tf.SequentialBlock", "merlin.models.tf.StochasticSwapNoise", "merlin.models.tf.TabularBlock", "merlin.models.tf.TensorInitializer", "merlin.models.tf.ToDense", "merlin.models.tf.ToOneHot", "merlin.models.tf.ToSparse", "merlin.models.tf.ToTarget", "merlin.models.tf.TopKEncoder", "merlin.models.tf.TopKMetricsAggregator", "merlin.models.tf.TwoTowerBlock", "merlin.models.tf.TwoTowerModel", "merlin.models.tf.TwoTowerModelV2", "merlin.models.tf.WideAndDeepModel", "merlin.models.tf.YoutubeDNNRetrievalModel", "merlin.models.tf.YoutubeDNNRetrievalModelV2", "merlin.models.tf.losses.BPRLoss", "merlin.models.tf.losses.BPRmaxLoss", "merlin.models.tf.losses.CategoricalCrossEntropy", "merlin.models.tf.losses.HingeLoss", "merlin.models.tf.losses.LogisticLoss", "merlin.models.tf.losses.SparseCategoricalCrossEntropy", "merlin.models.tf.losses.TOP1Loss", "merlin.models.tf.losses.TOP1maxLoss", "merlin.models.tf.losses.TOP1v2Loss", "merlin.models.tf.split_embeddings_on_size", "merlin.models.utils.misc_utils.Timing", "merlin.models.utils.misc_utils.filter_kwargs", "merlin.models.utils.misc_utils.get_filenames", "merlin.models.utils.misc_utils.get_label_feature_name", "merlin.models.utils.misc_utils.get_object_size", "merlin.models.utils.misc_utils.get_parquet_files_names", "merlin.models.utils.misc_utils.get_timestamp_feature_name", "merlin.models.utils.misc_utils.safe_json", "merlin.models.utils.misc_utils.validate_dataset", "merlin.models.utils.registry.Registry", "merlin.models.utils.registry.RegistryMixin", "merlin.models.utils.registry.camelcase_to_snakecase", "merlin.models.utils.registry.default_name", "merlin.models.utils.registry.default_object_name", "merlin.models.utils.registry.display_list_by_prefix", "merlin.models.utils.registry.snakecase_to_camelcase", "merlin.models.utils.schema_utils.categorical_cardinalities", "merlin.models.utils.schema_utils.categorical_domains", "merlin.models.utils.schema_utils.create_categorical_column", "merlin.models.utils.schema_utils.create_continuous_column", "merlin.models.utils.schema_utils.filter_dict_by_schema", "merlin.models.utils.schema_utils.get_embedding_size_from_cardinality", "merlin.models.utils.schema_utils.get_embedding_sizes_from_schema", "merlin.models.utils.schema_utils.schema_to_tensorflow_metadata_json", "merlin.models.utils.schema_utils.select_targets", "merlin.models.utils.schema_utils.tensorflow_metadata_json_to_schema", "merlin.systems.dag.Ensemble", "merlin.systems.dag.ops.fil.PredictForest", "merlin.systems.dag.ops.implicit.PredictImplicit", "merlin.systems.dag.ops.session_filter.FilterCandidates", "merlin.systems.dag.ops.softmax_sampling.SoftmaxSampling", "merlin.systems.dag.ops.tensorflow.PredictTensorflow", "merlin.systems.dag.ops.unroll_features.UnrollFeatures", "merlin.systems.dag.ops.workflow.TransformWorkflow", "merlin.systems.triton.convert_df_to_triton_input", "merlin.systems.triton.convert_triton_output_to_df", "23.xx Container Images", "23.xx Container Images", "23.xx Container Images", "nvtabular.ops.AddMetadata", "nvtabular.ops.AddProperties", "nvtabular.ops.AddTags", "nvtabular.ops.Bucketize", "nvtabular.ops.Categorify", "nvtabular.ops.Clip", "nvtabular.ops.ColumnSimilarity", "nvtabular.ops.DifferenceLag", "nvtabular.ops.DropLowCardinality", "nvtabular.ops.Dropna", "nvtabular.ops.FillMedian", "nvtabular.ops.FillMissing", "nvtabular.ops.Filter", "nvtabular.ops.Groupby", "nvtabular.ops.HashBucket", "nvtabular.ops.HashedCross", "nvtabular.ops.JoinExternal", "nvtabular.ops.JoinGroupby", "nvtabular.ops.LambdaOp", "nvtabular.ops.ListSlice", "nvtabular.ops.LogOp", "nvtabular.ops.Normalize", "nvtabular.ops.NormalizeMinMax", "nvtabular.ops.Operator", "nvtabular.ops.ReduceDtypeSize", "nvtabular.ops.Rename", "nvtabular.ops.StatOperator", "nvtabular.ops.TagAsItemFeatures", "nvtabular.ops.TagAsItemID", "nvtabular.ops.TagAsUserFeatures", "nvtabular.ops.TagAsUserID", "nvtabular.ops.TargetEncoding", "nvtabular.ops.ValueCount", "nvtabular.workflow.workflow.Workflow", "nvtabular.workflow.workflow.WorkflowNode", "Recommender Models", "Recommender Systems Guide", "Merlin", "Merlin Support Matrix", "Merlin HugeCTR Support Matrix", "Merlin PyTorch Support Matrix", "Merlin TensorFlow Support Matrix"], "terms": {"an": [0, 1, 2, 3, 4, 5, 18, 23, 24, 25, 26, 27, 29, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 48, 49, 50, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 67, 68, 70, 71, 75, 76, 78, 86, 90, 93, 94, 95, 97, 101, 102, 103, 104, 105, 106, 109, 110, 112, 119, 124, 125, 126, 129, 134, 148, 150, 164, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 190, 207, 209, 224, 227, 232, 233, 234, 236, 253, 255, 257], "open": [0, 32, 34, 35, 42, 45, 48, 49, 54, 60, 62, 65, 66, 68, 257], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 35, 39, 41, 48, 49, 57, 60, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257], "librari": [0, 5, 29, 31, 34, 35, 36, 37, 38, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 57, 58, 59, 60, 61, 63, 65, 66, 208, 255, 257], "acceler": [0, 38, 40, 41, 44, 45, 47, 49, 50, 56, 57, 59, 60, 65, 66, 169, 170, 257], "recommend": [0, 5, 23, 24, 25, 35, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 83, 85, 94, 95, 96, 97, 111, 112, 118, 133, 150, 166, 167, 168, 169, 170, 172, 174, 175, 177, 178, 179, 202, 203, 257], "system": [0, 5, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 83, 94, 95, 96, 111, 133, 166, 167, 168, 169, 170, 174, 175, 217, 218, 219, 255, 257, 259, 260, 261], "gpu": [0, 5, 29, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 44, 45, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 73, 84, 92, 101, 102, 119, 202, 203, 217, 218, 219, 226, 253, 255, 257, 259, 260, 261], "The": [0, 1, 2, 3, 4, 5, 7, 14, 18, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 72, 73, 74, 78, 80, 81, 82, 84, 85, 86, 90, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 134, 135, 136, 138, 139, 140, 141, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 177, 178, 202, 207, 208, 210, 211, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261], "enabl": [0, 1, 5, 24, 27, 29, 32, 33, 35, 36, 41, 49, 50, 52, 53, 55, 57, 60, 61, 68, 69, 83, 87, 92, 93, 100, 104, 133, 138, 169, 170, 202, 203, 259, 260, 261], "data": [0, 1, 3, 5, 18, 24, 29, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 53, 55, 57, 58, 60, 61, 62, 63, 69, 85, 94, 97, 102, 103, 104, 106, 107, 110, 112, 113, 119, 121, 132, 157, 158, 168, 188, 207, 210, 214, 215, 217, 218, 219, 224, 227, 233, 236, 237, 241, 251, 253, 255, 259, 260, 261], "scientist": 0, "machin": [0, 32, 52, 53, 55, 59, 95, 96, 97, 106, 107, 169, 170, 224, 255], "learn": [0, 24, 29, 39, 42, 44, 45, 50, 52, 54, 55, 56, 57, 83, 86, 94, 95, 96, 97, 118, 121, 126, 132, 133, 167, 168, 177, 179, 208, 224, 255], "engin": [0, 5, 29, 34, 36, 38, 41, 44, 45, 46, 47, 56, 57, 58, 59, 62, 63, 64, 81, 84, 92, 103, 113, 119, 143, 170, 189, 214, 251, 253, 255], "research": [0, 255], "build": [0, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 47, 48, 53, 54, 87, 92, 95, 99, 102, 104, 111, 114, 125, 126, 127, 134, 138, 145, 155, 157, 165, 166, 167, 169, 170, 255, 257], "high": [0, 38, 44, 45, 57, 59, 85, 93, 97, 98, 168, 224, 237, 251, 255, 257], "perform": [0, 5, 24, 27, 31, 32, 33, 34, 35, 36, 41, 45, 47, 49, 50, 51, 53, 54, 55, 57, 61, 65, 66, 73, 78, 84, 92, 104, 119, 168, 202, 203, 224, 233, 236, 237, 241, 251, 257], "scale": [0, 35, 36, 38, 49, 50, 53, 55, 65, 66, 94, 255, 257], "includ": [0, 5, 24, 26, 27, 31, 35, 36, 45, 47, 48, 49, 50, 51, 52, 53, 57, 58, 62, 65, 66, 78, 83, 90, 91, 97, 106, 108, 110, 115, 118, 119, 127, 129, 140, 141, 155, 173, 176, 216, 224, 233, 237, 239, 251, 253], "tool": [0, 32, 35, 36, 51, 55], "address": [0, 43], "common": [0, 47, 50, 53, 54, 57, 59, 69, 240, 241, 251, 255], "featur": [0, 2, 5, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 34, 35, 37, 38, 40, 41, 44, 45, 46, 47, 51, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 69, 74, 78, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 124, 125, 126, 134, 135, 136, 139, 140, 141, 148, 149, 151, 152, 153, 154, 156, 157, 159, 161, 163, 165, 166, 167, 168, 169, 170, 184, 187, 202, 203, 212, 213, 214, 223, 224, 226, 234, 235, 237, 241, 242, 251, 253, 255], "train": [0, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 38, 42, 43, 44, 46, 48, 49, 51, 52, 58, 59, 62, 63, 64, 67, 80, 86, 92, 102, 103, 104, 111, 113, 114, 115, 116, 118, 119, 126, 127, 128, 135, 136, 138, 144, 145, 148, 150, 151, 152, 153, 154, 155, 156, 158, 160, 163, 167, 169, 170, 171, 174, 175, 177, 178, 179, 208, 251, 253, 255, 258, 259, 260, 261], "infer": [0, 5, 24, 26, 29, 31, 32, 34, 36, 38, 39, 42, 44, 45, 53, 54, 56, 58, 60, 64, 78, 80, 81, 92, 94, 96, 97, 102, 103, 111, 113, 119, 144, 145, 165, 166, 168, 170, 207, 208, 209, 211, 212, 217, 218, 219, 236, 253, 258, 259, 260, 261], "challeng": [0, 32, 36, 38], "each": [0, 3, 5, 7, 18, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 71, 76, 85, 95, 101, 102, 103, 104, 106, 109, 110, 112, 118, 119, 120, 121, 129, 135, 136, 139, 148, 150, 163, 165, 166, 169, 170, 207, 224, 226, 227, 230, 231, 233, 236, 237, 239, 245, 251, 253, 255, 256, 258], "stage": [0, 5, 32, 43, 46, 48, 51, 56, 57, 62, 255], "pipelin": [0, 29, 32, 33, 34, 35, 36, 39, 40, 45, 47, 48, 49, 51, 53, 55, 57, 60, 62, 63, 65, 66, 211, 224], "optim": [0, 5, 23, 24, 32, 33, 35, 36, 39, 40, 41, 49, 51, 52, 53, 55, 57, 60, 61, 94, 96, 97, 104, 118, 125, 126, 129, 131, 163, 164, 166, 167, 168, 169, 170, 173, 176, 224], "hundr": [0, 50, 53, 255], "terabyt": [0, 38, 59], "which": [0, 1, 2, 3, 4, 5, 7, 18, 23, 24, 26, 27, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 63, 71, 76, 78, 83, 85, 86, 92, 95, 97, 101, 102, 105, 106, 109, 110, 111, 112, 113, 114, 117, 119, 121, 124, 127, 129, 133, 134, 136, 140, 141, 145, 149, 150, 155, 168, 169, 170, 180, 189, 190, 211, 224, 230, 236, 237, 241, 242, 244, 246, 251, 253, 255], "all": [0, 1, 2, 4, 5, 7, 9, 18, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 83, 89, 101, 103, 105, 106, 110, 112, 118, 119, 132, 134, 140, 141, 153, 155, 157, 164, 167, 168, 169, 171, 174, 175, 177, 178, 179, 210, 211, 217, 218, 219, 224, 225, 228, 229, 232, 237, 239, 244, 246, 251, 253, 259, 260, 261], "access": [0, 24, 25, 29, 31, 36, 42, 45, 49, 50, 60, 149, 150, 190, 255], "through": [0, 5, 24, 33, 35, 36, 38, 39, 40, 41, 42, 46, 50, 53, 55, 57, 59, 63, 65, 66, 67, 68, 110, 119, 168, 255], "easi": [0, 39, 47, 48, 49, 52, 53, 57, 60, 65, 66], "us": [0, 1, 4, 5, 7, 8, 18, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 74, 76, 77, 78, 80, 81, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 106, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 157, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 177, 178, 179, 190, 207, 208, 209, 210, 211, 212, 215, 217, 218, 219, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 241, 242, 245, 251, 253, 255, 256, 259, 260, 261], "api": [0, 5, 24, 35, 38, 39, 44, 45, 47, 48, 52, 53, 57, 59, 60, 61, 62, 63, 65, 66, 253], "For": [0, 5, 18, 24, 26, 27, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 62, 63, 65, 66, 78, 94, 96, 97, 110, 114, 129, 134, 136, 140, 141, 148, 168, 171, 174, 175, 177, 178, 179, 224, 225, 226, 227, 232, 236, 239, 244, 251, 255, 257], "more": [0, 5, 18, 24, 27, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 69, 92, 111, 113, 118, 119, 121, 132, 168, 169, 170, 171, 174, 175, 177, 178, 179, 210, 233, 255, 256, 257], "inform": [0, 5, 18, 24, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 52, 53, 54, 55, 59, 60, 62, 63, 65, 66, 150, 168, 172, 178, 255, 257], "see": [0, 5, 18, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 93, 94, 101, 102, 119, 129, 168, 171, 174, 175, 177, 178, 179, 233, 234, 255, 257, 258], "develop": [0, 32, 35, 39, 49, 54, 57, 60, 65, 66, 256, 257], "web": [0, 94], "site": 0, "scalabl": [0, 35, 48, 49, 53, 255], "solut": [0, 39, 50, 52, 53, 55, 60], "make": [0, 2, 4, 29, 33, 35, 36, 38, 45, 47, 49, 50, 51, 52, 53, 55, 56, 57, 59, 65, 66, 71, 76, 83, 133, 173, 176, 227, 233], "from": [0, 1, 2, 3, 4, 5, 7, 18, 23, 24, 25, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 68, 69, 70, 71, 74, 76, 80, 81, 83, 85, 87, 90, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 118, 119, 121, 124, 125, 126, 128, 133, 135, 139, 144, 148, 150, 151, 152, 157, 163, 165, 166, 168, 170, 171, 189, 190, 201, 202, 203, 207, 224, 226, 228, 230, 232, 234, 236, 237, 239, 241, 242, 244, 246, 251, 253, 255, 256], "end": [0, 18, 24, 27, 29, 32, 35, 45, 49, 52, 53, 60, 63, 65, 66, 70, 239, 255], "With": [0, 31, 33, 35, 51, 56, 57, 62, 63, 65, 66], "you": [0, 1, 2, 4, 5, 7, 18, 24, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 73, 84, 86, 92, 94, 97, 101, 106, 110, 115, 119, 132, 150, 157, 163, 168, 173, 176, 211, 217, 218, 219, 225, 234, 253, 259, 260, 261], "can": [0, 1, 2, 4, 5, 7, 18, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 71, 74, 76, 83, 85, 86, 92, 94, 95, 97, 98, 101, 102, 103, 104, 109, 110, 115, 118, 119, 121, 133, 134, 148, 155, 157, 163, 168, 169, 170, 173, 176, 212, 214, 217, 218, 219, 224, 225, 227, 237, 241, 251, 253, 255, 258, 259, 260, 261], "transform": [0, 1, 2, 3, 4, 5, 9, 21, 22, 24, 26, 27, 29, 32, 38, 43, 48, 49, 55, 59, 62, 65, 67, 68, 69, 71, 76, 81, 84, 85, 90, 92, 103, 105, 108, 109, 110, 112, 113, 119, 127, 132, 134, 138, 140, 143, 145, 148, 149, 150, 151, 152, 153, 154, 157, 160, 162, 168, 190, 207, 208, 209, 210, 211, 212, 213, 214, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251, 252, 253, 255], "etl": [0, 34, 39, 40, 45, 55, 58, 62, 66], "preprocess": [0, 29, 32, 34, 36, 39, 42, 43, 44, 45, 46, 48, 49, 52, 53, 55, 56, 57, 62, 65, 66, 85, 119, 148, 155, 168, 253], "your": [0, 2, 4, 32, 33, 34, 35, 36, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 63, 65, 66, 97, 101, 106, 119, 168], "exist": [0, 5, 32, 35, 36, 38, 39, 40, 52, 53, 57, 58, 59, 190], "tensorflow": [0, 18, 31, 32, 33, 34, 35, 36, 37, 38, 40, 44, 45, 47, 49, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66, 69, 73, 74, 104, 118, 119, 136, 171, 174, 175, 177, 178, 179, 219, 255, 258], "pytorch": [0, 24, 25, 26, 31, 32, 33, 35, 36, 37, 38, 44, 45, 49, 54, 55, 58, 59, 65, 66, 69, 218, 255, 258], "fastai": [0, 29, 75], "leverag": [0, 5, 36, 38, 40, 41, 45, 47, 53, 59, 60, 65, 66, 119, 255], "custom": [0, 1, 5, 32, 35, 36, 38, 47, 50, 53, 55, 57, 65, 66, 83, 94, 96, 97, 113, 119, 132, 168, 171, 174, 175, 177, 178, 179, 212, 255], "loader": [0, 24, 29, 33, 36, 39, 40, 69], "larg": [0, 5, 38, 39, 47, 50, 53, 60, 61, 111, 118, 136, 166, 167, 169, 170, 180, 237, 251, 255], "deep": [0, 32, 33, 35, 36, 38, 39, 41, 42, 47, 49, 51, 55, 57, 59, 60, 61, 62, 65, 66, 93, 94, 95, 96, 97, 168, 169, 170, 255], "model": [0, 18, 22, 23, 24, 25, 26, 29, 31, 33, 34, 38, 40, 44, 45, 46, 50, 52, 56, 59, 60, 62, 64, 67, 71, 76, 207, 208, 209, 212, 214, 217, 218, 219, 256, 258, 259, 260, 261], "distribut": [0, 5, 18, 24, 26, 27, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 52, 53, 55, 57, 58, 60, 61, 62, 63, 65, 66, 67, 83, 92, 121, 133, 136, 171, 174, 175, 177, 178, 179, 217, 218, 219, 253, 259, 260, 261], "embed": [0, 8, 9, 22, 24, 27, 29, 31, 33, 34, 35, 38, 39, 40, 41, 47, 50, 51, 59, 60, 78, 84, 92, 94, 95, 96, 97, 101, 102, 106, 107, 111, 112, 113, 114, 115, 116, 124, 125, 126, 129, 132, 134, 136, 145, 148, 150, 158, 163, 165, 166, 168, 169, 180, 202, 203, 217, 218, 219, 224, 255, 259, 260, 261], "tabl": [0, 5, 22, 24, 26, 27, 31, 33, 39, 50, 51, 53, 60, 94, 95, 97, 101, 102, 103, 112, 113, 124, 125, 126, 148, 165, 166, 169, 180, 224, 236], "exce": 0, "avail": [0, 5, 24, 29, 31, 34, 36, 39, 43, 45, 46, 47, 50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 62, 64, 65, 66, 253, 255, 257, 258], "cpu": [0, 5, 23, 24, 29, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 47, 49, 50, 53, 55, 57, 58, 59, 61, 226], "memori": [0, 5, 32, 33, 35, 36, 38, 39, 41, 47, 50, 53, 55, 57, 59, 60, 61, 73, 85, 119, 224, 226, 237, 251], "deploi": [0, 32, 42, 43, 47, 50, 51, 52, 53, 56, 57, 61, 64, 65, 66, 255, 258, 259, 260, 261], "product": [0, 5, 17, 18, 23, 24, 32, 34, 35, 36, 38, 39, 43, 48, 49, 50, 51, 55, 61, 62, 63, 65, 66, 92, 106, 114, 124, 168, 226, 255, 259, 260, 261], "onli": [0, 5, 7, 18, 23, 24, 25, 26, 27, 29, 32, 35, 37, 38, 39, 40, 41, 42, 47, 48, 50, 51, 53, 55, 57, 61, 62, 65, 66, 72, 85, 86, 88, 92, 95, 101, 102, 103, 104, 105, 106, 108, 109, 110, 118, 124, 125, 126, 132, 134, 136, 140, 164, 168, 190, 224, 225, 228, 234, 236, 239, 251, 253, 255], "few": [0, 41, 53], "line": [0, 32, 33, 34, 36, 41, 45, 47, 51, 52, 54, 55, 57], "code": [0, 32, 33, 35, 36, 38, 41, 48, 49, 50, 55, 57, 59, 60, 65, 66, 255], "consist": [0, 18, 24, 27, 29, 33, 35, 36, 38, 48, 49, 65, 66, 98, 106, 110, 140, 141, 207], "follow": [0, 5, 18, 23, 24, 27, 29, 31, 32, 33, 34, 35, 36, 39, 41, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 65, 66, 85, 95, 109, 110, 165, 168, 179, 217, 218, 219, 251, 253, 258, 259, 260, 261], "nvtabular": [0, 5, 33, 34, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 50, 56, 57, 58, 61, 62, 64, 65, 66, 74, 103, 112, 113, 119, 132, 136, 189, 214, 217, 218, 219, 259, 260, 261], "tabular": [0, 22, 24, 27, 29, 35, 36, 38, 50, 53, 59, 103, 112, 113, 119, 157, 251], "quickli": [0, 38, 46, 47, 49, 59, 65, 66], "easili": [0, 32, 33, 35, 38, 47, 48, 53, 55, 59, 168, 227], "manipul": [0, 38, 59, 101, 210], "size": [0, 5, 17, 18, 24, 25, 26, 27, 29, 35, 36, 38, 40, 45, 47, 51, 57, 58, 59, 60, 64, 67, 68, 101, 103, 104, 106, 109, 110, 111, 114, 119, 136, 145, 168, 171, 172, 174, 175, 177, 178, 179, 180, 185, 189, 203, 214, 217, 218, 219, 224, 259, 260, 261], "dataset": [0, 1, 2, 3, 4, 7, 9, 17, 18, 19, 24, 26, 29, 32, 33, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 67, 68, 69, 71, 74, 75, 76, 84, 92, 101, 102, 104, 119, 147, 158, 163, 168, 189, 224, 226, 227, 232, 233, 236, 251, 253, 255, 256], "ar": [0, 1, 2, 5, 6, 7, 14, 18, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 72, 83, 93, 94, 101, 102, 103, 104, 106, 111, 114, 118, 119, 124, 125, 126, 132, 135, 136, 139, 140, 146, 149, 150, 151, 152, 155, 157, 159, 161, 163, 167, 168, 169, 170, 174, 175, 189, 190, 224, 225, 227, 233, 236, 237, 242, 251, 255, 256], "base": [0, 1, 2, 3, 4, 5, 6, 7, 8, 17, 18, 19, 22, 23, 24, 27, 28, 29, 32, 33, 34, 37, 38, 39, 40, 41, 43, 45, 46, 47, 49, 50, 54, 55, 57, 58, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 190, 191, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 259, 260, 261], "offer": [0, 35, 39, 57, 60], "level": [0, 5, 18, 24, 29, 38, 44, 45, 47, 51, 53, 57, 59, 67, 68, 106, 110, 119, 168, 224, 237, 251], "defin": [0, 1, 2, 4, 5, 18, 23, 24, 25, 26, 27, 29, 32, 33, 35, 36, 37, 41, 43, 47, 48, 49, 52, 55, 57, 58, 60, 61, 63, 65, 66, 69, 95, 105, 106, 107, 110, 145, 164, 165, 166, 168, 173, 176, 220, 223, 224, 229, 231, 232, 235, 236, 237, 240, 241, 242, 245, 253, 255], "complex": [0, 5, 32, 38, 53, 256], "workflow": [0, 1, 4, 5, 32, 33, 35, 38, 39, 41, 42, 45, 47, 48, 49, 50, 55, 57, 59, 61, 62, 65, 66, 74, 119, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 245, 246, 251, 259, 260, 261], "prepar": [0, 23, 24, 25, 27, 29, 45, 49, 50, 52, 55, 57, 59, 100, 104, 140, 141, 151, 152, 153], "experiment": [0, 5], "so": [0, 5, 24, 26, 27, 29, 32, 35, 36, 37, 38, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 62, 65, 66, 81, 84, 86, 90, 92, 104, 111, 112, 115, 125, 126, 127, 134, 141, 148, 150, 157, 166, 167, 168, 169, 170, 173, 176, 214, 225], "process": [0, 5, 24, 26, 27, 29, 32, 35, 36, 41, 45, 46, 47, 50, 53, 55, 59, 60, 61, 62, 63, 65, 66, 67, 69, 90, 92, 100, 112, 113, 115, 119, 134, 148, 157, 163, 224, 253, 255, 257], "without": [0, 7, 9, 18, 27, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 69, 71, 76, 85, 101, 119, 155, 190, 255], "have": [0, 3, 6, 18, 24, 27, 28, 32, 33, 35, 36, 38, 39, 40, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 62, 65, 66, 74, 82, 93, 105, 111, 121, 129, 134, 155, 232, 239, 241, 245, 253, 255], "worri": 0, "about": [0, 18, 31, 32, 35, 36, 38, 40, 41, 45, 47, 48, 52, 54, 55, 56, 57, 59, 60, 65, 66, 231, 255, 257, 258], "focu": [0, 45, 49, 65, 66, 255], "what": [0, 1, 24, 26, 32, 36, 39, 41, 43, 47, 59, 65, 66, 110, 129, 148], "do": [0, 5, 23, 24, 29, 33, 34, 35, 36, 39, 42, 43, 47, 48, 49, 50, 55, 57, 62, 63, 65, 66, 67, 73, 104, 234, 253], "how": [0, 2, 5, 24, 26, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 45, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 88, 101, 102, 103, 121, 168, 223, 236, 255], "abstract": [0, 5, 25, 38, 55, 59, 116], "oper": [0, 1, 2, 3, 4, 5, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 38, 41, 49, 50, 53, 55, 57, 61, 65, 66, 100, 118, 157, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 251, 252, 253, 259, 260, 261], "hugectr": [0, 5, 31, 37, 38, 44, 45, 58, 59, 64, 217, 218, 219, 255, 258, 260, 261], "framework": [0, 29, 33, 39, 41, 45, 49, 54, 55, 59, 60, 61, 65, 66, 75, 255], "across": [0, 38, 39, 50, 52, 59], "multipl": [0, 18, 23, 24, 25, 26, 32, 33, 35, 36, 38, 39, 40, 45, 47, 48, 50, 51, 52, 53, 59, 60, 64, 83, 112, 129, 132, 134, 148, 163, 164, 168, 202, 203, 207, 224, 251, 255], "node": [0, 2, 3, 9, 33, 35, 36, 39, 41, 45, 55, 57, 59, 60, 64, 65, 66, 69, 207, 210, 224, 228, 237, 251, 253, 254], "contain": [0, 1, 3, 5, 6, 7, 24, 25, 27, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 78, 80, 85, 89, 90, 102, 104, 107, 108, 109, 110, 111, 114, 115, 129, 132, 134, 136, 138, 144, 148, 157, 168, 180, 224, 228, 246, 255, 258], "provid": [0, 1, 2, 4, 6, 7, 18, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 63, 64, 74, 80, 81, 84, 85, 86, 90, 92, 93, 94, 95, 97, 103, 104, 105, 106, 110, 111, 113, 114, 118, 126, 132, 134, 136, 144, 148, 157, 159, 161, 163, 165, 166, 168, 190, 202, 203, 223, 239, 255, 256, 258], "strategi": [0, 23, 24, 38, 47, 50, 126, 147, 149, 150, 152, 163, 167, 171, 174, 175, 177, 178, 179, 251, 255], "beyond": [0, 32, 118], "over": [0, 5, 24, 29, 32, 38, 39, 40, 46, 47, 52, 58, 59, 60, 61, 121, 169], "load": [0, 1, 5, 22, 24, 25, 29, 32, 35, 36, 37, 38, 39, 40, 41, 48, 49, 53, 55, 57, 59, 61, 62, 63, 65, 66, 67, 69, 119, 189, 207, 212, 226, 231, 236, 253], "subset": [0, 5, 58, 86, 129, 169, 210, 236], "coars": 0, "grain": 0, "demand": [0, 5, 38], "manner": [0, 59], "dure": [0, 23, 24, 27, 29, 32, 35, 38, 41, 47, 48, 49, 51, 52, 53, 55, 62, 63, 65, 66, 103, 104, 114, 138, 150, 212, 214], "standard": [0, 8, 24, 26, 35, 36, 38, 48, 49, 50, 57, 59, 78, 92, 102, 241, 242], "aim": [0, 53], "qualiti": [0, 255], "implement": [0, 1, 5, 24, 25, 27, 28, 35, 38, 40, 41, 50, 53, 57, 83, 92, 104, 106, 111, 118, 119, 121, 133, 136, 145, 150, 168, 179, 246, 255], "rang": [0, 24, 26, 27, 40, 42, 50, 51, 52, 53, 58, 59, 62, 110, 165, 166, 202, 203, 224, 234], "classic": [0, 255], "highli": [0, 39, 40, 41, 43, 60], "advanc": [0, 35, 36, 50, 51, 53, 69, 111], "rank": [0, 24, 27, 29, 33, 34, 46, 50, 52, 56, 57, 63, 66, 67, 93, 94, 98, 171, 256], "up": [0, 2, 4, 24, 34, 36, 38, 39, 40, 47, 49, 52, 53, 56, 59, 60, 65, 66, 68, 148, 207, 226, 231, 251, 253], "10x": [0, 39, 60], "iter": [0, 5, 7, 24, 27, 29, 38, 40, 46, 47, 58, 59, 62, 67, 68, 69, 75, 119, 129], "rapidli": 0, "explor": [0, 32, 44, 47, 51, 52, 55, 64, 255], "map": [0, 1, 5, 24, 26, 32, 33, 35, 36, 38, 40, 49, 50, 52, 53, 55, 59, 60, 62, 71, 74, 76, 104, 113, 119, 123, 148, 168, 184, 187, 190, 224, 234, 246], "creat": [0, 5, 6, 17, 19, 21, 22, 23, 24, 25, 29, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 47, 49, 50, 53, 58, 59, 60, 61, 62, 63, 69, 87, 90, 93, 94, 95, 97, 98, 101, 102, 103, 104, 106, 112, 114, 118, 121, 124, 128, 132, 139, 145, 146, 154, 155, 168, 195, 211, 214, 224, 227, 235, 237, 246, 251], "input": [0, 1, 2, 3, 4, 5, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 52, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 69, 71, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 120, 121, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 138, 139, 140, 141, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 207, 208, 209, 210, 211, 212, 214, 215, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251, 253, 255], "layer": [0, 23, 24, 25, 26, 27, 28, 29, 35, 36, 38, 40, 41, 47, 51, 53, 59, 77, 78, 80, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 109, 110, 111, 112, 113, 115, 116, 120, 121, 123, 127, 128, 132, 133, 134, 135, 136, 138, 139, 143, 144, 146, 147, 148, 155, 157, 163, 167, 168, 169, 170, 173, 176, 255], "automat": [0, 24, 25, 26, 27, 35, 40, 48, 50, 53, 58, 62, 95, 103, 112, 113, 119, 121, 132, 134, 151, 152, 153, 154, 157, 165, 166], "chang": [0, 5, 18, 24, 33, 35, 36, 38, 50, 69, 244], "either": [0, 5, 6, 18, 24, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 86, 113, 119, 132, 140, 190], "impact": [0, 29, 67, 119], "other": [0, 2, 3, 5, 17, 19, 24, 25, 32, 33, 35, 36, 38, 41, 47, 49, 50, 51, 52, 53, 55, 57, 61, 85, 86, 89, 102, 110, 111, 129, 140, 157, 159, 161, 237, 251], "assembl": 0, "connect": [0, 25, 43, 48, 49, 55, 58, 59, 98, 101, 109, 112, 120, 129, 146, 255], "block": [0, 22, 23, 24, 26, 27, 35, 47, 53, 55, 80, 81, 82, 83, 84, 86, 89, 90, 92, 93, 94, 95, 96, 97, 98, 100, 103, 104, 106, 107, 109, 110, 112, 113, 114, 115, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 160, 162, 163, 165, 166, 168, 169, 180, 181, 255], "recsi": [0, 32, 34, 46, 47, 50, 150], "architectur": [0, 24, 25, 29, 32, 37, 38, 39, 41, 47, 51, 55, 59, 60, 61, 63, 94, 95, 96, 97, 165, 166, 167, 168, 169, 170, 217, 218, 219, 255, 256, 259, 260, 261], "new": [0, 2, 4, 5, 6, 7, 24, 29, 32, 33, 38, 50, 53, 57, 59, 66, 104, 113, 114, 118, 224, 226, 227, 232, 233, 237, 245, 246, 251, 255], "transformers4rec": [0, 21, 217, 218, 219, 255, 259, 260, 261], "sequenti": [0, 23, 24, 25, 26, 27, 28, 29, 33, 40, 48, 52, 78, 102, 112, 140, 141, 148, 149, 150, 151, 152, 153, 154, 155, 207, 256], "session": [0, 8, 9, 23, 24, 25, 27, 29, 35, 36, 46, 57, 113, 172, 177, 178, 179, 227, 256], "modular": 0, "compat": [0, 32, 47, 50, 57, 59, 65, 66, 118, 119, 217, 218, 219, 259, 260, 261], "modul": [0, 21, 32, 33, 35, 36, 38, 40, 41, 49, 53, 55, 58, 59, 66, 90, 108, 112, 134, 148, 157, 253], "design": [0, 35, 38, 39, 41, 46, 47, 48, 50, 51, 54, 59, 207], "tower": [0, 47, 51, 53, 100, 111, 114, 125, 126, 132, 134, 165, 166, 167, 255], "head": [0, 5, 9, 22, 24, 25, 32, 35, 36, 37, 38, 42, 47, 50, 51, 53, 55, 66], "task": [0, 5, 23, 24, 27, 29, 32, 33, 41, 49, 52, 55, 57, 61, 66, 80, 81, 83, 84, 86, 92, 94, 96, 97, 115, 121, 127, 128, 132, 133, 135, 138, 139, 143, 144, 150, 168, 224, 237, 251, 255], "loss": [0, 23, 24, 27, 29, 32, 35, 36, 39, 40, 41, 47, 51, 55, 57, 60, 61, 81, 84, 86, 92, 127, 138, 143, 155, 163, 166, 168], "ani": [0, 1, 2, 3, 5, 7, 18, 24, 25, 26, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 50, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 69, 75, 101, 119, 124, 125, 126, 127, 132, 134, 143, 155, 158, 184, 187, 212, 217, 218, 219, 224, 228, 246, 252, 253, 259, 260, 261], "take": [0, 2, 5, 24, 27, 32, 33, 35, 36, 37, 38, 40, 41, 49, 51, 53, 55, 58, 59, 62, 66, 68, 101, 102, 145, 168, 210, 213, 214, 225, 232, 239, 245], "advantag": [0, 39, 60, 255], "integr": [0, 24, 32, 39, 40, 55, 157], "seamless": [0, 55], "next": [0, 24, 27, 29, 33, 37, 40, 46, 47, 48, 51, 55, 59, 60, 69, 71, 76, 90, 103, 112, 113, 132, 134, 148, 150, 152, 157, 255], "item": [0, 8, 9, 23, 24, 26, 27, 28, 29, 33, 34, 37, 38, 40, 41, 47, 49, 50, 53, 55, 57, 65, 66, 85, 90, 92, 100, 111, 114, 115, 124, 125, 129, 134, 136, 148, 149, 150, 151, 152, 153, 157, 163, 165, 166, 167, 168, 169, 171, 172, 174, 175, 177, 178, 179, 190, 209, 213, 239, 255], "predict": [0, 23, 24, 27, 29, 32, 33, 38, 41, 42, 45, 47, 49, 50, 51, 53, 55, 57, 61, 65, 66, 80, 81, 84, 86, 92, 94, 96, 97, 104, 115, 127, 128, 135, 138, 139, 143, 144, 145, 149, 150, 151, 152, 153, 163, 164, 168, 171, 172, 174, 175, 177, 178, 179, 209, 211, 212, 255], "well": [0, 18, 31, 35, 37, 38, 40, 41, 45, 47, 58, 59, 62, 64, 255], "binari": [0, 8, 9, 24, 27, 29, 32, 33, 35, 36, 38, 39, 41, 45, 47, 49, 50, 51, 53, 55, 57, 61, 80, 81, 84, 86, 92, 168, 230, 231, 251], "classif": [0, 8, 9, 24, 27, 29, 45, 47, 50, 53, 80, 81, 84, 92, 128, 168], "regress": [0, 8, 9, 24, 27, 47, 50, 53, 66, 143, 144], "combin": [0, 1, 5, 18, 22, 23, 24, 26, 33, 35, 36, 39, 40, 41, 50, 53, 60, 78, 89, 91, 94, 95, 96, 100, 101, 102, 103, 106, 110, 111, 112, 121, 165, 166, 168, 169, 224, 235], "element": [0, 2, 24, 28, 68, 85, 86, 90, 98, 109, 110, 119, 134, 145, 148, 151, 153, 157, 210, 239, 251], "like": [0, 3, 4, 5, 23, 24, 26, 27, 28, 32, 34, 35, 36, 38, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 62, 65, 66, 85, 86, 103, 104, 107, 111, 145, 148, 168, 190, 234, 237, 251], "store": [0, 5, 23, 24, 34, 36, 40, 42, 45, 47, 50, 53, 57, 59, 62, 63, 92, 104, 119, 224, 236, 237, 251, 255], "nearest": [0, 32, 33, 63, 255], "neighbor": [0, 33, 63, 255], "search": [0, 32, 33, 34, 45, 47, 52], "serv": [0, 18, 32, 33, 34, 41, 44, 48, 49, 51, 55, 62, 63, 255], "triton": [0, 29, 32, 34, 36, 39, 41, 44, 45, 46, 54, 56, 64, 207, 208, 217, 218, 219, 255, 259, 260, 261], "server": [0, 29, 32, 34, 36, 39, 41, 44, 45, 52, 54, 56, 60, 64, 207, 217, 218, 219, 259, 260, 261], "start": [0, 3, 29, 32, 34, 35, 36, 48, 50, 51, 53, 54, 57, 58, 59, 60, 61, 63, 68, 239, 255], "platform": [0, 32, 33, 35, 36, 41, 49, 50, 55, 57, 61], "graph": [0, 2, 4, 5, 9, 18, 35, 38, 57, 60, 63, 101, 102, 207, 210, 253], "gener": [0, 5, 18, 24, 26, 27, 29, 32, 33, 38, 39, 40, 42, 47, 48, 49, 50, 51, 53, 55, 62, 63, 65, 66, 75, 101, 102, 103, 112, 113, 119, 132, 163, 165, 166, 168, 169, 170, 190, 191, 255], "popular": [0, 32, 37, 39, 40, 41, 44, 45, 47, 50, 53, 60, 61, 92, 111, 136, 255], "commonli": 0, "found": [0, 3, 7, 24, 26, 32, 33, 35, 36, 38, 39, 40, 41, 42, 51, 55, 57, 59, 61, 65, 66, 78, 95, 165, 166, 169, 170], "core": [0, 32, 33, 35, 36, 37, 38, 41, 42, 43, 45, 47, 49, 53, 55, 57, 58, 59, 61, 62, 63, 65, 66, 94, 103, 112, 113, 169, 217, 218, 219, 259, 260, 261], "function": [0, 1, 5, 7, 24, 25, 26, 27, 29, 35, 36, 38, 40, 41, 48, 50, 53, 55, 57, 59, 61, 67, 69, 71, 74, 76, 81, 84, 92, 98, 101, 102, 103, 104, 110, 112, 113, 119, 120, 124, 125, 126, 127, 129, 143, 155, 166, 168, 182, 189, 190, 193, 202, 203, 210, 224, 230, 232, 234, 235, 237, 241, 242, 244, 245, 246, 251, 255], "throughout": [0, 59, 65, 66], "ecosystem": [0, 8], "schema": [0, 1, 2, 3, 4, 5, 9, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 32, 33, 35, 36, 38, 40, 41, 43, 47, 49, 50, 53, 55, 57, 59, 61, 62, 63, 65, 66, 69, 78, 80, 81, 82, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 106, 108, 109, 110, 112, 113, 115, 119, 120, 124, 125, 126, 128, 129, 132, 134, 135, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 197, 198, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220, 224, 226, 228, 233, 236, 237, 244, 251, 253], "identifi": [0, 5, 18, 31, 34, 35, 45, 54, 55, 59, 88, 111, 114, 163, 190, 214], "kei": [0, 5, 18, 23, 24, 25, 26, 29, 31, 35, 36, 39, 42, 50, 52, 53, 62, 77, 78, 92, 103, 105, 111, 119, 124, 125, 126, 132, 134, 135, 139, 140, 141, 165, 166, 190, 214, 224, 233, 234, 237, 251], "autom": [0, 47], "routin": 0, "simplifi": [0, 38, 48, 55, 59, 257], "share": [0, 24, 26, 27, 29, 47, 50, 51, 52, 53, 83, 102, 133, 148, 255], "construct": [0, 5, 24, 27, 38, 65, 66, 74, 103, 112, 113, 118, 132, 170, 207], "simplest": 0, "wai": [0, 18, 24, 35, 36, 38, 41, 48, 49, 50, 52, 65, 66, 93, 168, 208, 237, 255], "run": [0, 1, 23, 24, 27, 29, 31, 32, 33, 35, 36, 39, 42, 47, 48, 49, 50, 52, 53, 55, 57, 59, 62, 63, 65, 66, 69, 70, 73, 101, 102, 190, 207, 208, 209, 212, 214, 217, 218, 219, 259, 260, 261], "docker": [0, 31, 34, 42, 43, 45, 50, 52, 53, 54, 56], "cloud": [0, 5, 31, 45, 52, 54, 55], "ngc": [0, 31, 32, 34, 45, 57], "depend": [0, 1, 4, 9, 21, 22, 24, 27, 36, 37, 38, 39, 40, 41, 43, 45, 47, 53, 55, 59, 60, 110, 210, 211, 213, 227, 228, 233, 237, 246, 251], "receiv": [0, 7, 40, 43, 47, 48, 55, 62, 63, 65, 66, 210, 211, 255], "unit": [0, 18, 120, 241], "test": [0, 18, 23, 24, 25, 26, 27, 29, 32, 35, 36, 37, 47, 48, 55, 57, 58, 65, 86, 92, 104, 114, 127, 151, 152, 153, 154, 224, 253], "page": [0, 32, 34, 47, 54, 258], "To": [0, 5, 18, 24, 31, 32, 33, 34, 35, 36, 40, 41, 45, 47, 49, 54, 55, 56, 57, 61, 62, 84, 92, 129, 145, 224, 251, 258], "contribut": 0, "review": [0, 255], "document": [0, 5, 35, 36, 38, 42, 46, 47, 49, 50, 51, 53, 54, 55, 56, 59, 62, 63, 65, 66, 97, 106, 107, 226, 258], "environ": [0, 18, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 73, 119], "set": [0, 1, 5, 6, 18, 23, 24, 25, 26, 27, 29, 34, 35, 36, 37, 38, 41, 42, 47, 48, 49, 51, 52, 55, 56, 57, 58, 59, 62, 65, 66, 73, 85, 86, 92, 98, 101, 102, 103, 109, 110, 111, 112, 114, 119, 127, 143, 145, 149, 150, 152, 157, 158, 163, 190, 208, 209, 211, 213, 215, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251, 253, 255, 256], "conda": 0, "pip": [0, 32, 33, 47, 52, 55, 57], "step": [0, 17, 18, 23, 24, 33, 35, 36, 40, 41, 42, 43, 45, 47, 48, 49, 53, 54, 55, 56, 57, 65, 66, 104, 118, 163, 168, 255], "http": [0, 18, 24, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 94, 95, 97, 103, 106, 107, 112, 113, 118, 132, 136, 165, 169, 170, 171, 172, 174, 175, 177, 178, 179, 257], "github": [0, 24, 27, 33, 35, 38, 60, 103, 112, 113, 132, 257], "io": [0, 9, 24, 27, 29, 32, 34, 35, 38, 39, 40, 41, 42, 47, 52, 54, 55, 57, 59, 61, 65, 67, 68, 102, 103, 104, 112, 113, 119, 132, 163, 253], "master": 0, "hugectr_contributor_guid": 0, "html": [0, 24, 27, 32, 35, 38, 39, 40, 41, 42, 55, 65, 103, 112, 113, 132], "A": [0, 1, 2, 3, 4, 5, 6, 7, 17, 18, 19, 23, 24, 25, 26, 27, 29, 35, 38, 39, 42, 47, 50, 53, 58, 69, 71, 76, 78, 81, 83, 84, 85, 89, 90, 92, 93, 94, 97, 98, 101, 102, 103, 104, 107, 109, 113, 114, 117, 118, 119, 120, 121, 124, 127, 133, 136, 143, 145, 148, 151, 152, 153, 154, 155, 157, 163, 164, 167, 177, 179, 181, 203, 208, 209, 210, 215, 216, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251, 253, 255], "collect": [0, 5, 7, 17, 18, 19, 24, 29, 38, 40, 45, 48, 57, 59, 70, 236], "form": [0, 35, 50, 53, 59, 119], "jupyt": [0, 32, 34, 35, 38, 39, 40, 41, 42, 45, 49, 54, 55, 65, 66], "demonstr": [0, 33, 34, 45, 47, 48, 49, 52, 53, 54, 55, 64, 65, 66, 255], "download": [0, 44, 55, 57, 59, 64, 65, 66], "These": [0, 18, 33, 35, 36, 41, 45, 48, 50, 55, 57, 61], "differ": [0, 5, 6, 18, 23, 24, 26, 32, 34, 37, 40, 45, 47, 50, 51, 53, 55, 57, 59, 61, 101, 102, 110, 111, 118, 129, 208, 227, 241, 255, 256], "wide": [0, 39, 47, 51, 60, 97, 106, 168, 255], "real": [0, 5, 32, 55, 57], "world": [0, 32, 57], "case": [0, 2, 5, 7, 24, 27, 33, 35, 36, 46, 47, 50, 51, 52, 53, 54, 57, 78, 86, 92, 101, 119, 150, 171, 173, 174, 175, 176, 177, 178, 179, 225, 234, 240, 253, 255, 256], "rapid": [0, 38, 59], "cudf": [0, 1, 5, 29, 32, 33, 35, 36, 37, 38, 42, 43, 47, 49, 50, 55, 59, 65, 66, 68, 102, 208, 209, 217, 218, 219, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251, 259, 260, 261], "reli": [0, 1], "datafram": [0, 1, 3, 5, 6, 7, 29, 32, 35, 37, 38, 42, 43, 47, 50, 55, 57, 62, 68, 69, 102, 119, 158, 207, 208, 209, 210, 211, 215, 216, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 251, 252, 253], "dask": [0, 5, 38, 47, 50, 58, 66, 104, 163, 224, 227, 230, 236, 237, 241, 242, 244, 246, 251, 253], "within": [0, 5, 24, 29, 35, 39, 57, 110, 155, 173, 176, 224, 225, 227, 251], "dataload": [0, 5, 24, 26, 29, 33, 36, 41, 44, 45, 47, 53, 61, 104, 115, 119, 140, 141, 189, 217, 218, 219, 259, 260, 261], "report": [0, 24, 51, 57], "bug": [0, 65, 66], "get": [0, 5, 7, 9, 24, 25, 27, 29, 32, 33, 35, 36, 43, 47, 49, 52, 53, 55, 57, 58, 59, 60, 61, 65, 66, 68, 69, 83, 133, 138, 148, 163, 190, 227, 255], "help": [0, 33, 35, 36, 38, 45, 53, 55, 195, 213, 225], "pleas": [0, 24, 27, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 48, 49, 52, 54, 55, 57, 59, 65, 66, 110, 168, 171, 174, 175, 177, 178, 179, 233], "issu": [0, 32, 47, 50, 59], "class": [1, 2, 3, 4, 5, 6, 7, 8, 14, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 33, 38, 47, 48, 50, 51, 55, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 119, 122, 123, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 190, 191, 193, 199, 200, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "object": [1, 2, 3, 4, 5, 6, 7, 17, 18, 19, 23, 24, 25, 26, 29, 39, 50, 55, 68, 69, 83, 92, 94, 97, 100, 103, 111, 112, 113, 115, 119, 121, 131, 132, 133, 181, 185, 189, 190, 207, 210, 212, 224, 230, 233, 237, 241, 242, 244, 246, 251, 253], "__init__": [1, 2, 3, 4, 5, 6, 7, 8, 9, 32, 33, 42, 43, 57, 61, 62, 67, 68, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 99, 100, 101, 102, 104, 105, 107, 108, 109, 111, 114, 115, 116, 117, 118, 119, 122, 123, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 190, 191, 207, 208, 209, 210, 211, 212, 213, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "method": [1, 2, 3, 4, 5, 6, 7, 23, 24, 25, 26, 27, 28, 29, 33, 35, 36, 50, 51, 52, 53, 55, 57, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 99, 100, 101, 102, 104, 105, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 122, 123, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 190, 191, 207, 208, 209, 210, 211, 212, 213, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "attribut": [1, 2, 3, 4, 5, 6, 7, 8, 18, 24, 29, 67, 68, 69, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 99, 100, 101, 102, 104, 105, 107, 108, 109, 111, 114, 115, 116, 117, 118, 119, 122, 123, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 171, 172, 173, 174, 175, 176, 177, 178, 179, 190, 191, 207, 208, 209, 210, 211, 212, 213, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "compute_selector": [1, 9, 224, 226, 228, 236, 237, 251], "input_schema": [1, 3, 9, 22, 24, 33, 35, 36, 49, 55, 57, 62, 63, 65, 66, 69, 162, 207, 208, 209, 210, 211, 212, 213, 214, 224, 226, 228, 233, 236, 237, 244, 251, 253], "selector": [1, 2, 4, 7, 9, 17, 19, 24, 113, 208, 209, 210, 211, 212, 224, 226, 228, 236, 237, 244, 251], "columnselector": [1, 4, 7, 9, 208, 209, 210, 211, 212, 213, 214, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 251, 252], "parents_selector": [1, 224, 226, 228, 236, 237, 251], "option": [1, 2, 3, 4, 5, 6, 7, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 47, 48, 53, 58, 59, 67, 69, 70, 73, 75, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 190, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 224, 226, 233, 236, 237, 239, 245, 251, 253, 255, 256], "none": [1, 2, 4, 5, 6, 7, 17, 19, 23, 24, 25, 26, 27, 28, 29, 35, 36, 41, 42, 43, 49, 50, 55, 57, 58, 59, 61, 62, 63, 67, 69, 70, 71, 73, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 177, 178, 179, 181, 185, 190, 199, 200, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 220, 221, 222, 224, 225, 226, 229, 233, 236, 237, 239, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253], "dependencies_selector": [1, 224, 226, 228, 236, 237, 251], "hook": [1, 24], "sub": [1, 47, 49, 53, 65, 66, 119, 168], "overrid": [1, 4, 5, 23, 24, 26, 32, 35, 36, 50, 55, 73, 96, 119], "column": [1, 2, 3, 4, 5, 6, 7, 17, 18, 19, 24, 26, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 53, 55, 57, 58, 59, 62, 63, 65, 66, 69, 71, 74, 76, 86, 88, 90, 101, 102, 103, 113, 114, 119, 132, 134, 136, 140, 141, 148, 149, 150, 151, 152, 153, 154, 157, 162, 163, 201, 207, 208, 209, 210, 211, 213, 214, 216, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251, 252, 253, 255], "select": [1, 2, 4, 7, 9, 24, 25, 29, 32, 35, 47, 53, 59, 102, 105, 124, 125, 126, 134, 145, 149, 150, 153, 165, 166, 167, 170, 228, 236], "logic": [1, 5, 18, 32, 55, 210, 251], "paramet": [1, 2, 3, 4, 5, 6, 7, 23, 24, 25, 26, 27, 28, 29, 35, 36, 39, 40, 42, 50, 52, 53, 57, 59, 60, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 109, 111, 113, 114, 115, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 157, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 189, 190, 193, 202, 203, 207, 208, 209, 210, 211, 212, 214, 215, 216, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251, 253], "appli": [1, 2, 4, 7, 9, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 36, 38, 42, 55, 59, 62, 65, 66, 71, 76, 78, 87, 90, 93, 98, 100, 101, 102, 103, 112, 113, 115, 117, 118, 119, 120, 125, 126, 127, 129, 131, 132, 134, 138, 140, 148, 156, 157, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 202, 203, 208, 209, 211, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251, 253, 255], "thi": [1, 2, 3, 4, 5, 6, 7, 18, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 78, 82, 83, 85, 90, 93, 94, 96, 97, 98, 101, 102, 103, 104, 106, 110, 111, 112, 113, 118, 119, 121, 129, 132, 134, 136, 140, 141, 145, 148, 149, 150, 151, 152, 153, 154, 155, 157, 163, 168, 171, 173, 174, 175, 176, 177, 178, 179, 190, 193, 207, 208, 209, 210, 211, 212, 213, 214, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 251, 253, 255, 256, 259, 260, 261], "upstream": [1, 101], "parent": [1, 4, 18, 24, 25, 119, 210, 228], "feed": [1, 33, 36, 38, 40, 41, 42, 55, 92], "return": [1, 2, 3, 4, 5, 6, 7, 23, 24, 25, 26, 27, 29, 32, 33, 35, 36, 38, 40, 41, 42, 43, 50, 55, 57, 65, 66, 69, 70, 71, 72, 74, 76, 78, 80, 81, 84, 85, 87, 89, 90, 92, 93, 94, 96, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 119, 121, 124, 125, 126, 127, 129, 131, 132, 133, 134, 136, 138, 143, 144, 145, 148, 149, 150, 155, 157, 158, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 177, 178, 179, 180, 184, 187, 189, 190, 193, 201, 202, 203, 207, 208, 209, 210, 212, 214, 215, 216, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 251, 253], "revis": 1, "type": [1, 2, 3, 4, 5, 6, 7, 17, 18, 19, 21, 23, 25, 26, 27, 29, 32, 38, 42, 43, 47, 49, 53, 55, 57, 59, 69, 70, 71, 74, 76, 78, 80, 81, 84, 89, 90, 92, 93, 94, 96, 97, 100, 102, 103, 104, 106, 107, 109, 111, 112, 113, 114, 115, 117, 119, 121, 124, 125, 126, 127, 128, 129, 132, 133, 134, 136, 138, 143, 144, 145, 148, 155, 157, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 190, 193, 202, 203, 207, 208, 209, 210, 212, 214, 215, 216, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251, 253, 255], "compute_input_schema": [1, 9, 208, 209, 210, 211, 212], "root_schema": [1, 3, 4, 208, 209, 210, 211, 212], "parents_schema": [1, 208, 209, 210, 211, 212], "deps_schema": [1, 208, 209, 210, 211, 212], "given": [1, 3, 18, 23, 24, 25, 27, 28, 29, 32, 33, 35, 36, 37, 40, 41, 43, 49, 50, 51, 53, 65, 66, 78, 104, 111, 117, 119, 132, 136, 148, 150, 190, 210, 211, 226, 234, 237, 239, 244, 255], "come": [1, 18, 35, 119], "befor": [1, 5, 24, 26, 27, 28, 31, 32, 33, 36, 43, 50, 53, 55, 57, 62, 67, 68, 81, 84, 90, 92, 93, 100, 103, 104, 112, 113, 118, 119, 121, 127, 129, 132, 134, 138, 143, 148, 151, 152, 153, 154, 157, 163, 169, 190, 227, 233, 236, 255, 258], "col_selector": [1, 208, 209, 210, 211, 212, 213, 214, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 251, 252], "compute_output_schema": [1, 9, 162, 208, 209, 210, 211, 212, 213, 214, 233, 236, 244], "prev_output_schema": [1, 208, 209, 210, 211, 212, 213, 214, 233, 236, 244], "produc": [1, 2, 5, 24, 26, 35, 47, 53, 57, 148, 208, 244, 253], "validate_schema": [1, 4, 9, 210], "output_schema": [1, 3, 9, 22, 24, 29, 33, 35, 36, 38, 55, 57, 63, 65, 66, 69, 104, 119, 163, 207, 210, 253], "strict_dtyp": [1, 4, 210], "bool": [1, 3, 4, 5, 6, 7, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 59, 67, 68, 69, 72, 75, 77, 80, 83, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 114, 115, 118, 119, 120, 129, 133, 134, 135, 138, 140, 141, 144, 146, 148, 155, 157, 162, 165, 166, 169, 202, 203, 224, 226, 236, 237, 239, 251], "fals": [1, 3, 4, 5, 7, 17, 18, 19, 23, 24, 25, 26, 27, 29, 32, 35, 36, 37, 38, 39, 40, 41, 49, 50, 55, 57, 60, 61, 67, 68, 69, 71, 72, 75, 76, 79, 80, 83, 85, 86, 87, 92, 95, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 114, 115, 118, 119, 120, 122, 127, 128, 130, 133, 134, 135, 136, 137, 140, 141, 142, 144, 146, 148, 151, 152, 153, 154, 155, 156, 157, 162, 165, 166, 168, 169, 182, 186, 190, 202, 203, 210, 224, 226, 230, 231, 236, 237, 239, 246, 251], "valid": [1, 5, 18, 23, 24, 29, 32, 35, 38, 39, 40, 41, 42, 43, 49, 53, 55, 57, 58, 59, 60, 61, 190, 251, 253], "should": [1, 4, 5, 7, 18, 24, 26, 27, 29, 32, 33, 34, 36, 38, 39, 43, 45, 50, 51, 52, 53, 54, 58, 62, 69, 77, 78, 83, 84, 86, 88, 92, 93, 94, 101, 102, 103, 104, 105, 119, 129, 131, 134, 136, 148, 150, 157, 168, 173, 176, 190, 224, 234, 236, 237, 251, 253, 255], "rais": [1, 4, 6, 7, 23, 24, 25, 50, 58, 78, 93, 94, 101, 104, 132, 134, 145, 155, 165, 171, 174, 175, 177, 178, 179, 190, 210, 253], "except": [1, 24, 28, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 51, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 83, 101, 119, 153, 171, 174, 175, 177, 178, 179], "thei": [1, 24, 25, 29, 35, 37, 38, 46, 48, 50, 51, 52, 53, 58, 141, 168, 208, 225, 242, 255], "boolean": [1, 18, 24, 26, 29, 36, 85, 108, 109, 110, 230, 231], "strict": [1, 100, 134, 146], "check": [1, 4, 18, 24, 25, 28, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 93, 100, 149, 150, 152, 190, 228, 229], "dtype": [1, 3, 4, 5, 6, 9, 26, 27, 29, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 49, 55, 58, 59, 61, 66, 101, 102, 105, 199, 200, 215, 224, 242, 244, 251], "match": [1, 4, 5, 7, 29, 53, 57, 59, 61, 62, 69, 82, 95, 102, 105, 132, 134], "true": [1, 4, 5, 7, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 36, 38, 39, 40, 42, 43, 47, 49, 53, 55, 57, 58, 59, 60, 61, 62, 65, 67, 72, 84, 85, 87, 92, 93, 94, 97, 98, 101, 102, 103, 104, 109, 110, 111, 112, 113, 114, 116, 119, 120, 129, 134, 136, 138, 148, 155, 157, 160, 168, 169, 170, 173, 176, 181, 190, 224, 226, 230, 231, 233, 237, 239, 251], "default": [1, 3, 4, 5, 6, 7, 17, 19, 23, 24, 25, 26, 27, 28, 29, 32, 35, 36, 50, 52, 53, 57, 58, 67, 69, 70, 73, 78, 80, 81, 83, 84, 85, 86, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 106, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 132, 133, 135, 136, 138, 139, 140, 141, 143, 144, 148, 150, 155, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 190, 193, 202, 203, 207, 210, 211, 212, 214, 215, 224, 225, 227, 229, 230, 231, 236, 237, 239, 241, 242, 251], "panda": [1, 5, 7, 33, 36, 37, 38, 42, 43, 49, 55, 57, 65, 66, 102, 208, 209, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251], "work": [1, 24, 29, 32, 35, 36, 38, 46, 52, 55, 57, 208, 209, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251], "dictarrai": [1, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251], "column_map": [1, 3, 4, 9, 224, 226, 227, 230, 231, 233, 235, 236, 237, 245, 251], "comput": [1, 5, 9, 22, 23, 24, 26, 27, 29, 32, 33, 35, 36, 38, 41, 50, 51, 52, 53, 55, 57, 59, 61, 65, 66, 78, 80, 81, 84, 85, 86, 87, 92, 100, 101, 102, 104, 106, 107, 111, 114, 117, 124, 138, 143, 144, 148, 155, 163, 168, 169, 171, 172, 174, 175, 177, 178, 179, 210, 224, 226, 227, 230, 237, 241, 242, 244, 246, 251, 253, 255], "output": [1, 3, 4, 5, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 52, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 69, 77, 78, 80, 83, 84, 85, 87, 90, 92, 95, 96, 97, 98, 100, 101, 102, 104, 106, 107, 109, 110, 112, 113, 114, 115, 117, 119, 120, 121, 125, 126, 132, 133, 134, 138, 144, 146, 147, 148, 149, 150, 152, 155, 157, 160, 163, 165, 166, 167, 168, 170, 173, 176, 208, 209, 210, 211, 212, 214, 216, 228, 233, 234, 235, 241, 242, 245, 251, 253, 255], "list": [1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 19, 23, 24, 25, 26, 27, 29, 33, 35, 36, 37, 38, 39, 42, 49, 50, 52, 53, 55, 59, 69, 71, 74, 75, 76, 81, 83, 84, 88, 90, 92, 93, 94, 96, 97, 102, 104, 108, 110, 112, 114, 115, 116, 119, 120, 121, 125, 126, 127, 129, 132, 133, 134, 135, 138, 140, 141, 143, 146, 148, 151, 152, 153, 154, 155, 157, 164, 165, 166, 167, 168, 169, 170, 180, 190, 205, 207, 214, 215, 216, 224, 227, 233, 236, 237, 239, 251, 253, 255], "name": [1, 2, 3, 4, 5, 6, 7, 9, 17, 18, 19, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 35, 36, 38, 40, 41, 42, 43, 47, 49, 51, 52, 53, 55, 57, 58, 60, 61, 62, 65, 66, 74, 77, 78, 79, 80, 81, 83, 84, 86, 88, 89, 90, 92, 99, 100, 101, 102, 103, 104, 108, 109, 111, 114, 115, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 146, 148, 149, 150, 155, 157, 163, 171, 173, 174, 175, 176, 177, 178, 179, 181, 184, 187, 190, 192, 193, 196, 199, 200, 203, 210, 214, 216, 224, 233, 234, 235, 236, 237, 245, 251, 253], "dict": [1, 5, 6, 17, 18, 19, 24, 25, 26, 27, 28, 29, 32, 35, 36, 40, 57, 62, 69, 70, 78, 80, 82, 85, 90, 92, 101, 102, 103, 104, 105, 108, 111, 112, 113, 114, 115, 116, 117, 119, 124, 125, 126, 132, 134, 135, 136, 138, 139, 140, 141, 144, 146, 148, 151, 152, 153, 154, 156, 157, 159, 161, 162, 165, 166, 184, 187, 189, 190, 197, 198, 203, 212, 214, 223, 224, 233, 234, 235, 237, 251], "str": [1, 2, 3, 4, 5, 6, 7, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 37, 42, 43, 49, 55, 57, 58, 59, 62, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 93, 98, 100, 101, 102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 165, 166, 167, 168, 169, 184, 187, 189, 190, 197, 198, 203, 205, 207, 208, 209, 210, 214, 215, 216, 224, 227, 233, 234, 235, 236, 237, 241, 242, 245, 251, 253], "load_artifact": [1, 9, 209], "artifact_path": [1, 209], "pathlik": [1, 24, 104, 253], "artifact": [1, 33, 47, 48, 63], "disk": [1, 5, 32, 35, 36, 37, 38, 41, 47, 58, 59, 61, 62, 63, 65, 66, 189, 207, 224, 236, 251, 253], "requir": [1, 5, 17, 18, 24, 26, 27, 29, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 75, 95, 98, 101, 111, 114, 119, 136, 163, 165, 217, 218, 219, 224, 226, 227, 228, 237, 251, 253, 255, 259, 260, 261], "path": [1, 5, 17, 18, 24, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 104, 189, 204, 207, 212, 227, 236, 246, 253], "where": [1, 7, 23, 24, 26, 29, 32, 33, 35, 47, 50, 51, 52, 53, 57, 59, 62, 78, 85, 86, 92, 93, 103, 104, 114, 119, 124, 125, 126, 135, 139, 146, 157, 168, 174, 175, 201, 224, 225, 236, 237, 251, 253, 255], "save_artifact": [1, 9, 209], "save": [1, 22, 24, 29, 33, 34, 35, 36, 37, 38, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 57, 59, 62, 104, 207, 246, 253], "reload": 1, "state": [1, 24, 25, 27, 29, 37, 40, 49, 50, 55, 65, 66, 67, 104, 224], "compute_column_schema": [1, 9], "col_nam": [1, 7, 40], "properti": [1, 2, 3, 4, 5, 6, 7, 9, 17, 18, 19, 21, 23, 24, 25, 26, 29, 35, 38, 40, 50, 55, 68, 69, 75, 77, 90, 92, 104, 111, 115, 116, 119, 127, 129, 134, 135, 138, 147, 155, 157, 163, 190, 199, 200, 207, 210, 211, 212, 213, 214, 220, 221, 223, 224, 226, 227, 233, 234, 235, 237, 239, 240, 241, 242, 244, 246, 251, 253], "dynamic_dtyp": [1, 9], "is_subgraph": [1, 9], "output_column_nam": [1, 9], "union": [1, 2, 4, 6, 7, 17, 19, 23, 24, 25, 26, 27, 28, 29, 75, 80, 81, 83, 84, 85, 86, 88, 90, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 112, 113, 114, 115, 117, 118, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 170, 189, 205, 232, 234, 235, 253], "let": [1, 2, 4, 32, 33, 35, 36, 38, 40, 41, 42, 43, 52, 55, 59, 61, 62, 65, 66, 246, 253], "consum": [1, 33, 36, 55, 253], "aren": 1, "t": [1, 4, 5, 7, 23, 24, 27, 29, 35, 36, 38, 39, 42, 43, 47, 50, 51, 57, 58, 59, 61, 62, 75, 81, 84, 92, 115, 125, 126, 127, 166, 167, 169, 170, 224, 225, 239, 253], "part": [1, 24, 35, 37, 38, 48, 49, 53, 55, 68, 94, 104, 106, 114, 115, 145, 168, 246], "main": [1, 5, 38, 47, 60, 104, 236], "extra": [1, 29, 113, 115, 119, 134, 224, 231, 237, 251], "output_dtyp": [1, 3, 9, 39, 223, 224, 226, 227, 234, 235, 240, 241, 242, 251, 253], "output_tag": [1, 9, 220, 223, 224, 226, 227, 234, 239, 240, 241, 242, 251], "output_properti": [1, 9, 220], "label": [1, 4, 5, 9, 23, 24, 26, 27, 29, 38, 39, 42, 55, 57, 58, 59, 60, 62, 119, 127, 128, 138, 150, 160, 184, 187, 207, 214, 224, 251, 253], "create_nod": [1, 9], "support": [1, 5, 9, 24, 25, 27, 29, 31, 33, 38, 39, 40, 47, 50, 54, 55, 57, 58, 60, 61, 62, 63, 75, 82, 101, 102, 103, 118, 119, 136, 145, 163, 173, 176, 190, 208, 217, 218, 219, 224, 233, 236, 237, 241, 242], "kind": [1, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "represent": [1, 18, 24, 29, 50, 53, 55, 59, 68, 69, 85, 90, 94, 97, 100, 102, 106, 112, 140, 141, 150, 151, 152, 153, 154, 160, 168, 170, 177, 179, 210, 255], "supported_format": [1, 9, 212, 213, 214, 241, 242], "dataformat": [1, 212, 213, 214], "subgroup": 2, "tag": [2, 4, 6, 7, 9, 17, 18, 21, 24, 26, 32, 34, 35, 36, 38, 40, 41, 47, 49, 50, 53, 54, 55, 57, 59, 61, 63, 65, 66, 85, 86, 88, 92, 93, 102, 104, 108, 112, 113, 120, 124, 125, 126, 128, 129, 132, 134, 147, 149, 150, 151, 152, 153, 154, 155, 157, 162, 163, 165, 166, 167, 170, 199, 200, 205, 220, 222, 247, 248, 249, 250], "describ": [2, 7, 18, 24, 33, 48, 50, 51, 53, 57, 59, 134, 174, 175, 211, 237], "group": [2, 4, 5, 17, 18, 19, 23, 24, 29, 36, 50, 51, 195, 224, 237, 251, 255], "shift": [2, 4, 42, 152, 227], "tupl": [2, 6, 17, 19, 24, 26, 27, 29, 40, 71, 76, 86, 90, 92, 104, 112, 114, 117, 129, 131, 138, 140, 151, 152, 153, 154, 155, 162, 180], "string": [2, 5, 18, 24, 25, 26, 36, 37, 38, 50, 58, 90, 101, 102, 103, 109, 110, 119, 129, 163, 173, 176, 195, 207, 211, 212, 214, 224, 233, 235, 237, 245, 251], "indic": [2, 5, 7, 18, 24, 26, 29, 55, 58, 59, 67, 80, 85, 88, 108, 109, 110, 111, 114, 117, 118, 144, 163, 171, 174, 175, 177, 178, 179, 224, 227, 230, 231], "most": [2, 32, 36, 38, 44, 47, 50, 52, 53, 54, 59, 119, 224, 233, 255], "also": [2, 5, 18, 24, 29, 32, 35, 38, 47, 49, 50, 51, 52, 53, 55, 57, 78, 85, 90, 97, 101, 102, 103, 106, 112, 113, 114, 129, 132, 134, 148, 157, 163, 173, 176, 190, 233, 236, 246], "cross": [2, 41, 53, 93, 94, 109, 110, 168, 235, 251], "altern": [2, 5, 29, 59, 92, 96], "syntax": 2, "togeth": [2, 32, 50, 53, 257], "instead": [2, 24, 32, 34, 42, 43, 51, 53, 55, 57, 66, 69, 85, 109, 110, 118, 129, 136, 150, 155, 157, 163, 227, 234, 240, 251], "nest": [2, 5, 18, 29], "insid": [2, 18, 47, 52, 55, 57, 62, 112], "least": [2, 24, 27, 29, 33, 35, 36, 41, 50, 57, 65, 66, 134, 150, 228], "one": [2, 18, 24, 26, 29, 31, 34, 35, 36, 38, 40, 41, 45, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 61, 62, 63, 65, 66, 68, 69, 74, 78, 83, 86, 95, 97, 106, 110, 112, 113, 127, 129, 132, 134, 149, 150, 153, 154, 160, 168, 210, 224, 227, 233, 245, 255], "consid": [2, 18, 50, 101, 106], "grouped_nam": [2, 9], "resolv": [2, 9, 60], "occur": [2, 18, 32, 53, 59, 85, 190], "doe": [2, 5, 24, 32, 35, 49, 51, 55, 93, 104, 111, 127, 132, 136, 143, 217, 218, 219, 224, 233, 259, 260, 261], "matter": [2, 38, 110, 129], "filter_column": [2, 9], "other_selector": 2, "narrow": [2, 32], "content": [2, 21, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 157, 255, 256], "would": [2, 18, 32, 35, 36, 50, 53, 55, 57, 65, 66, 85, 101, 109, 110, 129, 168, 234, 255], "anoth": [2, 35, 36, 53, 55, 59, 63, 78, 86, 92, 106, 129, 227, 255], "filter": [2, 5, 24, 26, 32, 35, 36, 45, 47, 53, 88, 93, 102, 112, 120, 155, 157, 168, 201, 210, 229], "output_nod": [3, 253], "repres": [3, 18, 23, 24, 25, 26, 27, 29, 32, 33, 35, 38, 40, 48, 50, 53, 55, 59, 70, 73, 82, 102, 104, 119, 140, 141, 155, 168, 207, 208, 209, 210, 214, 224], "compos": [3, 55, 65, 66, 129, 155], "subgraph": [3, 5, 9, 32], "input_dtyp": [3, 9, 253], "construct_schema": [3, 9], "preserve_dtyp": [3, 4], "determin": [3, 5, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 171, 174, 175, 177, 178, 179], "whether": [3, 5, 6, 7, 24, 25, 26, 29, 50, 67, 80, 83, 92, 94, 98, 101, 102, 104, 108, 112, 114, 118, 119, 120, 140, 141, 144, 148, 155, 169, 224, 226, 230, 231, 237, 239, 251], "keep": [3, 5, 24, 26, 33, 47, 50, 51, 53, 59, 88], "mai": [3, 5, 18, 23, 24, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 101, 102, 118, 168, 190, 224, 233, 237, 239, 251], "alreadi": [3, 5, 24, 32, 33, 36, 38, 47, 48, 50, 52, 53, 55, 57, 58, 59, 66, 227, 233, 253], "present": [3, 7, 18, 35, 51, 85, 86], "after": [3, 5, 7, 24, 25, 26, 32, 33, 34, 35, 36, 39, 40, 41, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 65, 66, 71, 76, 78, 90, 100, 103, 104, 112, 113, 117, 127, 132, 134, 148, 149, 150, 157, 163, 190, 224, 234, 235, 245, 246], "been": [3, 32, 35, 36, 38, 41, 42, 43, 50, 53, 55, 57, 71, 76, 253], "fill": [3, 50, 59, 230, 231], "leaf_nod": [3, 9], "remove_input": [3, 4, 9, 55, 57, 63, 65, 66, 253], "to_remov": [3, 17, 19, 24], "remov": [3, 4, 7, 24, 29, 32, 33, 34, 35, 38, 42, 43, 47, 49, 50, 55, 57, 58, 62, 63, 71, 76, 253], "leaf": [3, 18], "trickl": 3, "down": [3, 5, 7, 32, 38], "look": [3, 5, 32, 33, 34, 35, 36, 37, 38, 40, 41, 45, 47, 54, 55, 57, 59, 62, 78, 88, 148, 226, 227, 255], "when": [3, 4, 5, 18, 23, 24, 25, 26, 27, 29, 32, 33, 34, 35, 36, 38, 39, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 65, 66, 67, 69, 72, 73, 83, 85, 90, 92, 95, 101, 102, 104, 111, 112, 114, 118, 119, 132, 134, 136, 145, 148, 155, 157, 163, 165, 166, 169, 170, 171, 174, 175, 177, 178, 179, 190, 208, 213, 226, 227, 230, 231, 236, 239, 246, 251, 255], "must": [3, 5, 6, 18, 24, 25, 26, 31, 35, 36, 41, 48, 53, 55, 57, 65, 66, 78, 119, 132, 134, 224, 227, 236, 251], "propag": [3, 82], "deriv": [3, 5, 24], "array_lik": 3, "same": [3, 4, 5, 18, 24, 26, 27, 29, 32, 33, 35, 36, 38, 47, 48, 49, 50, 52, 53, 55, 58, 59, 62, 63, 65, 66, 69, 78, 85, 86, 98, 105, 109, 110, 111, 129, 140, 148, 150, 168, 224, 226, 236, 239, 251, 253], "classmethod": [3, 4, 5, 17, 19, 23, 24, 25, 26, 28, 29, 80, 82, 83, 87, 90, 92, 100, 102, 104, 114, 115, 123, 127, 128, 129, 131, 134, 135, 138, 144, 147, 149, 150, 154, 155, 157, 158, 163, 164, 190, 191, 207, 212, 253], "get_nodes_by_op_typ": [3, 9], "op_typ": 3, "clear_stat": [3, 9, 253], "calcul": [3, 5, 24, 25, 27, 29, 35, 38, 40, 59, 78, 85, 90, 224, 226, 227, 230, 237, 240, 241, 242, 244, 246, 251, 252, 253, 255], "statist": [3, 18, 32, 38, 47, 50, 59, 119, 169, 170, 224, 230, 237, 241, 242, 244, 246, 251, 253], "statoper": [3, 224, 230, 237, 241, 242, 244, 251, 252, 253], "clear": [3, 38, 39, 62, 224, 230, 237, 241, 242, 244, 246, 251, 252, 253], "i": [4, 5, 6, 7, 18, 23, 24, 25, 26, 27, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 78, 80, 81, 83, 85, 86, 90, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 126, 129, 132, 133, 134, 136, 141, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 157, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 190, 193, 207, 210, 217, 218, 219, 224, 225, 229, 231, 233, 234, 236, 237, 239, 241, 242, 246, 251, 253, 255, 256, 257, 259, 260, 261], "want": [4, 7, 32, 36, 37, 38, 39, 45, 47, 50, 51, 52, 53, 55, 57, 59, 62, 63, 65, 66, 97, 106, 110, 132, 134, 150, 157, 225, 246], "": [4, 5, 18, 23, 24, 25, 26, 29, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 45, 47, 48, 49, 55, 57, 58, 59, 60, 61, 62, 65, 66, 68, 90, 101, 102, 103, 109, 110, 111, 112, 113, 119, 129, 132, 134, 136, 145, 148, 151, 152, 153, 154, 157, 169, 170, 171, 210, 211, 224, 228, 236, 237, 255], "them": [4, 24, 26, 29, 32, 33, 35, 36, 38, 40, 41, 42, 47, 48, 49, 50, 53, 55, 57, 59, 61, 62, 63, 67, 68, 91, 112, 114, 119, 140, 141, 255, 256], "add_depend": [4, 9], "dep": 4, "baseoper": [4, 9, 29, 220, 223, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 239, 240, 243, 245, 246], "ad": [4, 24, 25, 26, 38, 50, 53, 54, 56, 57, 62, 70, 92, 97, 224, 241, 256], "add_par": [4, 9], "add_child": [4, 9], "child": [4, 18, 24, 25], "remove_child": [4, 9], "compute_schema": [4, 9], "we": [4, 5, 18, 23, 24, 27, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 83, 92, 94, 96, 97, 101, 110, 119, 121, 133, 134, 136, 145, 150, 168, 174, 175, 214, 226, 236, 246, 251, 253, 255, 256], "don": [4, 7, 24, 29, 39, 47, 50, 51, 57, 224, 225], "current": [4, 5, 18, 24, 25, 29, 32, 37, 38, 46, 50, 53, 54, 55, 57, 62, 63, 67, 70, 101, 102, 103, 111, 118, 119, 124, 125, 126, 163, 179, 228, 255], "If": [4, 5, 6, 7, 18, 23, 24, 25, 26, 27, 29, 32, 35, 36, 47, 49, 50, 52, 53, 55, 57, 58, 60, 61, 62, 63, 65, 66, 69, 73, 78, 80, 81, 82, 85, 86, 88, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 119, 126, 129, 132, 134, 144, 145, 155, 163, 165, 166, 167, 168, 170, 190, 202, 203, 224, 226, 233, 234, 236, 237, 239, 245, 251, 253, 255], "error": [4, 24, 32, 33, 35, 36, 38, 40, 47, 49, 50, 55, 57, 68, 85, 104, 134, 144, 171, 174, 175, 177, 178, 179, 190], "valueerror": [4, 7, 23, 24, 25, 58, 78, 93, 94, 95, 132, 145, 165, 210], "expect": [4, 18, 24, 25, 26, 33, 38, 50, 53, 55, 65, 66, 85, 86, 89, 92, 114, 136, 193, 208, 209, 224], "doesn": [4, 27, 35, 36, 50, 57, 61, 62], "input_col": [4, 62, 63, 210, 253], "were": [4, 29, 33, 35, 47, 49, 50, 51, 53, 230, 231, 258], "export": [4, 9, 34, 35, 36, 41, 47, 48, 49, 57, 63, 65, 66, 155, 207], "backend": [4, 5, 33, 42, 43, 62, 63, 208, 255], "parents_with_depend": [4, 9], "grouped_parents_with_depend": [4, 9], "input_column": [4, 9], "output_column": [4, 9], "dependency_column": [4, 9], "construct_from": [4, 9], "nodabl": 4, "convert": [4, 5, 7, 18, 24, 25, 28, 44, 50, 55, 57, 59, 60, 62, 63, 64, 71, 76, 77, 83, 86, 102, 133, 140, 141, 151, 152, 153, 154, 159, 161, 168, 215, 216, 224, 226, 227, 237, 251], "correspond": [4, 5, 23, 24, 35, 36, 38, 50, 55, 65, 66, 69, 78, 102, 104, 110, 112, 134, 148, 149, 150, 201, 224, 234, 235, 237, 251], "typeerror": [4, 6, 155], "suppli": [4, 7, 24, 27, 29, 33, 55, 210, 212, 251], "cannot": [4, 5, 18, 35, 55, 60, 72, 78, 101, 210, 224], "path_or_sourc": 5, "npartit": [5, 9, 36], "part_siz": [5, 32, 36, 38, 59], "part_mem_fract": [5, 36, 58, 61], "storage_opt": 5, "client": [5, 29, 32, 35, 36, 42, 43, 49, 55, 57, 58, 59, 62, 63, 65, 66, 253], "auto": [5, 23, 24, 32, 35, 38, 39, 40, 41, 42, 55, 65, 171, 174, 175, 177, 178, 179, 253], "base_dataset": 5, "kwarg": [5, 17, 19, 23, 24, 25, 26, 27, 28, 29, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 172, 173, 176, 182, 207, 209, 212, 224, 236], "univers": 5, "extern": [5, 32, 37, 38, 39, 40, 41, 43, 50, 59, 113, 236, 246], "wrapper": [5, 24, 26], "relat": [5, 24, 25, 33, 51, 84, 92, 163], "purpos": [5, 24, 38, 40, 48, 49, 65, 66], "awai": [5, 33, 38, 55], "raw": [5, 18, 29, 32, 33, 35, 38, 47, 48, 49, 50, 55, 62, 63, 92, 163], "format": [5, 32, 37, 38, 39, 50, 53, 57, 58, 59, 62, 71, 76, 104, 189, 224, 236, 237, 251], "allow": [5, 18, 23, 24, 25, 29, 34, 38, 41, 45, 46, 47, 50, 51, 52, 53, 54, 86, 101, 102, 105, 112, 118, 121, 129, 169, 190, 224, 233], "reliabl": [5, 38], "materi": [5, 33, 38], "dask_cudf": [5, 38, 47], "initi": [5, 22, 24, 26, 29, 32, 33, 35, 36, 38, 42, 47, 50, 53, 55, 57, 58, 59, 61, 66, 67, 69, 93, 101, 102, 103, 114, 120, 124, 125, 126, 129, 145, 148, 155, 157, 158, 163, 171, 174, 175, 177, 178, 179, 207, 224], "varieti": 5, "directori": [5, 24, 29, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 54, 55, 57, 58, 59, 60, 61, 62, 63, 66, 207, 224, 237, 251], "file": [5, 24, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 119, 181, 189, 224, 226, 236, 237, 246, 251], "argument": [5, 23, 24, 26, 29, 33, 35, 36, 38, 47, 49, 55, 57, 58, 59, 62, 63, 65, 66, 72, 90, 93, 101, 102, 112, 118, 134, 155, 164, 189, 190, 224, 232, 233], "specifi": [5, 18, 24, 26, 27, 29, 33, 34, 35, 36, 38, 48, 49, 50, 52, 55, 57, 58, 59, 60, 62, 63, 65, 66, 68, 73, 89, 90, 92, 97, 101, 102, 103, 105, 109, 112, 115, 119, 126, 127, 129, 143, 148, 163, 167, 168, 169, 170, 189, 224, 225, 228, 231, 233, 234, 236, 241], "parquet": [5, 24, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 53, 55, 57, 59, 60, 61, 62, 63, 119, 189, 224, 236, 237, 246, 251, 253], "csv": [5, 32, 35, 36, 37, 38, 47, 49, 50, 53, 55, 57, 119, 189, 226], "first": [5, 7, 9, 23, 24, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 40, 42, 43, 47, 49, 50, 51, 52, 53, 55, 58, 59, 60, 62, 63, 73, 74, 101, 104, 111, 134, 136, 153, 155, 157, 169, 170, 180, 224, 228, 233, 234, 235, 239, 251, 253], "suffix": [5, 78, 140, 141], "data_pq": 5, "file_0": 5, "file_1": 5, "sinc": [5, 18, 29, 42, 43, 48, 49, 57, 67, 102, 227], "fsspec": 5, "interfac": [5, 33, 52, 111], "underli": [5, 119], "local": [5, 23, 24, 29, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 45, 49, 52, 55, 57, 58, 59, 65, 66, 67, 233], "remot": 5, "read": [5, 32, 33, 35, 36, 38, 41, 49, 55, 57, 59, 60, 62, 63, 65, 66, 119, 226], "storag": [5, 58, 246], "gd": 5, "s3": [5, 57], "appropri": [5, 32, 33, 35, 36, 41, 49, 55, 57, 61, 71, 76, 227], "protocol": [5, 18, 57, 59], "prepend": 5, "special": [5, 24, 51, 101, 102, 148, 149, 150, 152, 157, 255], "pass": [5, 23, 24, 25, 26, 29, 35, 36, 41, 57, 92, 101, 105, 113, 119, 127, 129, 134, 155, 163, 190, 208, 210, 224, 227, 234, 237, 251, 253], "dictionari": [5, 24, 25, 28, 29, 38, 59, 69, 70, 71, 76, 77, 78, 87, 90, 92, 100, 102, 103, 104, 108, 112, 114, 117, 119, 123, 126, 134, 148, 201, 210, 214, 224, 234], "bucket": [5, 50, 57, 224, 234, 235], "anon": 5, "use_ssl": 5, "By": [5, 23, 24, 25, 26, 27, 29, 36, 38, 50, 53, 58, 98, 101, 104, 145, 163, 165, 166, 170, 224, 236], "both": [5, 18, 23, 24, 33, 36, 38, 50, 55, 85, 100, 125, 126, 134, 165, 166, 168, 208, 224, 234, 253, 255], "maximum": [5, 18, 24, 25, 26, 27, 29, 41, 53, 58, 68, 136, 168, 214, 224, 225, 244], "partit": [5, 17, 18, 29, 38, 47, 50, 67, 68, 119, 224, 227, 233, 236, 237, 251], "roughli": 5, "12": [5, 23, 24, 32, 35, 42, 55, 57, 58, 59, 61, 62, 217, 218, 219, 224, 259, 260, 261], "5": [5, 18, 23, 24, 29, 32, 33, 35, 36, 37, 38, 41, 42, 47, 49, 50, 51, 53, 55, 57, 59, 61, 62, 65, 66, 86, 164, 168, 217, 218, 219, 224, 251, 259, 260, 261], "percent": 5, "total": [5, 29, 35, 38, 40, 42, 43, 55, 58, 59, 61, 67, 119, 224], "singl": [5, 7, 18, 24, 25, 26, 27, 32, 35, 36, 38, 39, 40, 44, 45, 47, 48, 49, 52, 53, 59, 80, 90, 92, 100, 112, 119, 132, 134, 140, 141, 144, 145, 148, 157, 168, 245, 253, 255], "devic": [5, 24, 26, 27, 29, 32, 33, 35, 36, 38, 40, 41, 50, 53, 55, 57, 58, 59, 60, 61, 67, 69, 71, 73, 75, 76, 119, 224, 236, 237, 251], "fraction": [5, 53, 57, 73, 119, 189], "specif": [5, 18, 23, 24, 25, 27, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 83, 85, 109, 110, 111, 132, 133, 148, 237, 251, 255], "byte": [5, 17, 18, 19, 24], "10": [5, 24, 26, 32, 33, 39, 42, 47, 49, 50, 52, 53, 55, 57, 58, 59, 62, 65, 66, 79, 94, 96, 97, 113, 122, 125, 126, 130, 137, 142, 147, 163, 164, 165, 166, 167, 168, 169, 170, 202, 203, 209, 211, 217, 218, 219, 224, 235, 239, 259, 260, 261], "smaller": [5, 51, 58, 119], "bigfil": 5, "0": [5, 17, 18, 19, 20, 23, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 73, 75, 81, 83, 84, 85, 86, 92, 94, 98, 101, 102, 103, 105, 112, 114, 115, 118, 119, 121, 124, 125, 126, 127, 133, 136, 148, 150, 156, 165, 166, 167, 168, 169, 170, 172, 174, 195, 202, 203, 211, 217, 218, 219, 223, 224, 225, 231, 232, 234, 239, 241, 242, 251, 255, 259, 260, 261], "1": [5, 17, 18, 19, 23, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 73, 75, 76, 78, 81, 83, 84, 85, 86, 92, 93, 94, 95, 96, 97, 98, 101, 102, 105, 106, 107, 109, 110, 111, 114, 115, 117, 118, 119, 121, 125, 126, 127, 133, 135, 140, 150, 156, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 217, 218, 219, 224, 227, 234, 237, 239, 240, 241, 242, 251, 255, 258, 259, 260, 261], "1gb": 5, "note": [5, 18, 33, 35, 39, 40, 42, 43, 47, 48, 49, 57, 58, 65, 66, 92, 106, 110, 118, 119, 129, 150, 157, 168, 190, 217, 218, 219, 224, 234, 235, 236, 237, 240, 246, 259, 260, 261], "liter": 5, "time": [5, 8, 9, 18, 29, 32, 33, 35, 36, 38, 40, 42, 43, 47, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 68, 85, 118, 119, 224, 227], "preced": [5, 31, 32], "done": [5, 24, 26, 33, 49, 55, 60, 227], "row": [5, 6, 18, 29, 32, 35, 36, 38, 43, 47, 49, 51, 53, 62, 63, 67, 69, 119, 226, 227, 229, 232, 237, 239, 251, 255], "convers": [5, 32, 45, 55, 57], "therefor": [5, 32, 55, 62, 92, 236], "uniform": [5, 27, 52, 101, 102, 105, 136], "balanc": [5, 47, 51, 53, 168], "In": [5, 18, 24, 26, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 55, 57, 59, 60, 62, 63, 65, 66, 92, 111, 119, 150, 155, 168, 169, 170, 171, 234, 253, 255, 256], "addit": [5, 18, 24, 25, 32, 37, 38, 45, 50, 53, 63, 90, 115, 138, 189, 251, 255], "handl": [5, 18, 23, 24, 26, 38, 57, 118, 157, 240], "e": [5, 18, 23, 24, 26, 27, 29, 35, 36, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 83, 85, 86, 92, 110, 111, 112, 114, 120, 121, 132, 150, 158, 164, 168, 184, 187, 233, 253, 255], "g": [5, 18, 23, 24, 26, 27, 47, 50, 52, 53, 54, 57, 83, 86, 111, 112, 114, 121, 132, 150, 158, 164, 168, 184, 187, 233, 253, 255], "number": [5, 17, 18, 19, 23, 24, 25, 26, 27, 29, 35, 37, 38, 40, 47, 50, 51, 52, 53, 55, 58, 67, 68, 69, 83, 85, 89, 93, 94, 98, 109, 110, 112, 119, 120, 121, 133, 136, 163, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 202, 203, 209, 211, 224, 227, 234, 235, 237, 239, 251], "modifi": [5, 41, 65, 66], "That": [5, 18, 27, 33, 47, 50, 52, 53, 59, 86, 98, 168, 235], "pyarrow": [5, 236], "while": [5, 32, 33, 35, 36, 38, 41, 51, 52, 53, 55, 57, 61, 208, 224, 237, 251], "preserv": [5, 29, 36], "gdf": [5, 69], "ddf": [5, 224, 227, 230, 237, 241, 242, 244, 246, 251, 252], "read_parquet": [5, 33, 38, 42, 43, 49, 55, 57, 62, 63, 236], "ingest": 5, "straightforward": 5, "execut": [5, 33, 34, 35, 39, 45, 47, 48, 49, 52, 54, 55, 57, 59, 60, 63, 65, 66, 104, 181, 214, 224, 251], "mean": [5, 18, 23, 24, 26, 27, 38, 47, 50, 53, 55, 58, 62, 78, 101, 102, 103, 110, 112, 119, 144, 165, 166, 169, 225, 233, 234, 235, 237, 241, 251, 255], "some": [5, 24, 29, 33, 36, 47, 49, 50, 51, 52, 53, 55, 56, 57, 59, 61, 65, 66, 118, 145, 150, 168, 255], "pre": [5, 22, 23, 24, 25, 26, 27, 28, 35, 36, 53, 81, 84, 90, 92, 100, 102, 103, 104, 109, 112, 113, 115, 127, 128, 132, 134, 135, 138, 139, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 163, 168, 231, 255], "yet": [5, 42, 43], "still": [5, 59, 129, 224], "accomplish": 5, "sort": [5, 27, 32, 33, 35, 38, 40, 52, 55, 61, 62, 63, 74, 136, 164, 211, 227, 233, 255], "final": [5, 32, 33, 35, 49, 50, 52, 55, 57, 61, 62, 63, 86, 121, 224, 230, 237, 241, 242, 244, 246, 251, 255], "warn": [5, 23, 24, 32, 33, 35, 36, 38, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 65, 66, 233], "global": [5, 24, 38, 50, 58, 60, 251], "signific": 5, "to_ddf": [5, 9, 32, 55, 57, 224, 227], "sort_valu": [5, 35, 65, 227], "user_rank": 5, "ignore_index": 5, "tip": [5, 50], "dot": [5, 51, 92, 100, 106, 114, 124, 169, 255], "order": [5, 18, 24, 25, 32, 33, 35, 36, 38, 40, 45, 47, 48, 50, 53, 55, 57, 59, 65, 66, 85, 92, 93, 97, 106, 107, 129, 190, 211, 255], "best": [5, 46, 47, 202, 203], "possibl": [5, 23, 24, 25, 26, 47, 50, 51, 53, 90, 103, 112, 113, 129, 132, 134, 148, 157, 168, 189], "prefer": [5, 18, 47, 59], "around": [5, 32, 241], "128mb": 5, "twice": 5, "slow": [5, 27, 40], "notebook": [5, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "exampl": [5, 18, 24, 26, 27, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 73, 78, 86, 92, 94, 96, 97, 98, 101, 105, 109, 110, 112, 115, 120, 125, 126, 129, 131, 134, 140, 141, 166, 167, 168, 169, 170, 190, 223, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 245, 251, 253, 255, 256], "origin": [5, 24, 29, 32, 35, 36, 37, 40, 41, 50, 53, 55, 58, 114, 118, 129, 134, 236], "criteo": [5, 255], "pd": [5, 7, 33, 36, 42, 49], "structur": [5, 18, 29, 32, 33, 34, 55, 58, 168], "flat": [5, 18, 40, 71, 76], "datasetengin": 5, "avro": 5, "ignor": [5, 42, 43, 50, 53, 55, 65, 66, 90, 110, 111, 119, 136, 168, 169, 170, 239], "int": [5, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 40, 55, 57, 59, 61, 67, 68, 69, 70, 72, 73, 75, 78, 83, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 109, 110, 111, 114, 116, 117, 119, 120, 121, 124, 125, 126, 133, 134, 136, 147, 148, 163, 164, 165, 166, 169, 170, 180, 189, 197, 202, 203, 209, 211, 214, 223, 224, 227, 234, 235, 237, 239, 251], "desir": [5, 29, 50, 55, 58, 224, 237], "float": [5, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 50, 53, 57, 68, 73, 75, 81, 83, 84, 86, 92, 98, 101, 102, 103, 114, 115, 118, 119, 120, 121, 124, 125, 126, 127, 133, 135, 139, 150, 166, 167, 168, 169, 170, 172, 189, 202, 203, 211, 225, 231, 239, 244, 251], "125": [5, 60], "rel": 5, "capac": [5, 53, 121, 136, 168], "directli": [5, 24, 29, 32, 33, 35, 36, 41, 55, 57, 61, 98, 109, 110], "valu": [5, 6, 7, 8, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 36, 40, 41, 42, 49, 50, 52, 53, 55, 57, 58, 59, 62, 63, 65, 66, 71, 73, 76, 78, 85, 86, 101, 102, 103, 105, 106, 109, 110, 111, 114, 115, 116, 118, 119, 123, 124, 125, 126, 135, 136, 139, 148, 157, 165, 166, 168, 169, 170, 171, 174, 175, 177, 178, 179, 189, 190, 202, 206, 210, 211, 214, 215, 223, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 237, 239, 240, 241, 244, 251, 253], "host": [5, 34, 43, 45, 47, 52, 54, 56, 57, 59, 66, 224, 236, 237, 251, 253], "detect": [5, 24, 29, 57, 58, 229], "further": [5, 18, 36, 227], "intern": [5, 41, 97, 106, 107, 121, 145, 150, 168, 172, 177, 178, 179, 224], "unless": [5, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 101], "instal": [5, 31, 32, 33, 35, 36, 47, 49, 52, 55, 57, 62, 63, 65, 66], "futur": [5, 24, 29, 33, 35, 38, 42, 43, 50, 57, 58, 63, 224, 230, 237, 241, 242, 244, 246, 251], "NOT": [5, 233], "stream": [5, 24, 50, 53], "op": [5, 24, 26, 29, 32, 33, 35, 36, 38, 39, 41, 50, 55, 57, 59, 63, 65, 66, 115, 136, 157, 202, 203, 207, 253], "refer": [5, 18, 24, 27, 32, 33, 38, 50, 51, 52, 56, 59, 83, 84, 92, 93, 94, 96, 97, 106, 107, 111, 119, 121, 133, 150, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 189, 253], "instanc": [5, 18, 23, 24, 25, 26, 27, 32, 35, 36, 52, 55, 57, 71, 72, 76, 78, 87, 90, 94, 97, 100, 104, 112, 114, 129, 134, 155, 157, 164, 169, 171, 174, 175, 177, 178, 179, 208, 209, 225, 227, 228, 246], "user": [5, 8, 9, 18, 23, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 69, 86, 92, 100, 111, 114, 124, 125, 127, 129, 134, 143, 165, 166, 168, 173, 176, 213, 220, 224, 227, 245, 255], "behavior": [5, 119, 224], "word": [5, 84, 92], "notabl": 5, "aggregate_fil": 5, "latter": [5, 50], "shuffl": [5, 29, 35, 36, 37, 38, 53, 59, 67, 68, 69, 71, 75, 76, 119, 227, 233, 255], "seed": [5, 23, 24, 29, 32, 35, 36, 53, 60, 136, 251], "known": [5, 32, 55, 228], "becaus": [5, 24, 32, 35, 36, 38, 47, 51, 53, 55, 57, 157, 224], "actual": [5, 18, 27, 40, 48, 53, 136, 155], "random": [5, 24, 29, 33, 35, 37, 47, 50, 53, 59, 67, 105, 119, 136, 153, 208, 251], "noth": [5, 35, 236], "std": [5, 55, 62, 237, 241], "file_partition_map": [5, 9], "partition_len": [5, 9], "to_cpu": [5, 9, 24], "to_gpu": [5, 9], "shuffle_by_kei": [5, 9, 233], "hive_data": 5, "uniqu": [5, 18, 27, 33, 35, 38, 55, 57, 62, 65, 119, 136, 202, 224, 237, 251], "move": [5, 32, 33, 35, 36, 39, 41, 42, 55, 62, 118, 233], "back": [5, 32, 53, 55, 98, 102, 255], "hive": 5, "encod": [5, 18, 23, 24, 26, 29, 32, 37, 40, 42, 53, 60, 62, 85, 97, 101, 106, 109, 110, 124, 136, 147, 150, 160, 163, 167, 168, 169, 170, 181, 224, 228, 251], "inspect": 5, "otherwis": [5, 18, 24, 29, 35, 38, 55, 57, 61, 72, 93, 112, 119, 134, 155, 233, 239], "count": [5, 18, 35, 36, 42, 50, 52, 85, 92, 136, 224, 233, 237, 251], "repartit": [5, 9], "partition_s": 5, "isn": [5, 59, 239], "max": [5, 17, 18, 23, 24, 26, 35, 38, 47, 50, 52, 55, 110, 119, 168, 172, 174, 178, 211, 214, 225, 233, 252], "5mb": 5, "merg": [5, 9, 22, 24, 33, 35, 36, 112, 113, 134, 157, 236, 237], "left": [5, 38, 119, 226, 236, 255], "right": [5, 24, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 226], "two": [5, 18, 28, 34, 35, 38, 40, 41, 51, 53, 55, 62, 72, 74, 86, 100, 111, 113, 118, 125, 129, 134, 140, 141, 165, 166, 167, 168, 180, 226, 227, 255], "side": [5, 50, 255], "usag": [5, 24, 27, 33, 46, 73, 92, 94, 96, 97, 98, 109, 110, 112, 113, 120, 125, 126, 132, 155, 166, 167, 168, 169, 170, 171, 174, 175, 177, 178, 179, 190, 223, 224, 226, 229, 230, 231, 233, 234, 235, 236, 237, 240, 241, 242, 245, 251, 253], "ds_1": 5, "ds_2": 5, "ds_merg": 5, "foo": [5, 18, 190], "inner": [5, 226, 236], "to_it": [5, 9, 119], "use_file_metadata": 5, "epoch": [5, 23, 24, 29, 32, 35, 36, 40, 47, 52, 53, 57, 61, 67, 68, 69, 70, 94, 96, 97, 119, 125, 126, 166, 167, 168, 169, 170], "those": [5, 33, 46, 47, 50, 53, 55, 65, 66, 85, 135, 139, 168, 226, 233], "dataframeit": 5, "metadata": [5, 6, 17, 18, 19, 23, 24, 33, 37, 38, 40, 41, 47, 55, 57, 62, 65, 66, 92, 104, 111], "estim": [5, 24, 39, 50, 57, 60, 118], "intermedi": [5, 47, 50, 57], "ha": [5, 18, 23, 24, 32, 33, 35, 36, 37, 38, 40, 41, 47, 50, 51, 53, 55, 58, 65, 66, 71, 76, 119, 134, 210, 253, 255], "multi": [5, 18, 24, 25, 26, 27, 32, 37, 38, 40, 44, 46, 49, 50, 56, 57, 58, 59, 83, 85, 86, 90, 97, 106, 112, 119, 120, 121, 128, 132, 133, 134, 135, 139, 140, 141, 148, 157, 168, 224, 236, 237, 251, 253, 255], "to_parquet": [5, 9, 32, 35, 36, 37, 38, 55, 57, 58, 59, 224, 253], "output_path": [5, 32, 38, 47, 48, 50, 52, 53, 55, 57, 58, 59, 62, 253], "preserve_fil": [5, 58], "output_fil": [5, 59], "out_files_per_proc": 5, "row_group_s": 5, "num_thread": 5, "cat": [5, 29, 38, 59, 62, 78, 214, 224], "cont": [5, 29, 59, 62, 214], "partition_on": 5, "write_hugectr_keyset": [5, 38], "write": [5, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 207, 246, 253], "out": [5, 24, 32, 33, 35, 36, 38, 40, 41, 42, 45, 47, 49, 50, 52, 53, 54, 55, 59, 61, 62, 63, 85, 90, 101, 102, 108, 134, 136, 148, 157, 169, 170, 201, 207, 210, 224, 229, 232, 237, 239, 246, 251, 253], "enum": [5, 8, 18], "than": [5, 18, 32, 35, 36, 40, 47, 50, 51, 53, 57, 59, 60, 69, 83, 94, 96, 97, 98, 109, 110, 111, 118, 132, 133, 168, 210, 224, 225, 228, 255], "randomli": [5, 24, 29, 35, 40, 50, 53, 145, 150], "per_partit": [5, 38, 59], "worker": [5, 59, 60, 66], "split": [5, 35, 47, 49, 51, 53, 59, 71, 76, 119, 180, 251, 253], "append": [5, 22, 24, 42, 245], "distinctli": 5, "per_work": 5, "procedur": [5, 48], "re": [5, 23, 24, 32, 35, 36, 57, 59, 217, 218, 219, 246, 253, 259, 260, 261], "persist": [5, 9, 47, 50, 53], "result": [5, 18, 24, 28, 29, 32, 37, 38, 40, 42, 47, 49, 50, 57, 65, 66, 70, 86, 101, 102, 103, 104, 108, 118, 164, 168, 211, 224, 233, 237, 251, 253, 255], "full": [5, 27, 35, 36, 47, 52, 55, 57, 59, 65, 66, 68, 93, 94], "improv": [5, 37, 40, 41, 47, 52, 53, 93, 94, 118, 224, 237, 251, 255], "bytesio": 5, "integ": [5, 18, 24, 25, 29, 35, 38, 55, 59, 62, 70, 73, 85, 109, 110, 119, 224, 234, 244], "cluster": [5, 32, 33, 58, 66], "control": [5, 24, 29, 35, 36, 42, 43, 51, 53, 57, 58, 73, 83, 101, 119], "alwai": [5, 18, 53, 110], "multipli": [5, 20, 24, 26, 28, 109, 110, 114, 165, 166, 202, 203], "chosen": [5, 47, 50], "prohibit": 5, "being": [5, 24, 32, 35, 36, 50, 54, 69, 82, 92, 93, 119, 149, 150, 227], "less": [5, 18, 35, 47, 48, 50, 53, 58, 59, 98, 224, 225, 228, 255], "5000": [5, 55, 57], "necessari": [5, 29, 35, 47, 48, 50, 98, 111, 207, 210], "try": [5, 27, 42, 43, 45, 49, 54, 55, 63, 65, 68, 119, 255], "call": [5, 23, 24, 25, 26, 27, 29, 32, 33, 35, 36, 38, 48, 51, 57, 62, 77, 78, 80, 82, 83, 85, 86, 87, 90, 92, 99, 100, 102, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 117, 123, 127, 128, 134, 135, 136, 140, 141, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 190, 224, 230, 237, 241, 242, 244, 246, 251, 253, 255], "thread": [5, 59, 119], "dedic": [5, 39], "datatyp": [5, 42, 57, 59], "extens": [5, 29, 75, 119], "orc": 5, "old": [5, 32, 35, 36, 37, 41, 55], "replac": [5, 18, 24, 27, 28, 29, 35, 36, 37, 42, 43, 50, 53, 58, 145, 156, 224, 225, 230, 231], "categor": [5, 8, 9, 18, 24, 26, 29, 32, 35, 36, 37, 38, 40, 42, 44, 45, 47, 50, 52, 55, 58, 59, 62, 74, 78, 84, 85, 86, 92, 94, 95, 96, 97, 103, 106, 109, 112, 113, 119, 136, 148, 160, 168, 169, 170, 202, 203, 214, 223, 224, 228, 234, 235, 237, 246, 251], "continu": [5, 8, 9, 22, 24, 27, 29, 33, 35, 38, 40, 42, 50, 53, 55, 57, 59, 62, 74, 86, 89, 90, 91, 95, 96, 97, 106, 112, 113, 119, 134, 168, 214, 223, 225, 230, 231, 237, 240, 242, 251], "algorithm": [5, 57, 60, 118, 208, 224], "parallel": [5, 39, 41, 51, 52, 60, 94, 103, 110, 132, 134], "minim": [5, 35, 36], "pressur": [5, 224, 237, 251], "segment": [5, 24, 29, 50], "distinct": [5, 50], "Then": [5, 18, 24, 29, 32, 52, 53, 110], "ideal": [5, 59], "priorit": 5, "concurr": 5, "approach": [5, 50, 53, 145, 150, 168, 255], "keyset": 5, "_hugectr": 5, "veri": [5, 40, 47, 50, 53, 55, 98, 111, 136, 168, 169, 170], "plan": [5, 17, 18], "to_hugectr": [5, 9], "written": [5, 33, 35, 36, 39, 41, 55, 60, 61, 65, 66, 224, 237, 251, 253], "output_files_per_proc": 5, "per": [5, 33, 37, 38, 39, 51, 53, 55, 171, 172, 174, 175, 177, 178, 179, 239, 255], "arg": [5, 23, 24, 25, 28, 29, 57, 59, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 114, 115, 116, 117, 122, 123, 127, 128, 130, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 190, 191], "tail": [5, 9, 32, 50], "to_npi": [5, 9, 36], "npy": [5, 36], "larger": [5, 47, 50, 51, 53, 59, 60, 119], "mode": [5, 24, 25, 26, 29, 40, 42, 43, 47, 57, 83, 92, 104, 109, 110, 111, 114, 133, 181], "num_row": [5, 9, 29, 32, 55, 57, 105], "validate_dataset": [5, 9], "effici": [5, 32, 33, 39, 40, 60, 69, 118, 119, 136], "meet": [5, 55, 119], "now": [5, 24, 27, 32, 33, 35, 36, 38, 39, 41, 43, 48, 49, 52, 55, 59, 62, 65, 66, 119], "criteria": [5, 32, 210], "assert": [5, 35, 36, 66], "add_metadata_fil": 5, "row_group_max_s": 5, "file_min_s": 5, "require_metadata_fil": 5, "parquetdatasetengin": 5, "regenerate_dataset": [5, 9], "output_format": 5, "regener": 5, "contrast": [5, 126, 155, 167], "out_path": [5, 55, 59, 224, 237, 251], "1mib": 5, "file_s": 5, "10mib": 5, "root": [5, 34, 42, 45, 54, 56, 57, 144, 202, 203, 210, 224, 237, 251], "delai": [5, 255], "infer_schema": [5, 9], "n": [5, 18, 27, 29, 32, 38, 42, 43, 47, 50, 53, 57, 59, 71, 76], "sampl": [5, 24, 27, 29, 33, 34, 35, 37, 40, 45, 50, 55, 58, 59, 61, 65, 84, 85, 86, 92, 111, 114, 115, 116, 119, 125, 126, 136, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 255], "sample_dtyp": [5, 9], "annotate_list": 5, "cach": [5, 23, 24, 47, 50, 57, 224, 236, 251], "wa": [5, 24, 29, 32, 35, 36, 38, 41, 47, 50, 51, 55, 57, 58, 63, 65, 66, 118, 168, 233, 255], "tagset": [6, 17, 19, 24, 26, 112, 205], "factori": 6, "is_list": [6, 9, 35, 38, 49, 55], "is_rag": [6, 9, 35, 38, 49, 55], "dim": [6, 9, 17, 18, 22, 23, 24, 26, 29, 42, 51, 53, 78, 97, 98, 101, 102, 103, 105, 106, 113, 124, 125, 126, 145, 202, 203], "dataclass": [6, 17, 19, 24, 129, 131], "initvar": 6, "shape": [6, 9, 17, 18, 19, 24, 25, 27, 28, 29, 35, 40, 41, 42, 43, 57, 61, 62, 63, 78, 80, 85, 87, 90, 93, 101, 102, 104, 107, 114, 117, 119, 127, 144, 145, 148, 155, 157], "with_nam": [6, 9, 17, 19, 21], "copi": [6, 7, 9, 17, 19, 21, 22, 24, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 50, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 132, 149, 165, 166, 224, 237, 246, 251], "with_tag": [6, 9, 17, 19, 21], "with_properti": [6, 9, 17, 19, 21], "with_dtyp": [6, 9], "np": [6, 33, 35, 36, 38, 41, 42, 49, 55, 57, 58, 59, 62, 65, 66, 114, 118], "vari": [6, 27, 38, 51, 52, 55, 190, 224], "length": [6, 18, 23, 24, 25, 26, 29, 35, 42, 43, 49, 53, 55, 57, 69, 74, 78, 101, 102, 119, 145, 215, 251, 252], "with_shap": [6, 9], "int_domain": [6, 9, 17, 18, 19, 24, 26], "domain": [6, 17, 18, 19, 35, 38, 55, 255, 256], "float_domain": [6, 9, 17, 18, 19, 24], "value_count": [6, 9, 17, 18, 19, 35], "column_schema": [7, 17, 19, 21, 22, 24], "column_nam": [7, 9, 17, 18, 19, 21, 22, 24, 26, 32, 33, 35, 36, 38, 41, 49, 55, 57, 61, 62, 63, 65, 66, 119, 134, 239], "columnschema": [7, 9, 17, 19, 21, 24, 33, 36, 43, 55, 81, 84, 92, 101, 102, 103, 104, 143, 147, 149, 150, 151, 152, 153, 154, 162, 163], "exclud": [7, 9, 24, 32, 108], "non": [7, 24, 28, 39, 43, 60, 112, 155, 190, 224, 228], "apply_invers": [7, 9, 17, 19, 21, 22, 24], "select_by_tag": [7, 9, 17, 19, 21, 22, 24, 26, 32, 35, 36, 41, 55, 57, 61, 63, 92, 102, 108, 129, 134, 157], "pred_fn": 7, "predic": 7, "decid": [7, 51, 53, 121], "excluding_by_tag": [7, 9], "_type_": [7, 124, 211], "remove_by_tag": [7, 9, 17, 19, 21, 22, 24, 41], "select_by_nam": [7, 9, 17, 19, 21, 22, 24, 26, 35, 36, 40, 134, 168], "excluding_by_nam": [7, 9], "remove_col": [7, 9, 41, 62], "retriev": [7, 29, 34, 45, 46, 50, 53, 63, 100, 111, 115, 163, 169, 170, 256], "via": [7, 24, 39, 40, 52, 60, 63, 103, 112, 119, 155, 171, 174, 175, 177, 178, 179], "just": [7, 23, 24, 36, 47, 50, 53, 59, 111, 118, 226, 240], "to_panda": [7, 9, 35], "sequenc": [8, 9, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 35, 51, 71, 75, 78, 81, 82, 84, 85, 88, 90, 92, 100, 102, 103, 108, 110, 112, 113, 114, 115, 119, 121, 125, 126, 127, 128, 129, 131, 132, 134, 135, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 164, 165, 166, 167, 168, 169, 255], "text": [8, 9, 18, 22, 24, 32, 38, 42, 43, 49, 55, 57, 58, 127, 138, 224, 237], "token": [8, 9, 18, 23, 24, 27, 29, 34, 45, 54, 85], "id": [8, 9, 18, 24, 26, 27, 28, 29, 32, 33, 35, 36, 38, 40, 41, 42, 43, 47, 50, 52, 53, 55, 57, 58, 61, 92, 114, 115, 124, 126, 136, 149, 150, 151, 152, 163, 167, 168, 169, 170, 211, 235, 255], "context": [8, 9, 18, 23, 24, 29, 48, 53, 58, 82, 107, 112, 114, 115, 170, 171, 174, 175, 177, 178, 179, 181, 255], "target": [8, 9, 22, 24, 27, 29, 32, 33, 35, 36, 38, 41, 47, 49, 51, 53, 55, 57, 59, 61, 62, 63, 66, 71, 76, 80, 81, 84, 86, 92, 104, 115, 119, 127, 132, 135, 138, 139, 140, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 162, 163, 169, 170, 210, 213, 214, 224, 233, 251, 255], "multi_class": [8, 9], "user_id": [8, 9, 32, 33, 35, 38, 47, 49, 50, 53, 55, 57, 65, 110, 124, 125, 126, 233, 255], "item_id": [8, 9, 22, 24, 26, 29, 32, 33, 35, 38, 47, 49, 50, 53, 55, 57, 92, 110, 111, 114, 124, 125, 126, 128, 132, 134, 136, 147, 167, 168, 170, 184, 187], "session_id": [8, 9, 29, 35, 50, 233, 255], "text_token": [8, 9], "binary_classif": [8, 9, 32, 55, 57, 59], "multi_class_classif": [8, 9], "dag": [9, 29, 32, 33, 35, 36, 38, 41, 55, 57, 63, 65, 66, 253], "deprec": [14, 17, 18, 19, 24, 33, 35, 38, 42, 43, 57, 58, 94, 96, 97, 168], "favor": 14, "proto": [17, 19, 21, 24], "schema_bp": [17, 19, 21, 24], "lifecyclestag": [17, 18, 19], "unknown_stag": [17, 18], "alpha": [17, 18], "beta": [17, 18], "debug_onli": [17, 18], "disabl": [17, 18, 29, 32, 42, 68, 104], "featuretyp": [17, 18, 19], "type_unknown": [17, 18], "struct": [17, 18], "timedomainintegertimeformat": [17, 18], "format_unknown": [17, 18], "unix_dai": [17, 18], "unix_second": [17, 18], "unix_millisecond": [17, 18], "unix_microsecond": [17, 18], "unix_nanosecond": [17, 18], "timeofdaydomainintegertimeofdayformat": [17, 18], "packed_64_nano": [17, 18], "tensorrepresentationrowpartitiondtyp": [17, 18], "unspecifi": [17, 18], "int64": [17, 18, 35, 36, 38, 39, 42, 43, 55, 59], "int32": [17, 18, 32, 33, 40, 42, 49, 50, 55, 57, 58, 59, 62, 63, 66, 105, 199, 215], "valuecountlist": [17, 18, 19], "presenc": [17, 18, 19], "group_pres": [17, 18, 19], "string_domain": [17, 18, 19, 24], "bool_domain": [17, 18, 19], "struct_domain": [17, 18, 19], "natural_language_domain": [17, 18, 19], "image_domain": [17, 18, 19], "mid_domain": [17, 18, 19], "url_domain": [17, 18, 19], "time_domain": [17, 18, 19], "time_of_day_domain": [17, 18, 19], "distribution_constraint": [17, 18, 19], "annot": [17, 18, 19, 24], "skew_compar": [17, 18, 19], "drift_compar": [17, 18, 19], "in_environ": [17, 18, 19], "not_in_environ": [17, 18, 19], "lifecycle_stag": [17, 18, 19], "unique_constraint": [17, 18, 19], "comment": [17, 18, 32, 50, 53], "extra_metadata": [17, 18], "numericvaluecompar": [17, 18], "min_fraction_threshold": [17, 18], "max_fraction_threshold": [17, 18], "datasetconstraint": [17, 18, 19, 24], "num_examples_drift_compar": [17, 18], "num_examples_version_compar": [17, 18], "min_examples_count": [17, 18], "max_examples_count": [17, 18], "fixedshap": [17, 18, 19], "fixedshapedim": [17, 18], "valuecount": [17, 18, 19], "min": [17, 18, 24, 26, 35, 38, 47, 49, 50, 52, 55, 114, 225, 252], "weightedfeatur": [17, 18, 19, 24], "weight_featur": [17, 18], "sparsefeatur": [17, 18, 19, 24], "dense_shap": [17, 18], "index_featur": [17, 18], "is_sort": [17, 18], "value_featur": [17, 18], "sparsefeatureindexfeatur": [17, 18], "sparsefeaturevaluefeatur": [17, 18], "distributionconstraint": [17, 18, 19], "min_domain_mass": [17, 18], "featurecoverageconstraint": [17, 18], "min_coverag": [17, 18], "min_avg_token_length": [17, 18], "excluded_string_token": [17, 18], "excluded_int_token": [17, 18], "oov_string_token": [17, 18], "sequencevalueconstraint": [17, 18], "int_valu": [17, 18], "string_valu": [17, 18, 42], "min_per_sequ": [17, 18], "max_per_sequ": [17, 18], "min_fraction_of_sequ": [17, 18], "max_fraction_of_sequ": [17, 18], "sequencelengthconstraint": [17, 18], "excluded_int_valu": [17, 18], "excluded_string_valu": [17, 18], "min_sequence_length": [17, 18], "max_sequence_length": [17, 18, 22, 23, 24, 26, 27, 29], "intdomain": [17, 18, 19, 24], "is_categor": [17, 18], "floatdomain": [17, 18, 19, 24], "disallow_nan": [17, 18, 19], "disallow_inf": [17, 18, 19], "is_embed": [17, 18, 19], "structdomain": [17, 18, 19], "sparse_featur": [17, 18, 19, 24], "stringdomain": [17, 18, 19, 24], "booldomain": [17, 18, 19], "true_valu": [17, 18], "false_valu": [17, 18], "naturallanguagedomain": [17, 18, 19], "vocabulari": [17, 18, 24, 26, 27, 60, 101, 136, 169, 170, 224], "coverag": [17, 18], "token_constraint": [17, 18], "sequence_length_constraint": [17, 18], "location_constraint_regex": [17, 18], "imagedomain": [17, 18, 19], "minimum_supported_image_fract": [17, 18], "max_image_byte_s": [17, 18], "middomain": [17, 18, 19], "urldomain": [17, 18, 19], "timedomain": [17, 18, 19], "string_format": [17, 18], "integer_format": [17, 18], "timeofdaydomain": [17, 18, 19], "featurepres": [17, 18, 19], "min_fract": [17, 18], "min_count": [17, 18], "featurepresencewithingroup": [17, 18, 19], "infinitynorm": [17, 18], "threshold": [17, 18, 47, 50, 163, 180, 224, 225], "jensenshannondiverg": [17, 18], "featurecompar": [17, 18, 19], "infinity_norm": [17, 18], "jensen_shannon_diverg": [17, 18], "uniqueconstraint": [17, 18, 19], "tensorrepresent": [17, 18], "dense_tensor": [17, 18], "varlen_sparse_tensor": [17, 18], "sparse_tensor": [17, 18], "ragged_tensor": [17, 18], "tensorrepresentationdefaultvalu": [17, 18], "float_valu": [17, 18], "bytes_valu": [17, 18], "uint_valu": [17, 18], "tensorrepresentationdensetensor": [17, 18], "default_valu": [17, 18], "tensorrepresentationvarlensparsetensor": [17, 18], "tensorrepresentationsparsetensor": [17, 18], "index_column_nam": [17, 18], "value_column_nam": [17, 18], "tensorrepresentationraggedtensor": [17, 18], "feature_path": [17, 18], "row_partition_dtyp": [17, 18], "tensorrepresentationraggedtensorpartit": [17, 18], "uniform_row_length": [17, 18], "row_length": [17, 18], "tensorrepresentationgroup": [17, 18, 19, 24], "tensor_represent": [17, 18], "create_categor": [17, 19, 21], "create_continu": [17, 19, 21], "with_tags_based_on_properti": [17, 19, 21, 22, 24], "to_proto_text": [17, 19, 21, 22, 24], "filter_columns_from_dict": [17, 19, 21, 22, 24], "select_by_typ": [17, 19, 21, 22, 24], "remove_by_typ": [17, 19, 21, 22, 24], "remove_by_nam": [17, 19, 21, 22, 24], "map_column_schema": [17, 19, 21, 22, 24], "filter_column_schema": [17, 19, 21, 22, 24], "item_id_column_nam": [17, 19, 21, 22, 24], "from_json": [17, 19, 21, 22, 24], "from_proto_text": [17, 19, 21, 22, 24], "add": [17, 19, 21, 22, 23, 24, 25, 32, 33, 35, 38, 39, 42, 43, 46, 50, 52, 53, 55, 60, 71, 76, 83, 97, 106, 111, 112, 113, 114, 115, 116, 129, 136, 148, 168, 173, 176, 220, 230, 231, 246], "categorical_cardin": [17, 19, 21], "util": [17, 21, 22, 24, 32, 33, 35, 36, 37, 40, 41, 42, 49, 55, 57, 58, 66, 119, 129], "doc_util": [17, 21], "embedding_util": [17, 21], "get_embedding_sizes_from_schema": [17, 20], "get_embedding_size_from_cardin": [17, 20], "misc_util": [17, 21], "proto_util": [17, 21], "betterproto": [17, 18, 19, 24], "_placehold": [17, 18, 19, 24], "num_item": [17, 19, 199], "min_index": [17, 19], "is_float": [17, 19], "min_valu": [17, 19, 59, 200, 225], "max_valu": [17, 19, 200, 225], "using_value_count": [17, 19, 24], "using_domain": [17, 19, 24], "weighted_featur": [17, 19, 24], "default_environ": [17, 19, 24], "dataset_constraint": [17, 19, 24], "tensor_representation_group": [17, 19, 24], "_schema": [17, 19, 24], "field": [17, 18, 19, 24, 32, 57, 65, 66], "default_factori": [17, 19, 24], "_missing_typ": [17, 19, 24], "init": [17, 19, 23, 24, 26, 32, 36, 52, 60], "repr": [17, 19, 24], "hash": [17, 19, 24, 36, 50, 53, 109, 110, 168, 224, 234, 235, 237, 251], "compar": [17, 19, 24, 47, 51, 53, 65, 66, 118, 241], "mappingproxi": [17, 19, 24], "fieldmetadata": [17, 19, 24], "proto_typ": [17, 19, 24], "messag": [17, 18, 19, 24, 32, 33, 34, 35, 36, 45, 48, 49, 52, 54, 55, 65, 66, 181], "map_typ": [17, 19, 24], "wrap": [17, 19, 24, 25, 65, 66], "_field_typ": [17, 19, 24], "input_dict": [17, 19, 24, 201], "to_select": [17, 19, 24], "map_fn": [17, 19, 24], "callabl": [17, 19, 24, 26, 29, 33, 35, 36, 41, 55, 57, 61, 67, 75, 81, 84, 92, 103, 113, 118, 124, 125, 126, 127, 143, 190, 223, 232, 245], "filter_fn": [17, 19, 24], "negat": [17, 19, 24], "path_or_proto_text": [17, 19, 24], "allow_overlap": [17, 19, 24], "debug": [18, 23, 24, 32, 53, 55, 57], "treat": [18, 50, 92, 112], "2": [18, 20, 23, 24, 25, 26, 27, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 51, 53, 55, 58, 59, 60, 61, 62, 63, 65, 66, 73, 92, 93, 94, 97, 107, 110, 112, 118, 150, 165, 166, 168, 169, 170, 179, 202, 203, 217, 218, 219, 224, 234, 251, 259, 260, 261], "3": [18, 23, 24, 26, 28, 29, 32, 35, 36, 37, 38, 39, 40, 42, 43, 47, 49, 53, 55, 58, 59, 61, 62, 63, 65, 66, 98, 107, 110, 112, 119, 148, 168, 169, 170, 217, 218, 219, 224, 251, 255, 259, 260, 261], "4": [18, 23, 24, 27, 32, 35, 36, 37, 38, 40, 42, 45, 47, 49, 53, 55, 57, 59, 60, 61, 62, 64, 65, 66, 105, 110, 168, 169, 170, 217, 218, 219, 228, 255, 259, 260, 261], "6": [18, 32, 35, 36, 38, 40, 47, 49, 52, 53, 55, 57, 59, 65, 217, 218, 219, 259, 260, 261], "7": [18, 32, 33, 35, 36, 38, 40, 41, 47, 49, 50, 55, 57, 58, 59, 61, 65, 66, 168, 217, 218, 219, 258, 259, 260, 261], "physic": 18, "It": [18, 23, 24, 25, 26, 27, 28, 29, 33, 35, 36, 38, 39, 40, 41, 46, 47, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 63, 65, 66, 75, 85, 86, 88, 92, 102, 106, 118, 121, 129, 132, 136, 140, 141, 155, 168, 173, 176, 241, 253, 255], "enumer": 18, "substitut": 18, "had": [18, 35, 36, 41, 51, 57, 65, 66, 227], "buffer": [18, 68, 119], "person": [18, 32, 53, 83, 95, 96, 133, 171, 255], "ag": [18, 47, 49, 50, 66], "gender": [18, 47, 49, 50, 66], "repeat": 18, "thu": [18, 41, 50], "here": [18, 24, 32, 33, 35, 36, 38, 40, 41, 46, 47, 50, 51, 52, 53, 54, 57, 59, 129, 241], "grandpar": 18, "u": [18, 32, 35, 36, 41, 42, 55, 57, 59, 65, 66, 93], "distinguish": [18, 24, 29], "between": [18, 24, 26, 29, 32, 33, 36, 38, 50, 51, 53, 55, 69, 73, 92, 106, 124, 165, 166, 168, 224, 226, 227, 233, 236, 237, 242, 251, 255], "link": [18, 23, 24, 31, 35, 36, 47, 52, 256], "arbitrari": 18, "sequenceexampl": 18, "forwardref": 18, "0x7f127eb761c0": 18, "nextid": 18, "33": [18, 33, 217, 218, 219, 259, 260, 261], "ratio": [18, 24, 29], "previou": [18, 23, 24, 39, 40, 41, 51, 52, 53, 57, 59, 62, 63, 210], "below": [18, 32, 33, 35, 36, 39, 41, 42, 43, 48, 49, 50, 51, 52, 55, 57, 62, 65, 66, 92, 168, 224], "abov": [18, 32, 33, 35, 36, 39, 42, 43, 52, 55, 233, 255], "constraint": [18, 32, 101, 102], "entir": [18, 23, 24, 33, 53, 55, 207], "fix": [18, 32, 35, 36, 41, 53, 55, 59, 119, 136, 245], "immedi": 18, "implic": 18, "moreov": [18, 47], "pars": [18, 22, 24, 29, 36, 55, 57, 190, 191], "dimension": [18, 24, 26, 71, 76, 98], "tensor": [18, 24, 25, 26, 27, 28, 29, 40, 55, 60, 68, 69, 71, 76, 77, 78, 80, 82, 85, 86, 90, 92, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 123, 129, 134, 135, 136, 138, 140, 141, 144, 145, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 171, 172, 174, 175, 177, 178, 179, 210], "axi": [18, 24, 28, 29, 37, 51, 78, 112, 117], "lexicograph": 18, "ident": [18, 32, 35, 36, 57], "tensorshap": [18, 35, 36, 78, 80, 82, 102, 107, 127, 144, 145, 155], "limit": [18, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 168, 224], "minimum": [18, 27, 29, 58, 136, 169, 170, 225, 228, 244], "weight": [18, 23, 24, 26, 27, 29, 35, 36, 42, 47, 51, 62, 78, 83, 84, 85, 86, 92, 93, 101, 102, 106, 120, 121, 129, 133, 135, 139, 155, 158, 168, 211], "associ": [18, 36, 40], "tfidf": [18, 226], "todo": [18, 24, 29, 51, 237], "b": [18, 23, 24, 29, 42, 43, 49, 51, 52, 55, 57, 107, 177, 179, 224, 234], "142122960": 18, "weightedcategor": 18, "tfx": 18, "etc": [18, 32, 50, 53, 233, 255], "spars": [18, 24, 26, 32, 53, 59, 85, 109, 110, 112, 113, 118, 119, 129, 161, 168, 170, 226], "index": [18, 24, 25, 29, 34, 40, 42, 43, 45, 49, 55, 57, 59, 73, 85, 101, 104, 109, 110, 119, 134, 147, 163, 224, 255], "dimens": [18, 23, 24, 25, 26, 27, 28, 29, 35, 38, 40, 47, 53, 55, 85, 93, 94, 95, 96, 97, 98, 101, 102, 103, 105, 106, 120, 124, 125, 126, 145, 165, 166, 180, 202], "martinz": 18, "max_off_domain": 18, "slowli": 18, "could": [18, 23, 24, 35, 50, 51, 53, 59, 168, 246, 255], "recurs": [18, 101, 185], "similarli": 18, "its": [18, 24, 25, 26, 35, 36, 38, 39, 40, 41, 42, 47, 50, 52, 53, 57, 59, 60, 68, 87, 102, 114, 119, 120, 129, 165, 166, 190, 210], "natur": [18, 50, 119, 255], "languag": [18, 24, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 145, 150, 169, 170, 255], "imag": [18, 41, 47, 50, 52, 53, 258], "knowledg": [18, 121, 150, 172, 178], "www": [18, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 136, 171, 174, 175, 177, 178, 179], "wikidata": 18, "org": [18, 24, 26, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 94, 95, 97, 106, 107, 118, 136, 165, 169, 170, 171, 172, 174, 175, 177, 178, 179], "wiki": 18, "p646": 18, "url": [18, 31, 34, 36, 42, 43, 45, 49, 52, 54, 55, 57], "en": [18, 32, 35, 38, 39, 40, 41, 42, 55, 65], "wikipedia": 18, "date": [18, 33, 50, 57], "dai": [18, 50, 58, 59, 61], "particular": [18, 35, 36, 38, 47, 51, 53, 140, 141], "record": [18, 58, 251], "l": [18, 39, 59, 60, 61, 171, 177, 179], "infin": 18, "norm": [18, 24, 26, 28, 36, 118, 124], "certain": [18, 24, 108, 246], "discret": [18, 27, 47, 50, 59], "featurenamestatist": 18, "top": [18, 23, 24, 29, 32, 33, 47, 50, 51, 53, 97, 138, 163, 164, 169, 170, 172, 177, 178, 179, 246], "k": [18, 23, 24, 29, 32, 33, 50, 57, 79, 107, 122, 130, 137, 138, 142, 147, 163, 164, 172, 178, 251], "l_": 18, "infti": 18, "p": [18, 24, 27, 29, 34, 39, 40, 42, 45, 47, 54, 56, 59, 60, 62, 111, 136, 151, 152, 153, 154], "q": 18, "max_": 18, "p_": 18, "q_": 18, "approxim": [18, 27, 32, 33, 63, 136, 255], "jensen": 18, "shannon": 18, "diverg": 18, "greater": [18, 50, 53, 202, 203, 224, 225], "equal": [18, 23, 24, 27, 47, 51, 101, 111, 114, 119, 136, 154], "captur": [18, 40, 53], "intent": [18, 255], "tf": [18, 32, 33, 35, 36, 38, 40, 41, 55, 57, 61, 63, 226], "compositetensor": 18, "sparsetensor": [18, 85, 102, 109, 110, 129, 159], "need": [18, 23, 24, 25, 29, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 47, 49, 50, 52, 53, 55, 56, 57, 59, 60, 62, 63, 65, 67, 92, 93, 95, 97, 101, 106, 119, 145, 149, 150, 152, 212, 224, 236, 237, 246, 251, 253], "rag": [18, 29, 140, 141], "whose": [18, 49, 51, 53, 103, 110, 211], "separ": [18, 31, 38, 50, 51, 52, 53, 71, 76, 112, 168, 190, 224, 233, 237, 251, 255, 258], "eventu": 18, "co": 18, "valenc": 18, "raggedtensor": [18, 78, 85, 102, 129, 140, 141, 145, 150, 159, 161], "innermost": 18, "d": [18, 24, 26, 29, 57, 93, 107, 112, 148, 177, 179, 224], "univalent_featur": 18, "multivalent_featur": 18, "batch": [18, 23, 24, 29, 35, 36, 39, 40, 43, 47, 49, 50, 51, 53, 55, 57, 62, 63, 67, 68, 69, 71, 76, 92, 101, 102, 103, 104, 106, 111, 114, 118, 119, 124, 125, 126, 136, 145, 163, 167, 169, 170, 171, 172, 174, 175, 177, 178, 179, 189, 214, 215], "alia": [19, 24, 26, 173, 176, 238, 243, 254], "cardin": [20, 24, 26, 27, 35, 38, 40, 55, 85, 94, 95, 102, 136, 165, 166, 168, 202, 203, 224, 228, 234, 235, 237, 251], "packag": [21, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 49, 52, 55, 56, 57, 58, 61, 62, 65, 66, 217, 218, 219, 259, 260, 261], "subpackag": 21, "config": [21, 22, 24, 27, 32, 33, 35, 36, 41, 42, 43, 48, 55, 57, 62, 63, 80, 82, 83, 87, 92, 100, 102, 104, 114, 115, 123, 127, 129, 131, 134, 135, 138, 144, 147, 149, 150, 154, 155, 157, 164, 184, 187], "submodul": 21, "trainer": [21, 22, 29], "torch": [21, 22, 23, 32, 33, 35, 36, 40, 49, 55], "mask": [21, 22, 23, 25, 26, 27, 28, 29, 35, 36, 82, 101, 102, 145, 148, 149, 150, 151, 152, 153, 156, 255], "ranking_metr": [21, 22], "merlin_standard_lib": [21, 24, 26, 29], "registri": [21, 33], "schemamixin": [22, 23, 29], "requires_schema": [22, 23, 24, 28, 29, 85], "set_schema": [22, 23, 108, 155, 157], "check_schema": [22, 23], "get_item_ids_from_input": [22, 23], "get_padding_mask_from_item_id": [22, 23], "t4rectrainingargu": [22, 23, 24], "shuffle_buffer_s": [22, 23, 24, 29], "data_loader_engin": [22, 23, 24], "eval_on_test_set": [22, 23, 24, 186], "eval_steps_on_train_set": [22, 23, 24], "predict_top_k": [22, 23, 24], "learning_rate_num_cosine_cycles_by_epoch": [22, 23, 24], "log_predict": [22, 23, 24], "compute_metrics_each_n_step": [22, 23, 24], "experiments_group": [22, 23, 24], "place_model_on_devic": [22, 23, 24], "t4rectrainingargumentstf": [22, 23], "output_dir": [22, 23, 24, 57], "t4recconfig": [22, 23, 24, 25], "to_huggingface_torch_model": [22, 23, 24], "to_torch_model": [22, 23, 24], "transformers_config_cl": [22, 23, 24], "reformerconfig": [22, 23, 24], "gpt2config": [22, 23, 24, 29], "longformerconfig": [22, 23, 24, 29], "electraconfig": [22, 23, 24], "albertconfig": [22, 23, 24], "xlnetconfig": [22, 23, 24, 27, 29], "bertconfig": [22, 23, 24, 29], "robertaconfig": [22, 23, 24, 29], "transfoxlconfig": [22, 23, 24, 29], "mlp": [22, 24, 26, 32, 51, 52, 53, 95, 98, 112, 120, 168, 255], "prediction_task": [22, 23, 24, 32, 41, 55, 57, 61, 94, 96, 97, 125, 135, 166, 168], "aggreg": [22, 24, 26, 27, 29, 78, 89, 90, 93, 100, 103, 112, 113, 124, 134, 148, 157, 164, 168, 169, 224, 233, 237, 251], "data_util": [22, 24], "examples_util": [22, 24], "schema_util": [22, 24], "torch_util": [22, 24], "maskinginfo": [22, 24, 29], "masksequ": [22, 24, 25, 26, 29], "compute_masked_target": [22, 24, 29], "apply_mask_to_input": [22, 24, 29], "predict_al": [22, 24], "forward": [22, 23, 24, 25, 26, 27, 28, 29, 40, 57, 101, 102, 112, 127, 157, 227], "forward_output_s": [22, 24, 25, 26, 28, 29], "transformer_required_argu": [22, 24, 29], "transformer_optional_argu": [22, 24], "transformer_argu": [22, 24], "causallanguagemodel": [22, 24, 29], "maskedlanguagemodel": [22, 24, 29], "permutationlanguagemodel": [22, 24, 29], "replacementlanguagemodel": [22, 24, 29], "get_fake_token": [22, 24, 29], "sample_from_softmax": [22, 24, 29], "rankingmetr": [22, 24], "updat": [22, 24, 29, 32, 33, 35, 36, 38, 39, 40, 41, 42, 55, 57, 63, 65, 101, 118, 119, 129, 251, 255], "precisionat": [22, 24], "recallat": [22, 24, 27, 32], "avgprecisionat": [22, 24, 27], "dcgat": [22, 24], "ndcgat": [22, 24, 27, 32], "meanreciprocalrankat": [22, 24], "get_train_dataload": [22, 24], "get_eval_dataload": [22, 24], "get_test_dataload": [22, 24], "num_exampl": [22, 24, 35, 36], "reset_lr_schedul": [22, 24], "create_schedul": [22, 24], "get_schedul": [22, 24], "compute_loss": [22, 24, 29, 155], "prediction_step": [22, 24], "evaluation_loop": [22, 23, 24], "load_model_trainer_states_from_checkpoint": [22, 24], "log_predictions_callback": [22, 24], "log": [22, 23, 24, 27, 32, 34, 45, 47, 50, 52, 54, 57, 59, 61, 64, 70, 83, 92, 133, 136, 175, 225, 240], "process_metr": [22, 24], "incrementalloggingcallback": [22, 24], "on_train_begin": [22, 24], "on_train_end": [22, 24], "on_epoch_end": [22, 24, 70, 71], "datasetmock": [22, 24], "sequentialblock": [22, 24, 25, 27, 89, 91, 93, 94, 95, 120, 121, 133, 168], "add_modul": [22, 24, 25], "add_module_and_maybe_build": [22, 24, 25], "as_tabular": [22, 24, 25], "get_children_by_class_nam": [22, 24, 25], "right_shift_block": [22, 24, 25], "build_block": [22, 24, 25], "blockbas": [22, 24, 25, 26, 27], "to_model": [22, 24, 25], "tabularblock": [22, 24, 26, 85, 90, 105, 108, 109, 117, 134, 135, 140, 141, 146, 156, 165], "to_modul": [22, 24, 25], "output_s": [22, 24, 25, 29], "mlpblock": [22, 24, 25, 26, 27, 32, 35, 36, 41, 53, 55, 57, 61, 86, 94, 95, 96, 97, 98, 109, 112, 113, 121, 129, 132, 166, 167, 168, 169, 170], "tabulartransform": [22, 24, 26, 28, 90, 134, 148, 157], "sequentialtabulartransform": [22, 24, 157], "tabularaggreg": [22, 24, 26, 28, 90, 100, 103, 112, 113, 134, 148, 155, 157], "stochasticswapnois": [22, 24, 28], "augment": [22, 24, 28, 156], "tabularlayernorm": [22, 24, 26, 28], "from_feature_config": [22, 24, 28], "tabulardropout": [22, 24, 28], "transformerblock": [22, 24, 25, 27, 28, 149, 150, 152], "transformer_to_prepar": [22, 24, 25], "from_registri": [22, 24, 25], "continuousfeatur": [22, 24, 26], "from_featur": [22, 24, 26, 90, 157], "embeddingfeatur": [22, 24, 26, 148], "item_embedding_t": [22, 24, 26, 27], "table_to_embedding_modul": [22, 24, 26], "from_schema": [22, 24, 26, 27, 29, 109, 128, 135, 157], "softembeddingfeatur": [22, 24, 26], "pretrainedembeddingsiniti": [22, 24, 26], "pretrainedembeddingfeatur": [22, 24, 26], "parse_combin": [22, 24, 26], "tabularsequencefeatur": [22, 23, 24, 26, 27], "embedding_module_class": [22, 24, 26], "set_mask": [22, 24, 26], "project_continuous_featur": [22, 24, 26], "sequenceembeddingfeatur": [22, 24, 26], "featureconfig": [22, 24, 26, 28, 148], "tableconfig": [22, 24, 26, 148], "vocabulary_s": [22, 24, 26], "tabularfeatur": [22, 24, 26, 29], "continuous_module_class": [22, 24, 26], "soft_embedding_module_class": [22, 24, 26], "pretrained_embedding_module_class": [22, 24, 26], "continuous_modul": [22, 24, 26], "categorical_modul": [22, 24, 26], "pretrained_modul": [22, 24, 26], "pop_label": [22, 24, 135], "calculate_metr": [22, 24, 27, 29], "compute_metr": [22, 24, 27, 29], "reset_metr": [22, 24, 29], "task_block": [22, 23, 24, 27, 80, 115, 128, 132, 135, 138, 139, 144, 169], "to_lightn": [22, 24], "fit": [22, 24, 32, 35, 36, 38, 39, 41, 53, 55, 57, 59, 60, 61, 65, 66, 94, 96, 97, 104, 119, 125, 126, 145, 149, 150, 152, 163, 166, 167, 168, 169, 170, 171, 174, 175, 177, 178, 179, 224, 226, 230, 233, 237, 241, 242, 244, 246, 251, 252, 253], "evalu": [22, 23, 24, 27, 29, 38, 46, 47, 50, 52, 54, 104, 119, 138, 149, 150, 152, 163, 174, 175], "predictiontask": [22, 23, 24, 25, 27, 80, 83, 94, 96, 97, 115, 121, 125, 128, 133, 135, 144, 166, 168], "task_nam": [22, 24, 27, 80, 115, 127, 128, 135, 138, 144], "child_nam": [22, 24, 138], "set_metr": [22, 24], "metric_nam": [22, 24], "to_head": [22, 24], "astabular": [22, 24], "concatfeatur": [22, 24, 28], "filterfeatur": [22, 24, 25], "elementwisesum": [22, 24, 28], "elementwisesumitemmulti": [22, 24, 28], "mergetabular": [22, 24, 26], "merge_valu": [22, 24], "stackfeatur": [22, 24, 28], "binaryclassificationtask": [22, 24, 27, 32, 57, 61, 109, 129], "default_loss": [22, 24, 27, 35, 36, 80, 81, 84, 92, 115, 127, 128, 143, 144], "default_metr": [22, 24, 27, 80, 115, 128, 144, 164], "regressiontask": [22, 24, 27], "nextitempredictiontask": [22, 23, 24, 27], "remove_pad_3d": [22, 24, 27], "tabularmodul": [22, 24, 26, 134, 157], "post": [22, 24, 26, 32, 35, 42, 43, 49, 53, 55, 81, 84, 86, 90, 92, 100, 101, 103, 104, 112, 113, 115, 125, 126, 127, 132, 134, 135, 143, 146, 147, 148, 157, 163, 165, 166, 170, 255], "pre_forward": [22, 24], "post_forward": [22, 24], "softembed": [22, 24, 26], "labelsmoothcrossentropyloss": [22, 24], "is_gpu_dataloader_avail": [22, 30], "is_pyarrow_avail": [22, 30], "is_merlin_dataloader_avail": [22, 30], "pad_token": [23, 24, 28, 156], "overwrite_output_dir": [23, 24], "do_train": [23, 24], "do_ev": [23, 24], "do_predict": [23, 24], "evaluation_strategi": [23, 24], "intervalstrategi": [23, 24], "prediction_loss_onli": [23, 24], "per_device_train_batch_s": [23, 24], "8": [23, 24, 26, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 52, 55, 57, 58, 59, 60, 61, 62, 65, 66, 168, 181, 202, 203, 217, 218, 219, 224, 237, 251, 259, 260, 261], "per_device_eval_batch_s": [23, 24], "per_gpu_train_batch_s": [23, 24], "per_gpu_eval_batch_s": [23, 24], "gradient_accumulation_step": [23, 24], "eval_accumulation_step": [23, 24], "eval_delai": [23, 24], "learning_r": [23, 24, 41, 61, 118, 168], "5e": [23, 24], "05": [23, 24, 26, 32, 35, 38, 40, 47, 49, 52, 53, 65, 66, 217, 218, 219, 259, 260, 261], "weight_decai": [23, 24], "adam_beta1": [23, 24], "9": [23, 24, 32, 36, 41, 42, 49, 55, 57, 59, 62, 65, 118, 217, 218, 219, 234, 259, 260, 261], "adam_beta2": [23, 24], "999": [23, 24, 118], "adam_epsilon": [23, 24], "1e": [23, 24, 38, 40, 47, 52, 53, 57, 68, 118], "08": [23, 24, 35, 36, 41, 52, 57, 61, 66, 217, 218, 219, 259, 260, 261], "max_grad_norm": [23, 24], "num_train_epoch": [23, 24], "max_step": [23, 24], "lr_scheduler_typ": [23, 24], "schedulertyp": [23, 24], "linear": [23, 24, 25, 27, 40, 50, 53, 97, 120, 168], "warmup_ratio": [23, 24], "warmup_step": [23, 24], "log_level": [23, 24, 57], "passiv": [23, 24], "log_level_replica": [23, 24], "log_on_each_nod": [23, 24], "logging_dir": [23, 24], "logging_strategi": [23, 24], "logging_first_step": [23, 24], "logging_step": [23, 24], "500": [23, 24], "logging_nan_inf_filt": [23, 24], "save_strategi": [23, 24], "save_step": [23, 24], "save_total_limit": [23, 24], "save_safetensor": [23, 24], "save_on_each_nod": [23, 24], "no_cuda": [23, 24], "use_mps_devic": [23, 24], "42": [23, 24, 32, 35, 36, 53, 65, 217, 219, 251, 259, 261], "data_se": [23, 24], "jit_mode_ev": [23, 24], "use_ipex": [23, 24], "bf16": [23, 24], "fp16": [23, 24], "fp16_opt_level": [23, 24], "o1": [23, 24], "half_precision_backend": [23, 24], "bf16_full_ev": [23, 24], "fp16_full_ev": [23, 24], "tf32": [23, 24], "local_rank": [23, 24], "ddp_backend": [23, 24], "tpu_num_cor": [23, 24], "tpu_metrics_debug": [23, 24], "dataloader_drop_last": [23, 24], "eval_step": [23, 24], "dataloader_num_work": [23, 24], "past_index": [23, 24], "run_nam": [23, 24], "disable_tqdm": [23, 24], "remove_unused_column": [23, 24], "label_nam": [23, 24, 39, 60, 119], "load_best_model_at_end": [23, 24], "metric_for_best_model": [23, 24], "greater_is_bett": [23, 24], "ignore_data_skip": [23, 24], "sharded_ddp": [23, 24], "fsdp": [23, 24], "fsdp_min_num_param": [23, 24], "fsdp_config": [23, 24], "fsdp_transformer_layer_cls_to_wrap": [23, 24], "deepspe": [23, 24], "label_smoothing_factor": [23, 24], "optimizernam": [23, 24], "adamw_hf": [23, 24], "optim_arg": [23, 24], "adafactor": [23, 24], "group_by_length": [23, 24], "length_column_nam": [23, 24], "report_to": [23, 24], "ddp_find_unused_paramet": [23, 24], "ddp_bucket_cap_mb": [23, 24], "dataloader_pin_memori": [23, 24], "skip_memory_metr": [23, 24], "use_legacy_prediction_loop": [23, 24], "push_to_hub": [23, 24], "resume_from_checkpoint": [23, 24], "hub_model_id": [23, 24], "hub_strategi": [23, 24], "hubstrategi": [23, 24], "every_sav": [23, 24], "hub_token": [23, 24], "hub_private_repo": [23, 24], "gradient_checkpoint": [23, 24], "include_inputs_for_metr": [23, 24], "fp16_backend": [23, 24], "push_to_hub_model_id": [23, 24], "push_to_hub_organ": [23, 24], "push_to_hub_token": [23, 24], "mp_paramet": [23, 24], "auto_find_batch_s": [23, 24], "full_determin": [23, 24], "torchdynamo": [23, 24], "ray_scop": [23, 24], "last": [23, 24, 25, 27, 29, 33, 35, 43, 48, 50, 55, 58, 59, 62, 63, 65, 66, 67, 83, 85, 95, 97, 104, 106, 119, 120, 145, 149, 150, 151, 152, 155, 168, 227, 233, 239, 253, 255], "ddp_timeout": [23, 24], "1800": [23, 24], "torch_compil": [23, 24], "torch_compile_backend": [23, 24], "torch_compile_mod": [23, 24], "xpu_backend": [23, 24], "merlin": [23, 24, 26, 27, 29, 34, 35, 36, 37, 38, 39, 41, 42, 43, 48, 50, 51, 52, 53, 58, 59, 60, 62, 64, 217, 218, 219, 253, 255, 256], "20": [23, 24, 33, 36, 38, 41, 42, 57, 58, 61, 66, 73, 211, 217, 218, 219, 224, 251, 259, 260, 261], "100": [23, 24, 27, 29, 33, 35, 37, 39, 47, 52, 53, 59, 60, 65, 66, 105, 114, 136, 168, 169, 170, 223, 224, 234], "25": [23, 24, 35, 36, 55, 57, 58, 66, 217, 218, 219, 223, 259, 260, 261], "trainingargu": [23, 24], "inherit": [23, 24, 50, 82], "hf": [23, 24, 25, 27, 29], "validate_everi": [23, 24], "everi": [23, 24, 68, 118, 168, 201, 234, 235, 236, 245], "truncat": [23, 24, 29, 47, 151, 152, 153, 154, 239], "highest": [23, 24, 51, 163], "affect": [23, 24, 63], "metric": [23, 24, 27, 29, 32, 35, 36, 41, 48, 49, 51, 52, 53, 55, 57, 65, 66, 80, 81, 84, 92, 115, 127, 128, 138, 143, 144, 163, 164, 226], "log_attention_weight": [23, 24], "attent": [23, 24, 25, 27, 29], "cycl": [23, 24], "cosine_with_warmup": [23, 24], "wave": [23, 24], "cosin": [23, 24, 226, 255], "schedul": [23, 24, 59, 118], "decreas": [23, 24, 53], "half": [23, 24], "experi": [23, 24, 29, 40, 51, 53, 55, 65, 66, 255], "organ": [23, 24, 33, 35, 36, 53], "job": [23, 24, 32, 33, 35, 36, 41, 51, 52, 55, 57, 61], "w": [23, 24, 29, 32, 35, 36, 42, 51, 52, 55, 60, 62, 93, 181], "tftrainingargu": 23, "tftrainer": 23, "respons": [23, 24, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 216], "configur": [23, 24, 26, 35, 36, 41, 42, 47, 48, 51, 52, 53, 55, 56, 57, 59, 60, 62, 78, 80, 85, 90, 96, 102, 104, 109, 110, 114, 115, 119, 144, 148, 207, 231], "hug": [23, 24], "face": [23, 24], "t4rec": [23, 24, 25, 29], "instanti": [23, 24, 26, 29, 38, 59, 94, 97, 105, 106, 119, 157, 168, 208, 209, 210, 212], "pretrainedmodel": [23, 24, 25], "input_featur": [23, 24], "task_weight": [23, 24, 135], "loss_reduct": [23, 24], "torch4rec": [23, 24], "One": [23, 24, 38, 40, 49, 50, 53, 59, 74, 168, 237, 255], "reduct": [23, 24, 78, 171, 174, 175, 177, 178, 179, 224, 237, 251], "taken": [23, 24, 36, 41, 48, 51, 65], "sum": [23, 24, 26, 28, 39, 40, 60, 85, 90, 97, 98, 101, 102, 103, 106, 134, 146, 148, 157, 168, 233, 237], "wrong": [23, 24], "attention_head_s": [23, 24], "64": [23, 24, 26, 27, 32, 35, 36, 41, 42, 43, 47, 52, 53, 55, 57, 59, 60, 61, 62, 86, 94, 95, 96, 97, 109, 112, 120, 121, 129, 165, 166, 169, 170], "attn_lay": [23, 24], "lsh": [23, 24], "axial_norm_std": [23, 24], "axial_pos_embd": [23, 24], "axial_pos_shap": [23, 24], "axial_pos_embds_dim": [23, 24], "192": [23, 24], "chunk_size_lm_head": [23, 24], "eos_token_id": [23, 24], "feed_forward_s": [23, 24], "512": [23, 24, 35, 38, 40, 55, 57, 60, 94, 129], "hash_se": [23, 24], "hidden_act": [23, 24], "relu": [23, 24, 25, 35, 36, 39, 40, 52, 53, 60, 94, 98, 120, 169, 170], "hidden_dropout_prob": [23, 24], "hidden_s": [23, 24, 29], "256": [23, 24, 52, 59, 60, 94, 96, 97, 129, 166], "initializer_rang": [23, 24], "02": [23, 24, 32, 39, 49, 55, 62, 217, 218, 219, 259, 260, 261], "is_decod": [23, 24], "layer_norm_ep": [23, 24], "local_num_chunks_befor": [23, 24], "local_num_chunks_aft": [23, 24], "local_attention_probs_dropout_prob": [23, 24], "local_attn_chunk_length": [23, 24], "lsh_attn_chunk_length": [23, 24], "lsh_attention_probs_dropout_prob": [23, 24], "lsh_num_chunks_befor": [23, 24], "lsh_num_chunks_aft": [23, 24], "max_position_embed": [23, 24], "4096": [23, 24], "num_attention_head": [23, 24], "num_bucket": [23, 24, 35, 38, 55, 59, 224, 234, 235], "num_hash": [23, 24], "pad_token_id": [23, 24], "vocab_s": [23, 24, 29], "320": [23, 24], "tie_word_embed": [23, 24], "use_cach": [23, 24], "classifier_dropout": [23, 24], "subclass": [23, 24, 25, 55, 72], "reform": [23, 24, 25], "d_model": [23, 24, 25, 27, 35, 36], "n_head": [23, 24, 25, 27, 35, 36], "n_layer": [23, 24, 25, 27, 35, 36], "total_seq_length": [23, 24, 25, 27], "gelu": [23, 24], "01": [23, 24, 33, 37, 40, 41, 52, 57, 59, 61, 62, 217, 218, 219, 259, 260, 261], "03": [23, 24, 38, 41, 52, 55, 57, 58, 60, 62, 66], "dropout": [23, 24, 25, 28, 35, 36, 40, 47, 51, 52, 53, 97, 98, 106, 120, 168], "axial_pos_shape_first_dim": [23, 24], "transformer_cfg_paramet": [23, 24], "axial": [23, 24], "posit": [23, 24, 26, 27, 29, 32, 35, 47, 50, 51, 53, 85, 86, 92, 93, 94, 111, 114, 136, 145, 149, 150, 151, 152, 171, 172, 174, 175, 177, 178, 179, 225, 255], "50257": [23, 24], "n_posit": [23, 24], "1024": [23, 24, 32, 40, 41, 53, 57, 60, 61], "n_embd": [23, 24], "768": [23, 24], "n_inner": [23, 24], "activation_funct": [23, 24], "gelu_new": [23, 24], "resid_pdrop": [23, 24], "embd_pdrop": [23, 24], "attn_pdrop": [23, 24], "layer_norm_epsilon": [23, 24], "summary_typ": [23, 24, 27], "cls_index": [23, 24, 27], "summary_use_proj": [23, 24], "summary_activ": [23, 24], "summary_proj_to_label": [23, 24], "summary_first_dropout": [23, 24], "scale_attn_weight": [23, 24], "bos_token_id": [23, 24], "50256": [23, 24], "scale_attn_by_inverse_layer_idx": [23, 24], "reorder_and_upcast_attn": [23, 24], "gpt2": [23, 24, 25], "attention_window": [23, 24], "sep_token_id": [23, 24], "30522": [23, 24], "num_hidden_lay": [23, 24], "intermediate_s": [23, 24], "3072": [23, 24], "attention_probs_dropout_prob": [23, 24], "type_vocab_s": [23, 24], "onnx_export": [23, 24], "embedding_s": [23, 24, 35, 38, 40, 55, 61], "128": [23, 24, 32, 35, 36, 39, 40, 47, 52, 53, 55, 57, 60, 61, 62, 125, 126, 167], "summary_last_dropout": [23, 24], "position_embedding_typ": [23, 24], "absolut": [23, 24], "30000": [23, 24], "num_hidden_group": [23, 24], "16384": [23, 24, 52], "inner_group_num": [23, 24], "classifier_dropout_prob": [23, 24], "32000": [23, 24], "24": [23, 24, 32, 35, 57, 58, 59, 60, 61, 66], "16": [23, 24, 32, 35, 36, 38, 39, 40, 41, 42, 49, 55, 57, 58, 62, 168, 177, 179, 217, 218, 219, 259, 260, 261], "d_inner": [23, 24], "ff_activ": [23, 24], "untie_r": [23, 24], "attn_typ": [23, 24], "bi": [23, 24, 255], "mem_len": [23, 24], "reuse_len": [23, 24], "use_mems_ev": [23, 24], "use_mems_train": [23, 24], "bi_data": [23, 24], "clamp_len": [23, 24], "same_length": [23, 24], "tanh": [23, 24, 53], "start_n_top": [23, 24], "end_n_top": [23, 24], "pair": [23, 24, 106, 111, 129, 131, 168, 190, 214, 226], "won": [23, 24, 36, 253], "especi": [23, 24], "long": [23, 24, 27, 50, 59], "awar": [23, 24], "benefit": [23, 24, 39, 47, 51], "50265": 23, "267735": [23, 24], "cutoff": [23, 24], "20000": [23, 24], "40000": [23, 24], "200000": [23, 24], "d_emb": [23, 24], "d_head": [23, 24], "div_val": [23, 24], "pre_lnorm": [23, 24], "18": [23, 24, 32, 33, 35, 36, 48, 49, 55, 57, 59, 65, 66, 218, 219, 260, 261], "1600": [23, 24], "1000": [23, 24, 60, 109, 168, 224], "proj_share_all_but_first": [23, 24], "sample_softmax": [23, 24], "adapt": [23, 24, 45, 118, 150, 169, 170, 179], "dropatt": [23, 24], "normal": [23, 24, 25, 26, 36, 38, 41, 50, 57, 59, 98, 100, 117, 120, 157, 169, 225, 253], "init_rang": [23, 24], "proj_init_std": [23, 24], "init_std": [23, 24], "buildableblock": [24, 25, 26, 27], "denseblock": [24, 25], "transformerprepar": [24, 25], "gpt2prepar": [24, 25], "prepare_modul": [24, 25], "inputblock": [24, 25, 26, 93, 113, 120, 129, 134, 155], "embeddingbagwrapp": [24, 26], "num_embed": [24, 26], "embedding_dim": [24, 26, 32, 53, 55, 57, 61, 95, 96, 97, 107, 112, 165, 166, 169], "max_norm": [24, 26], "norm_typ": [24, 26], "scale_grad_by_freq": [24, 26], "include_last_offset": [24, 26], "padding_idx": [24, 26, 27, 29, 148], "binaryclassificationprepareblock": [24, 27], "regressionprepareblock": [24, 27], "nextitempredictionprepareblock": [24, 27], "loguniformsampl": [24, 27], "get_log_uniform_distr": [24, 27], "get_unique_sampling_distr": [24, 27], "elementwisefeatureaggreg": [24, 28], "t4recdataload": [24, 29], "set_dataset": [24, 29], "pyarrowdataload": [24, 29], "batch_siz": [24, 27, 29, 32, 35, 36, 40, 41, 55, 57, 61, 67, 68, 69, 71, 75, 76, 85, 102, 104, 111, 119, 140, 145, 163, 189], "num_work": [24, 29, 75], "pin_memori": [24, 29, 75], "drop_last": [24, 29, 67, 69, 71, 75, 76, 119], "timeout": [24, 29, 68, 75], "sampler": [24, 29, 32, 75, 84, 92, 111, 114, 115, 125, 126, 136, 166, 167], "pin_memory_devic": [24, 29, 75], "prefetch_factor": [24, 29, 75], "dldataload": [24, 29], "merlindataload": [24, 29], "parquetdataset": [24, 29], "pad_seq_column_if_need": [24, 29], "shuffledataset": [24, 29], "to_core_schema": [24, 29], "list_fil": [24, 29], "visualize_respons": [24, 29], "fit_and_evalu": [24, 29], "wipe_memori": [24, 29], "random_data_from_schema": [24, 29], "outputsizemixin": [24, 25, 29], "lossmixin": [24, 29], "metricsmixin": [24, 29], "check_gpu": [24, 29], "get_output_sizes_from_schema": [24, 29], "calculate_batch_size_from_input_s": [24, 29], "check_input": [24, 29], "extract_topk": [24, 29], "create_output_placehold": [24, 29], "tranform_label_to_onehot": [24, 29], "nested_detach": [24, 29], "nested_concat": [24, 29], "torch_pad_and_concaten": [24, 29], "atleast_1d": [24, 29], "nested_numpifi": [24, 29], "nested_trunc": [24, 29], "numpy_pad_and_concaten": [24, 29], "one_hot_1d": [24, 29], "lambdamodul": [24, 29], "mappingtransformermask": [24, 29], "default_mask": [24, 29], "convbertconfig": [24, 29], "debertaconfig": [24, 29], "distilbertconfig": [24, 29], "megatronbertconfig": [24, 29], "mpnetconfig": [24, 29], "roformerconfig": [24, 29], "eval_on_last_item_seq_onli": [24, 29], "hide": 24, "scheme": [24, 27, 119], "box": [24, 35, 38, 52, 90, 134, 148, 157], "causal": [24, 25, 29], "lm": [24, 29], "clm": [24, 29, 255], "mlm": [24, 29, 150, 255], "permut": [24, 29], "plm": [24, 29], "rtd": [24, 29], "extend": [24, 25, 26, 29, 65, 66, 90, 134, 140, 148, 157, 163, 173, 176], "hidden": [24, 25, 26, 27, 29, 35, 170], "trainabl": [24, 26, 29, 35, 53, 101, 102, 103, 118, 145, 155], "vector": [24, 26, 29, 32, 33, 36, 41, 53, 84, 92, 93, 101, 102, 103, 114, 119, 120, 124, 125, 126, 145, 170, 255], "pad": [24, 26, 27, 29, 35, 101, 102, 136, 148, 168, 169, 170, 224, 239], "And": [24, 36, 40, 53], "mask_schema": [24, 29], "masked_target": 24, "flag": [24, 29, 32, 33, 34, 35, 36, 41, 42, 43, 49, 55, 57, 61, 80, 92, 111, 114, 144], "param": [24, 29, 92, 100, 102, 105, 109, 127, 145, 210], "maskingschema": [24, 29], "maskedtarget": 24, "interact": [24, 29, 32, 35, 41, 45, 46, 47, 50, 53, 60, 93, 97, 100, 106, 107, 110, 145, 168, 169, 227, 255], "learnabl": [24, 29], "project": [24, 26, 27, 29, 37, 40, 41, 52, 53, 80, 89, 91, 98, 112, 113, 121, 144], "input_s": [24, 25, 26, 27, 28, 29], "train_on_last_item_seq_onli": [24, 29], "past": [24, 29, 34, 45, 50, 52, 54], "mlm_probabl": [24, 29], "15": [24, 29, 32, 33, 38, 47, 55, 59, 60, 65, 217, 218, 219, 259, 260, 261], "info": [24, 29, 32, 33, 35, 36, 41, 53, 55, 57, 58, 59, 60, 61, 66], "visibl": [24, 29], "tri": [24, 29, 136], "probabl": [24, 27, 29, 35, 43, 49, 54, 57, 62, 80, 92, 136, 150, 255], "enforc": [24, 29, 38, 59, 140, 141, 150], "network": [24, 25, 27, 29, 32, 33, 35, 36, 37, 38, 39, 41, 47, 49, 50, 53, 57, 59, 61, 93, 94, 97, 101, 119, 155, 168, 169, 170, 172, 177, 178, 179, 255], "someth": [24, 29, 55], "plm_probabl": [24, 29], "16666666666666666": [24, 29], "max_span_length": [24, 29], "permute_al": [24, 29], "factor": [24, 29, 50, 53, 93, 95, 96, 97, 101, 102, 103, 106, 107, 124, 125, 126, 172, 251, 255], "self": [24, 25, 27, 29, 42, 92, 108, 114, 129, 190], "bidirect": [24, 29, 150], "span": [24, 29, 58, 59, 61], "surround": [24, 29], "unmask": [24, 29], "partial": [24, 29, 80, 128, 144], "sample_from_batch": [24, 29], "discrimin": [24, 29], "ask": [24, 29, 39], "classifi": [24, 29, 84, 92], "belong": [24, 29], "jointli": [24, 29, 224], "itemid_seq": [24, 29], "target_flat": [24, 29], "logit": [24, 27, 29, 35, 36, 80, 81, 84, 92, 97, 106, 114, 115, 125, 126, 127, 144, 166, 167, 168, 169, 170], "second": [24, 26, 29, 40, 57, 74], "fake": [24, 29], "electra": [24, 25, 29, 255], "max_seq_len": [24, 29], "flatten": [24, 29, 101], "pos_item": [24, 29], "whole": [24, 29, 50, 53, 251], "corpu": [24, 29, 111, 166, 167], "corrupted_input": [24, 29], "discriminator_label": [24, 29], "batch_upd": [24, 29], "score": [24, 29, 32, 33, 43, 45, 49, 50, 53, 62, 63, 92, 114, 138, 143, 163, 169, 171, 172, 174, 175, 177, 178, 179, 255], "top_k": [24, 27, 29, 33, 163, 164], "labels_onehot": 24, "hot": [24, 26, 29, 37, 38, 40, 44, 45, 50, 51, 53, 85, 97, 106, 112, 113, 119, 140, 141, 160, 168, 224], "pred": 24, "train_dataset_or_path": 24, "eval_dataset_or_path": 24, "test_dataset_or_path": 24, "train_dataload": 24, "eval_dataload": 24, "test_dataload": 24, "callback": [24, 32, 35, 36, 41, 55, 61, 70, 190], "trainercallback": 24, "incremental_log": 24, "sequti": 24, "setup": [24, 50, 53, 57], "increment": [24, 38], "ensur": [24, 28, 33, 35, 36, 38, 41, 49, 50, 52, 55, 62, 63, 65, 66, 120, 136, 202, 203, 233], "mani": [24, 35, 37, 40, 41, 45, 47, 50, 51, 53, 157, 255], "eval": [24, 36, 47, 49, 52, 53, 55, 57, 60, 145], "overlap": 24, "seen": [24, 50, 51, 185], "properli": [24, 50, 52], "tensorboard": [24, 53], "constructor": [24, 25, 158, 163], "train_dataset": [24, 38, 40, 55, 57, 59], "eval_dataset": 24, "test_dataset": 24, "reset": [24, 29, 35, 69], "lr": [24, 40, 41, 47, 51, 52, 53, 61, 98, 118], "import": [24, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 52, 57, 58, 59, 60, 61, 62, 63, 65, 66, 119, 129, 169, 170, 224, 255], "get_linear_schedule_with_warmup": 24, "decai": [24, 47, 53, 118], "num_training_step": 24, "static": [24, 25, 50, 78, 101, 102, 157], "num_warmup_step": 24, "num_cycl": 24, "unifi": 24, "obj": [24, 35, 36, 185, 194], "warm": [24, 60], "henc": [24, 65], "unset": 24, "hard": [24, 55], "restart": [24, 57], "return_output": 24, "three": [24, 53, 57], "ignore_kei": 24, "flexibl": [24, 113, 255], "unpack": 24, "exactli": [24, 29, 67], "descript": [24, 36], "metric_key_prefix": 24, "evalloopoutput": 24, "prediction_loop": 24, "accept": [24, 26, 27, 50, 53, 57, 85, 88, 102, 113, 129, 190, 232], "prefix": [24, 57, 195], "checkpoint_path": 24, "checkpoint": 24, "serial": [24, 35, 36, 41, 58, 61, 131, 253], "complet": [24, 34, 45, 48, 49, 54, 55, 57, 210], "nstep": 24, "mock": 24, "obtain": [24, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 52, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 203], "nn": [24, 25, 26, 27, 40], "idx": [24, 25], "built": [24, 25, 33, 35, 36, 47, 51, 54, 57, 111, 119, 135], "class_nam": [24, 25], "deal": [24, 25, 36, 47, 51], "neural": [24, 25, 32, 33, 35, 36, 37, 38, 39, 41, 49, 50, 53, 57, 59, 61, 97, 111, 166, 167, 168, 169, 170, 172, 177, 178, 179, 255], "manag": [24, 25, 32, 47, 51, 52, 65, 66, 111, 136, 140, 141, 150, 172, 178, 181, 190], "prediction_task_or_head": [24, 25], "attach": [24, 25], "neither": [24, 25], "nor": [24, 25, 36], "abc": [24, 25, 26, 29, 116, 191], "turn": [24, 38, 57, 155, 214], "shape_or_modul": [24, 25], "carri": [24, 25, 41], "activ": [24, 25, 27, 35, 36, 40, 50, 52, 53, 65, 66, 94, 97, 98, 101, 103, 119, 120, 146, 169, 170, 173, 176], "use_bia": [24, 25, 93, 94, 97, 98, 120, 169, 170], "filter_featur": [24, 25, 155], "perceptron": [24, 25, 32, 53, 120, 255], "stack": [24, 25, 26, 28, 41, 53, 83, 90, 93, 94, 98, 107, 133, 134, 148, 157], "bia": [24, 25, 40, 93, 98, 111, 120, 135, 139, 166, 167], "term": [24, 25, 47, 57, 93, 172], "dens": [24, 25, 29, 32, 39, 40, 41, 53, 60, 85, 94, 98, 101, 102, 109, 110, 119, 140, 141, 159, 168, 169, 170], "rate": [24, 25, 37, 38, 39, 40, 41, 43, 47, 50, 51, 53, 65, 66, 98, 118, 120, 132, 255], "input_shap": [24, 25, 77, 78, 80, 82, 83, 85, 86, 87, 90, 92, 99, 102, 104, 105, 107, 108, 109, 111, 114, 117, 123, 127, 134, 135, 138, 140, 141, 144, 145, 148, 151, 152, 155, 156, 157, 160, 162], "tabulardata": [24, 28, 29, 77, 85, 92, 108, 111, 114, 117, 134, 157], "class_or_str": [24, 29, 190, 191], "tabulartransformationtyp": [24, 26, 157], "replacement_prob": [24, 28, 156], "stochast": [24, 28, 118, 156], "swap": [24, 28], "nois": [24, 28], "input_mask": [24, 28, 156], "input_tensor": [24, 28, 156], "features_dim": [24, 28], "individu": [24, 28, 48, 51, 85, 106, 109, 110, 129], "feature_config": [24, 26, 28, 148], "dropout_r": [24, 28], "modeling_util": [24, 25], "configuration_util": [24, 25], "pretrainedconfig": [24, 25], "output_fn": [24, 25], "lambda": [24, 25, 29, 32, 35, 36, 38, 42, 50, 143, 190, 232, 245, 251], "transformerbodi": [24, 25], "modeling_gpt2": [24, 25], "gpt2model": [24, 25], "gtp2": [24, 25], "longform": [24, 25], "albert": [24, 25], "xlnet": [24, 25, 27, 35, 255], "rnn": [24, 25, 101, 255], "inputs_emb": [24, 25], "lookup": [24, 26, 36, 102, 103, 113, 132, 148], "embedding_dim_default": [24, 26, 95, 112, 165, 166, 168, 169], "infer_embedding_s": [24, 26, 32, 95, 112, 165, 166, 168, 169], "infer_embedding_sizes_multipli": [24, 26, 112, 165, 166, 169], "embeddings_initi": [24, 26, 101, 102, 103, 112, 124, 125, 126, 165, 166, 169], "automatic_build": [24, 26], "instantit": [24, 26, 29], "datasetschema": [24, 26, 28, 29, 90, 134, 148, 157], "default_embedding_dim": [24, 26], "default_soft_embedding_dim": [24, 26], "heurist": [24, 26, 53, 165, 166, 202, 253], "reason": [24, 26, 40, 47, 62, 165, 166, 236], "defaulttag": [24, 26], "layer_norm": [24, 26], "encapsul": [24, 26, 48], "soft": [24, 26], "techniqu": [24, 26, 32, 35, 36, 50, 53, 84, 92, 241, 251, 255], "arxiv": [24, 26, 84, 92, 94, 95, 96, 97, 118, 169, 170, 171, 172, 177, 178, 179], "pdf": [24, 26, 94, 95, 171], "1708": [24, 26], "00065": [24, 26], "nutshel": [24, 26, 111], "averag": [24, 26, 47, 50, 51, 53, 78, 83, 118, 133], "soft_embedding_cardin": [24, 26], "soft_embedding_cardinality_default": [24, 26], "soft_embedding_dim": [24, 26], "soft_embedding_dim_default": [24, 26], "weight_matrix": [24, 26], "2d": [24, 26, 32, 33, 55, 85, 102, 106, 113, 114, 140], "numpi": [24, 26, 33, 35, 36, 38, 41, 42, 49, 55, 57, 58, 59, 62, 65, 66, 199, 200, 241, 244, 251], "embedding_cardin": [24, 26], "reserv": [24, 26, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 136, 169, 170, 224], "x": [24, 26, 29, 36, 41, 42, 51, 57, 58, 59, 62, 72, 95, 145, 171, 172, 174, 175, 177, 178, 179, 190, 240, 251], "pretrained_output_dim": [24, 26], "sequence_combin": [24, 26, 35, 36, 101, 102, 103], "typic": [24, 26, 29, 46, 47, 50, 53, 78, 94, 95, 96, 101, 104, 114, 150, 157, 168, 224, 237, 251, 255], "embeddingoper": [24, 26, 36], "3d": [24, 26, 102, 113, 145], "tr": [24, 26, 27, 105], "pretrained_embedding_modul": [24, 26], "projection_modul": [24, 26], "text_embedding_modul": [24, 26], "blockormodul": [24, 26], "continuous_tag": [24, 26, 112], "categorical_tag": [24, 26, 112], "pretrained_embeddings_tag": [24, 26], "continuous_project": [24, 26, 27, 112], "continuous_soft_embed": [24, 26], "d_output": [24, 26], "tagstyp": [24, 26, 112], "concaten": [24, 26, 28, 29, 40, 41, 47, 53, 67, 68, 89, 91, 109, 112, 119, 168, 224, 237, 251, 255], "numer": [24, 26, 27, 39, 50, 57, 58, 89, 112, 118, 244], "space": [24, 26, 47, 50, 52, 58, 59, 66, 86, 168], "symbol": [24, 26, 148], "deviat": [24, 26, 38, 241], "bag": [24, 26], "sqrtn": [24, 26, 101, 102, 103], "mlp_layers_dim": [24, 26], "bodi": [24, 27, 57, 138], "tabularfeaturestyp": 24, "task_weight_dict": [24, 135, 139], "pop": [24, 108], "body_output": 24, "call_bodi": 24, "rtype": [24, 157], "head_weight": 24, "head_reduct": 24, "adam": [24, 32, 35, 36, 39, 40, 53, 55, 57, 94, 96, 97, 118, 125, 126, 129, 131, 166, 167, 168, 169, 170], "num_epoch": [24, 35, 36], "amp": 24, "verbos": [24, 42, 43, 49, 55, 57], "model_nam": [24, 42, 43, 57], "t4rec_model_class": 24, "f": [24, 32, 33, 35, 36, 38, 40, 41, 42, 48, 49, 55, 57, 59, 60, 62, 232, 245], "export_path": [24, 33, 35, 36, 41, 55, 63, 65, 66, 104, 207], "pkl": [24, 33, 55, 57, 62], "cloudpickl": 24, "o": [24, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 104, 253], "pickl": 24, "torchmetr": [24, 27], "target_nam": [24, 27, 29, 84, 86, 92, 115, 127, 128, 132, 138], "forward_to_prediction_fn": 24, "blocktyp": [24, 27, 100, 103, 112, 113, 151, 152, 153, 154], "summar": [24, 27, 35, 51, 138, 255], "bert": [24, 27, 145, 150, 255], "gpt": [24, 25, 27, 255], "attn": [24, 27], "Not": [24, 27, 53, 217, 218, 219, 224, 259, 260, 261], "output_nam": [24, 77, 109], "to_includ": [24, 108], "modules_to_merg": 24, "bceloss": [24, 27], "binaryprecis": [24, 27], "binaryrecal": [24, 27], "binaryaccuraci": [24, 27, 80], "input_modul": [24, 27], "concat": [24, 27, 29, 89, 90, 93, 113, 134, 148, 157, 168, 169], "transformer_config": [24, 27], "click": [24, 27, 32, 33, 39, 45, 47, 49, 50, 51, 52, 53, 55, 57, 59, 61, 62, 64, 109, 129, 132, 168, 255], "tm": [24, 27], "precis": [24, 27, 47, 61, 80], "recal": [24, 27, 61, 80], "accuraci": [24, 27, 47, 52, 53, 128], "f1score": [24, 27], "variabl": [24, 27, 32, 33, 35, 36, 47, 52, 55, 57, 58, 59, 73, 87, 101, 102, 104, 118, 119, 129, 145, 224, 251], "neg": [24, 27, 29, 35, 36, 41, 47, 50, 57, 65, 66, 67, 84, 86, 92, 111, 114, 115, 119, 125, 126, 136, 166, 167, 169, 170, 171, 172, 174, 175, 177, 178, 179, 225, 227, 232, 255], "python": [24, 27, 32, 33, 35, 36, 39, 41, 45, 47, 48, 50, 52, 53, 54, 55, 58, 60, 61, 80, 87, 101, 115, 129, 136, 144, 168, 208], "mseloss": [24, 27], "meansquarederror": [24, 27], "watch_tim": [24, 27], "crossentropyloss": [24, 27], "weight_ti": [24, 27], "softmax_temperatur": [24, 27], "target_dim": [24, 27], "sampled_softmax": [24, 27, 169, 170], "max_n_sampl": [24, 27], "nvidia": [24, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 103, 112, 113, 132, 217, 218, 219, 255, 256, 257, 259, 260, 261], "stabl": [24, 27, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 103, 112, 113, 132], "model_definit": [24, 27], "nlllo": [24, 27], "softmax": [24, 27, 33, 47, 53, 83, 92, 114, 121, 133, 136, 169, 170, 172, 173, 176], "temperatur": [24, 27, 33, 35, 36, 53, 83, 121, 133, 211], "reduc": [24, 27, 47, 51, 53, 60, 81, 84, 92, 98, 115, 119, 125, 126, 127, 166, 167, 168, 169, 170, 224, 234, 235, 237, 251, 255], "overconfid": [24, 27, 81, 84, 92, 115, 125, 126, 127, 166, 167, 169, 170], "regular": [24, 27, 47, 51, 93, 97, 101, 102, 103, 106, 120, 124, 125, 126, 155, 168, 172], "inp_tensor": [24, 27], "non_pad_mask": [24, 27], "often": [24, 38, 45, 53, 92, 111, 157, 255], "tabularaggregationtyp": [24, 103, 112, 113, 157], "merge_with": [24, 157], "tensorortabulardata": [24, 138, 157], "els": [24, 36, 42, 59, 157], "embeddings_dim": [24, 26, 47, 52, 53], "emb_initi": [24, 26], "input_numer": [24, 26], "smooth": [24, 50, 83, 121, 133, 251], "coss": 24, "entropi": 24, "go": [24, 32, 33, 38, 46, 47, 50, 52, 63, 65, 66, 101, 119], "recent": [24, 32, 53, 255], "version": [24, 27, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 93, 94, 113, 179, 217, 218, 219, 258, 259, 260, 261], "label_smooth": 24, "buildabl": 25, "in_featur": [25, 40], "out_featur": [25, 40], "fulli": [25, 60, 255], "batch_norm": [25, 98], "triangular": 25, "_weight": [26, 78], "embeddingbag": [26, 40], "1d": [26, 29, 53, 85], "reshap": [26, 35, 36, 39], "sigmoid": [27, 53, 57, 168], "squeez": 27, "min_id": [27, 136], "_nextitempredictiontask": 27, "ti": [27, 32, 33, 35, 36, 41, 55, 63, 65, 66], "max_id": [27, 136], "unique_sampl": 27, "n_samples_multiplier_before_uniqu": 27, "frequenc": [27, 47, 49, 53, 85, 92, 136, 224, 234], "assum": [27, 33, 52, 53, 56, 57, 61, 78, 86, 101, 119, 136, 190, 236], "decreasingli": [27, 136], "dist": [27, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 61, 62, 65, 66], "n_sampl": 27, "onc": [27, 32, 33, 35, 36, 38, 48, 57, 59, 65, 66, 119, 164, 189, 190, 227, 253], "trial": [27, 51, 52], "meant": [27, 46, 55, 104, 150, 224], "expm1": 27, "num_tri": 27, "log1p": 27, "multinomi": 27, "guarante": [27, 29, 55, 62, 67, 224], "increas": [27, 36, 53, 119], "chanc": [27, 51], "neg_sampl": 27, "drawn": 27, "true_prob": 27, "float32": [27, 29, 33, 35, 36, 38, 41, 42, 49, 50, 59, 61, 101, 114, 118, 200, 244, 251], "accord": [27, 47, 50, 53, 207], "choic": [27, 50, 51, 59, 255], "samp_log_prob": 27, "wise": [28, 38, 90, 98, 134, 148, 157, 224, 234, 235, 236], "correct": [28, 29, 33, 36, 43, 48, 55, 62, 92, 111, 115, 166, 167, 210], "helper": 29, "paths_or_dataset": [29, 119, 189], "cols_to_read": 29, "continuous_featur": [29, 50], "categorical_featur": [29, 35, 47, 50], "paquet": 29, "t_co": [29, 75], "3x": 29, "slower": 29, "collate_fn": [29, 75], "buffer_s": [29, 67, 119, 189], "reader_kwarg": [29, 119, 189], "seed_fn": [29, 67, 69, 71, 76, 119], "parts_per_chunk": [29, 67, 69, 71, 76, 119], "global_s": [29, 67, 69, 71, 76, 119], "global_rank": [29, 67, 69, 71, 76, 119], "row_groups_per_part": 29, "chunk": [29, 38, 67, 68, 119], "drop": [29, 32, 36, 37, 49, 62, 65, 66, 67, 228, 236, 251], "usual": [29, 40, 67, 136, 169, 170, 255], "fewer": [29, 67], "dictat": [29, 67, 119], "asynchron": [29, 39, 67, 119], "lead": [29, 47, 51, 53, 67, 118, 119, 168, 227], "better": [29, 38, 47, 50, 51, 52, 53, 67, 119, 121], "throughput": [29, 53, 67, 118, 119, 255], "list_featur": [29, 35], "06": [29, 32, 33, 35, 36, 38, 55, 58, 59, 60, 61, 68, 217, 218, 219, 258, 259, 260, 261], "parquet_fil": 29, "seq_features_len_pad_trim": 29, "iterabledataset": [29, 76], "t4rec_schema": 29, "startpath": 29, "print": [29, 32, 33, 35, 40, 42, 43, 49, 52, 55, 57, 59, 60, 62, 63, 181, 190, 224], "session_col": 29, "extract": [29, 36, 40, 50, 53, 58, 83, 121, 133, 149, 150, 151, 152, 153, 154], "sent": [29, 33, 47, 55, 57, 168], "tritoncli": [29, 35, 36, 42, 43, 49, 55, 57, 62, 63, 65, 66, 215], "grpc": [29, 35, 36, 42, 43, 49, 55, 62, 63, 65, 66, 215], "inferresult": 29, "start_time_index": 29, "end_time_index": 29, "input_dir": [29, 57], "window": 29, "fine": [29, 224], "tune": [29, 46], "indexed_by_time_metr": 29, "max_session_length": 29, "min_session_length": 29, "synthet": [29, 32, 53, 55, 57, 255], "__valu": [29, 140, 141], "__offset": [29, 140, 141], "mixin": 29, "val": [29, 42, 148, 214], "detach": 29, "even": [29, 32, 35, 36, 63], "latest": [29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 255], "new_tensor": 29, "padding_index": 29, "tensor1": 29, "tensor2": 29, "tensor_or_arrai": 29, "ndarrai": 29, "numpifi": 29, "array1": 29, "array2": 29, "num_class": 29, "covert": 29, "h": [29, 57], "set_default_tensor_typ": 29, "cuda": [29, 35, 36, 39, 40, 41, 55, 57, 59, 60, 61, 65, 66, 217, 218, 219, 259, 260, 261], "longtensor": 29, "lambda_fn": 29, "compon": [31, 36, 45, 49, 53, 55, 65, 66, 97, 106, 257], "ncg": 31, "catalog": [31, 32, 33, 34, 45, 53, 136, 169, 255], "com": [31, 33, 35, 45, 55, 57, 58, 257], "team": [31, 35, 52, 53], "plugin": 31, "toolkit": [31, 57], "referenc": [31, 36, 43, 63], "launch": [31, 33, 34, 52, 55, 57], "copyright": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "2023": [32, 33, 35, 36, 41, 49, 55], "corpor": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "licens": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "under": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 111, 171, 174, 175, 177, 178, 179], "apach": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "complianc": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "applic": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 109, 110, 118, 217, 218, 219, 259, 260, 261], "law": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "agre": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "softwar": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 258], "AS": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "basi": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 52, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "warranti": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "OR": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "condit": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 86, 87], "OF": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "express": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 50, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "impli": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "govern": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 50, 51, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "permiss": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "suitabl": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 49, 50, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66], "intend": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 69, 190], "modern": 32, "internet": 32, "catalyst": 32, "human": 32, "decis": [32, 208], "offlin": 32, "seamlessli": 32, "biggest": 32, "practition": 32, "lack": 32, "understand": [32, 51], "gap": 32, "simpl": [32, 37, 40, 53, 55, 111, 113, 132, 255], "readi": [32, 33, 35, 36, 41, 43, 47, 49, 52, 55, 59, 62, 63, 65, 66], "figur": [32, 33, 41, 51, 58, 255], "four": [32, 35, 51, 58, 59, 61, 66], "much": [32, 46, 50, 51, 57, 98], "realist": [32, 50], "closer": 32, "happen": [32, 53, 246, 253], "seri": [32, 33, 49, 213, 232], "showcas": [32, 51], "concept": [32, 41, 44, 45, 56, 57], "briefli": 32, "million": [32, 47, 50, 53], "thousand": [32, 53], "candid": [32, 33, 53, 63, 92, 126, 147, 163, 167, 169, 170, 255], "relev": [32, 33, 47, 50, 53, 111, 168, 244, 246, 255], "undesir": 32, "busi": [32, 55], "rule": [32, 119, 255], "although": [32, 37, 40, 57, 168], "skip": [32, 35, 36, 58, 65], "abl": [32, 33, 35, 36, 39, 40, 42, 47, 48, 53, 57, 59, 60, 65, 66, 168], "our": [32, 35, 36, 37, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 55, 57, 61, 62, 63, 64, 65, 66, 255, 257], "At": [32, 33, 43, 48, 59, 119, 255], "align": [32, 149, 150, 152], "listen": 32, "oldridg": 32, "talk": [32, 255], "kdd": 32, "21": [32, 35, 38, 39, 40, 55, 57, 217, 218, 219, 259, 260, 261], "blog": [32, 59, 255], "neighbour": 32, "ann": [32, 33, 45, 255], "faiss": [32, 34, 45, 57], "similar": [32, 34, 38, 39, 45, 50, 51, 54, 55, 59, 60, 226, 253, 255], "find": [32, 33, 34, 47, 51, 52, 53, 54, 60, 185], "releas": [32, 34, 38, 46, 54, 57, 119, 217, 218, 219, 258, 259, 260, 261], "31": [32, 33, 35, 42, 43, 57, 59, 168, 217, 218, 219, 259, 260, 261], "uncom": [32, 57], "uninstal": [32, 52, 57], "nvt": [32, 36, 37, 38, 39, 40, 41, 42, 43, 55, 57, 58, 59, 62, 65, 66, 119, 223, 224, 226, 227, 236, 240, 245, 251], "renam": [32, 35, 41, 61, 65], "dropna": 32, "lambdaop": [32, 35, 38], "categorifi": [32, 35, 36, 38, 50, 55, 57, 59, 65, 66, 136, 228, 234, 246, 253], "tagasuserfeatur": [32, 55, 57], "tagasuserid": [32, 38, 55, 57, 65], "tagasitemfeatur": [32, 55, 57], "tagasitemid": [32, 36, 38, 55, 57, 65], "addmetadata": [32, 55, 57, 59, 221, 222], "mm": [32, 35, 36, 41, 55, 57, 61, 63, 86, 92, 115, 167, 168], "ecommerc": [32, 35], "transform_aliccp": 32, "tf_gpu_alloc": [32, 35, 41, 47, 48, 49, 52, 53, 55, 61, 63], "cuda_malloc_async": [32, 35, 41, 47, 48, 49, 52, 53, 55, 61, 63], "29": [32, 33, 35, 36, 48, 49, 55, 57, 61, 65, 66, 217, 218, 219, 259, 260, 261], "19": [32, 33, 35, 57, 59, 169, 170, 217, 218, 219, 259, 260, 261], "49": [32, 217, 219, 259, 261], "32": [32, 33, 40, 41, 47, 52, 53, 55, 57, 58, 59, 61, 65, 109, 112, 113, 120, 121, 132, 168], "836544": 32, "cpu_feature_guard": [32, 33, 35, 36, 41, 49, 55, 57, 61], "cc": [32, 33, 35, 36, 41, 48, 49, 55, 57, 61, 65, 66], "194": [32, 33, 35, 36, 41, 49, 57, 61], "oneapi": [32, 33, 35, 36, 41, 49, 57, 61], "onednn": [32, 33, 35, 36, 41, 49, 57, 61], "instruct": [32, 33, 35, 36, 41, 43, 48, 49, 55, 57, 61, 65, 66], "critic": [32, 33, 35, 36, 41, 49, 55, 57, 61], "sse3": [32, 33, 35, 36, 41, 49, 55, 57, 61], "sse4": [32, 33, 35, 36, 41, 49, 55, 57, 61], "avx": [32, 33, 35, 36, 41, 49, 55, 57, 61], "rebuild": [32, 33, 35, 36, 41, 49, 55, 57, 61], "compil": [32, 33, 35, 36, 39, 41, 49, 55, 57, 60, 61, 94, 96, 97, 125, 126, 163, 166, 167, 168, 169, 170, 171, 174, 175, 177, 178, 179], "usr": [32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 61, 62, 65, 66], "lib": [32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 61, 62, 65, 66], "python3": [32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 61, 62, 65, 66], "py": [32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 52, 53, 55, 57, 58, 60, 61, 62, 65, 66], "43": [32, 33, 35, 36, 49, 55, 66, 219, 261], "userwarn": [32, 33, 35, 36, 38, 40, 49, 55, 57, 65, 66, 224], "did": [32, 33, 35, 36, 38, 40, 49, 55, 65, 66], "successfulli": [32, 33, 35, 36, 38, 40, 49, 55, 57, 190], "due": [32, 33, 35, 36, 38, 40, 49, 51, 55, 57, 119], "No": [32, 33, 35, 36, 38, 40, 41, 49, 55, 57], "exc": [32, 33, 35, 36, 38, 40, 49, 55], "msg": [32, 33, 35, 36, 38, 40, 49, 55, 190], "track": [32, 35, 36, 41, 52, 55], "data_structur": [32, 35, 36, 41, 55], "trackabl": [32, 35, 36, 41, 55], "delet": [32, 35, 36, 41, 55, 58], "11": [32, 35, 36, 41, 55, 57, 60, 61, 62, 217, 218, 219, 234, 239, 259, 260, 261], "sparse_operation_kit": [32, 35, 36, 55], "sok": [32, 35, 36, 55], "merlin_sok": [32, 35, 36, 55, 57], "py3": [32, 35, 36, 55, 57], "linux": [32, 35, 36, 55, 57], "x86_64": [32, 35, 36, 55, 57], "egg": [32, 35, 36, 55, 57], "libsok_experi": [32, 35, 36, 55], "37": [32, 33, 57, 60, 62], "094972": 32, "38": [32, 36, 57, 59, 62, 217, 259], "134481": 32, "common_runtim": [32, 33, 35, 36, 41, 55, 57, 61], "gpu_bfc_alloc": [32, 35, 36, 55], "orig_valu": [32, 35, 36, 55], "tf_force_gpu_allow_growth": [32, 35, 36, 55], "134526": 32, "gpu_devic": [32, 33, 35, 36, 41, 55, 57, 61], "1621": [32, 33, 35, 36], "localhost": [32, 33, 35, 36, 41, 42, 43, 49, 55, 57, 61, 62, 63, 65, 66], "replica": [32, 33, 35, 36, 41, 55, 57, 61], "24576": [32, 33, 35, 36, 41], "mb": [32, 33, 35, 36, 41, 55, 57, 61, 119], "quadro": [32, 33, 35, 36, 41, 55], "rtx": [32, 33, 35, 36, 41], "8000": [32, 33, 34, 35, 36, 41, 42, 43, 48, 49, 55, 65, 66], "pci": [32, 33, 35, 36, 41, 55, 57, 61], "bu": [32, 33, 35, 36, 41, 55, 57, 61], "0000": [32, 33, 35, 36, 41, 55, 57, 61], "00": [32, 33, 35, 36, 37, 40, 41, 55, 57, 59, 61, 65, 66, 217, 218, 219, 259, 260, 261], "capabl": [32, 33, 35, 36, 41, 45, 55, 57, 61], "135533": 32, "135562": 32, "tqdm": [32, 35, 38, 39, 40, 41, 42, 55, 65], "tqdmwarn": [32, 35, 38, 39, 40, 41, 42, 55, 65], "iprogress": [32, 35, 38, 39, 40, 41, 42, 55, 65], "ipywidget": [32, 35, 38, 39, 40, 41, 42, 55, 65], "readthedoc": [32, 35, 38, 39, 40, 41, 42, 55, 65], "user_instal": [32, 35, 38, 39, 40, 41, 42, 55, 65], "autonotebook": [32, 35, 38, 39, 40, 41, 42, 55, 65], "notebook_tqdm": [32, 35, 38, 39, 40, 41, 42, 55, 65], "finish": [32, 33, 35, 36, 48, 52, 55], "commun": [32, 33, 35, 36, 55, 57, 61, 255], "horovod": [32, 35, 36, 55], "everywher": 32, "mimick": [32, 55, 57], "ali": [32, 55, 57], "ccp": [32, 55, 57], "alibaba": [32, 55, 57], "repo": [32, 33], "data_fold": [32, 33, 55, 57], "workspac": [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 55, 57, 66], "dir": [32, 33, 58], "base_dir": [32, 33, 58, 59, 60, 62, 63], "generate_data": [32, 36, 55, 57], "100_000": [32, 36], "train_raw": 32, "valid_raw": 32, "aliccp": [32, 55, 57], "set_siz": [32, 55, 57], "get_aliccp": [32, 55, 57], "fed": [32, 40, 50, 53, 103, 167, 168, 255], "onto": [32, 41, 57, 253], "repositori": [32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 48, 49, 55, 56, 57, 60, 62, 63, 65, 66, 257], "customiz": 32, "infrastructur": [32, 255], "rm": [32, 39, 45, 47, 52, 54, 56, 60, 62], "rf": [32, 39, 60, 62, 208], "feast_repo": [32, 33], "cd": [32, 33, 47, 48, 50, 52, 53, 57], "1m": [32, 33], "32m": 32, "raid": [32, 33, 58, 59, 60, 61, 62, 63], "workshar": [32, 33], "0m": [32, 33, 57], "navig": [32, 34, 45, 54], "feature_repo": [32, 33], "folder": [32, 33, 35, 39, 46, 47, 48, 49, 52, 53, 54, 55, 58, 62], "demo": [32, 57], "feature_repo_path": 32, "join": [32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 49, 55, 57, 58, 59, 60, 61, 62, 63, 213, 236, 237], "example_repo": 32, "driver_stat": 32, "unique_rows_by_featur": 32, "user_featur": [32, 33, 50, 55, 57], "reset_index": [32, 49, 65], "artifici": [32, 169, 170, 171], "datetim": 32, "timestamp": [32, 37, 50, 227, 255], "creation": [32, 42, 43, 49, 55, 57, 212], "astyp": [32, 33, 35, 36, 38, 251], "datetime64": 32, "user_shop": [32, 33, 55, 57], "user_profil": [32, 33, 55, 57], "user_group": [32, 33, 55, 57], "user_gend": [32, 33, 53, 55, 57], "user_ag": [32, 33, 55, 57, 110, 255], "user_consumption_1": 32, "user_consumption_2": [32, 33, 55, 57], "user_is_occupi": [32, 33, 55, 57], "user_geographi": [32, 33, 55, 57], "user_intent": [32, 33, 55, 57], "user_brand": [32, 33, 55, 57], "user_categori": [32, 33, 55, 57], "590": 32, "171": 32, "293": 32, "50": [32, 33, 35, 36, 48, 49, 53, 55, 59, 65, 66, 73, 164, 217, 218, 219, 223, 234, 259, 260, 261], "300270": 32, "303330": 32, "item_featur": [32, 33, 50, 53, 55, 57], "item_categori": [32, 33, 55, 57, 110, 134, 168], "item_shop": [32, 33, 55, 57], "item_brand": [32, 33, 55, 57, 168], "item_intent": 32, "410715": 32, "412307": 32, "412": 32, "142": 32, "66": [32, 55], "824": 32, "284": 32, "132": [32, 57], "1236": 32, "426": 32, "197": [32, 66], "1648": 32, "568": 32, "263": 32, "processed_nvt": [32, 33], "notic": [32, 47, 51, 52], "miss": [32, 36, 50, 59, 168, 229, 230, 231, 239], "null": [32, 50, 57, 136, 169, 170, 224, 240], "entri": [32, 71, 76, 101, 102, 103, 112, 113, 201, 239], "might": [32, 36, 45, 47, 48, 50, 51, 52, 53, 57, 97, 102, 106, 111, 121, 132, 168, 253], "own": [32, 46, 47, 51, 52, 56, 57, 97, 106], "regist": [32, 36, 47, 90, 134, 148, 157, 163, 190], "user_id_raw": [32, 33], "item_id_raw": 32, "avoid": [32, 35, 36, 47, 48, 50, 53, 85, 110, 145, 224, 237, 251], "potenti": 32, "postfix": [32, 245], "_raw": 32, "col": [32, 35, 38, 43, 55, 58, 59, 62, 63, 65, 66, 251], "item_cat": 32, "subgraph_item": 32, "items_cat": 32, "subgraph_us": 32, "nvt_wkflow": 32, "nvt_workflow": [32, 33], "workflow_nam": 32, "visit": [32, 35, 36, 54, 55], "ipynb": [32, 33, 48, 55], "output_path2": 32, "train_tt": 32, "valid_tt": 32, "df": [32, 35, 36, 38, 42, 208, 209, 210, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 251, 252], "pbtxt": [32, 33, 42, 47, 55, 57, 62], "protobuf": [32, 57], "500mb": [32, 36], "model_tt": 32, "twotowermodel": [32, 167], "query_tow": [32, 33, 165, 166, 167], "no_activation_last_lay": [32, 35, 36, 120], "inbatchsampl": [32, 115, 125, 166], "embedding_opt": [32, 95, 96, 112, 165, 166, 169], "embeddingopt": [32, 95, 96, 112, 165, 166, 169], "run_eagerli": [32, 35, 36, 41, 55, 57, 61, 163], "categorical_crossentropi": [32, 35, 36, 84, 92, 115, 128, 166], "validation_data": [32, 35, 41, 55, 57, 61], "kera": [32, 35, 36, 39, 41, 45, 53, 55, 57, 60, 61, 63, 80, 81, 83, 84, 91, 92, 93, 98, 101, 102, 103, 104, 113, 118, 119, 127, 128, 129, 131, 133, 134, 138, 143, 144, 145, 147, 149, 150, 155, 163, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179], "initializers_v2": [32, 35, 36], "120": [32, 35, 36], "truncatednorm": [32, 35, 36], "unseed": [32, 35, 36], "275m": 32, "9538": 32, "recall_at_10": [32, 35, 36], "0101": 32, "ndcg_at_10": [32, 35, 36], "0067": 32, "regularization_loss": [32, 35, 36, 41, 55, 57, 61], "0000e": [32, 35, 36, 41, 55, 57, 61], "loss_batch": [32, 35, 36, 41, 55, 61], "8711": 32, "val_loss": [32, 41, 55, 57, 61], "9179": 32, "val_recall_at_10": 32, "0212": 32, "val_ndcg_at_10": 32, "0155": 32, "val_regularization_loss": [32, 41, 55, 57, 61], "val_loss_batch": [32, 41, 55, 61], "5806": [32, 35], "histori": [32, 35, 36, 41, 55, 61, 255], "0x7fd4b04139d0": 32, "later": [32, 35, 36, 38, 50, 53, 57, 62, 150, 217, 218, 219, 259, 260, 261], "deploy": [32, 35, 39, 46, 48, 49, 51, 55, 64, 255], "retrieval_block": 32, "query_block": [32, 100], "target_column": [32, 41, 55, 57, 251], "propos": [32, 41, 53, 83, 94, 95, 165, 166, 167, 168, 172, 177, 178, 179], "facebook": [32, 39, 57, 60, 61, 255], "2019": [32, 95, 96, 111, 150, 166, 167], "introduc": [32, 33, 50, 53, 106, 121, 150], "multilay": 32, "explicitli": [32, 53, 168], "architetctur": 32, "gh": 32, "dlrmmodel": [32, 45, 53, 55, 57, 61], "bottom_block": [32, 55, 57, 61, 95, 96], "top_block": [32, 55, 57, 61, 95, 96, 169, 170], "auc": [32, 41, 51, 52, 55, 57, 60, 61, 80], "305m": 32, "6932": [32, 55, 57], "5005": 32, "6931": [32, 55, 57], "val_auc": [32, 41, 55, 57, 61], "5029": 32, "0x7fd449398a30": 32, "cell": [32, 33, 35, 48, 55, 57, 230, 231], "predicttensorflow": [32, 33, 35, 36, 41, 55, 57, 63], "transformworkflow": [32, 33, 35, 36, 41, 55, 57, 63, 65, 66], "get_subworkflow": [32, 33, 253], "item_block": [32, 100], "item_embed": [32, 33], "fit_transform": [32, 35, 36, 65, 66, 253], "output_1": [32, 33], "453": 32, "945": 32, "012117806822061539": 32, "02241620607674122": 32, "454": 32, "948": 32, "455": 32, "956": 32, "456": [32, 36], "1437": 32, "457": 32, "1469": 32, "timedelta": 32, "entiti": [32, 33], "featureview": [32, 33], "valuetyp": 32, "infra": 32, "offline_stor": 32, "file_sourc": 32, "filesourc": 32, "timestamp_field": 32, "created_timestamp_column": 32, "value_typ": 32, "join_kei": 32, "user_features_view": 32, "ttl": 32, "onlin": [32, 36, 53, 57, 255], "close": [32, 51], "item_features_view": 32, "checkout": [32, 35], "seedir": [32, 33, 55], "satisfi": [32, 55, 57, 224], "natsort": [32, 55], "sd": [32, 33, 55], "style": [32, 33, 55], "itemlimit": [32, 33, 55], "depthlimit": [32, 33, 55], "exclude_fold": [32, 33, 55], "ipynb_checkpoint": [32, 33, 55], "readm": [32, 33, 49], "md": [32, 33, 43], "__pycache__": [32, 33], "cpython": [32, 62], "pyc": [32, 62], "test_workflow": [32, 33], "feature_stor": [32, 33], "yaml": [32, 33, 52], "ensembl": [32, 34, 35, 36, 41, 42, 43, 45, 49, 57, 214], "request": [32, 33, 42, 43, 45, 47, 49, 55, 61, 62, 63, 65, 66, 207, 215, 216, 237, 255], "point": [33, 39, 40, 57, 59, 118], "reach": 33, "queri": [33, 47, 49, 50, 57, 65, 66, 92, 100, 114, 115, 125, 126, 147, 163, 165, 166, 167, 170, 255], "feast": [33, 34, 45], "script": [33, 39, 42, 45, 46, 47, 48, 49, 51, 52, 62], "softmax_sampl": 33, "softmaxsampl": 33, "unroll_featur": 33, "unrollfeatur": 33, "send_triton_request": [33, 49], "orc_column_statistics_pb2": 33, "deprecationwarn": [33, 42, 43], "filedescriptor": 33, "unlink": 33, "descriptor": 33, "descriptor_pool": 33, "_descriptor": 33, "fielddescriptor": 33, "30": [33, 35, 42, 47, 50, 55, 57], "_integerstatist": 33, "56": [33, 60], "885234": 33, "tensor_shape_pb2": 33, "36": [33, 36, 55, 62], "_tensorshapeproto_dim": 33, "types_pb2": 33, "enumvaluedescriptor": 33, "27": [33, 57, 58, 59, 62, 66, 217, 218, 219, 259, 260, 261], "enumdescriptor": 33, "_datatyp": 33, "287": 33, "280": 33, "_serializeddtyp": 33, "resource_handle_pb2": 33, "39": [33, 36, 41, 62, 66, 218, 260], "merlinload": 33, "central": 33, "definit": [33, 55, 113], "tell": 33, "command": [33, 34, 35, 36, 39, 42, 43, 45, 47, 49, 52, 54, 55, 56, 57, 61, 62, 63, 65, 66], "direct": [33, 38], "view": [33, 34, 42, 45, 52, 54, 55, 86, 255, 258], "sqlite": 33, "online_stor": 33, "db": 33, "feast_repo_path": 33, "32muser_id": 33, "32mitem_id": 33, "32muser_featur": 33, "32mitem_featur": 33, "32mfeast_repo_item_featur": 33, "32mfeast_repo_user_featur": 33, "As": [33, 38, 39, 40, 47, 51, 52, 60, 62, 63, 83, 119, 255], "1995": [33, 37, 66], "2025": 33, "01t01": 33, "32m2": 33, "32m1995": 33, "32m2025": 33, "32msqlite": 33, "460": [33, 217, 218, 219, 259, 260, 261], "2521": 33, "27it": 33, "458": 33, "3335": 33, "12it": 33, "again": [33, 57, 68], "ran": [33, 49, 51], "isdir": [33, 59], "faiss_index": 33, "makedir": [33, 41, 58, 59], "faiss_index_path": 33, "retrieval_model_path": 33, "ranking_model_path": 33, "dlrm": [33, 39, 47, 51, 52, 54, 57, 60, 63, 95, 96, 134, 255], "queryfaiss": 33, "nearbi": 33, "setup_faiss": 33, "l2": [33, 36, 47, 53, 100, 101, 102, 103, 117, 124, 125, 126, 169], "distanc": [33, 50, 226], "embedding_column": [33, 42], "centroid": 33, "1248": 33, "featurestor": 33, "fetch": 33, "queryfeast": 33, "correctli": [33, 52, 55, 57], "tritonserv": [33, 35, 36, 42, 43, 48, 49, 55, 57, 62, 63, 65, 66, 207, 214], "user_attribut": 33, "from_feature_view": 33, "include_id": 33, "32m1": 33, "32m2023": 33, "51": [33, 35, 55, 57, 217, 218, 219, 259, 260, 261], "0it": 33, "user_subgraph": 33, "prevent": [33, 251], "claim": [33, 57, 119], "tf_util": [33, 35, 36], "configure_tensorflow": 33, "dlpack": [33, 119], "from_dlpack": 33, "dlcapsul": 33, "topk_retriev": 33, "topk": [33, 147, 163, 211, 255], "07": [33, 55, 65, 118, 217, 218, 219, 259, 260, 261], "269579": 33, "430459": 33, "431356": 33, "absl": [33, 35, 36, 41, 55, 57, 61], "untrac": [33, 35, 36, 41, 55, 57, 61], "restored_function_bodi": 33, "show": [33, 34, 35, 36, 37, 41, 42, 45, 48, 49, 52, 53, 54, 55, 56, 57, 59, 61, 65, 66], "52": [33, 35, 38, 40, 57, 58, 59, 217, 219, 234, 259, 261], "asset": [33, 35, 36, 41, 53, 55, 57, 61], "tmp": [33, 35, 36, 41, 52, 55, 57, 62], "tmpdalflmaz": 33, "item_attribut": 33, "candidate_id": [33, 147], "output_prefix": 33, "14": [33, 35, 55, 57, 58, 59, 62, 217, 218, 219, 259, 260, 261], "item_subgraph": 33, "unrol": [33, 213], "broadcast": [33, 82, 213, 236], "user_features_to_unrol": 33, "combined_featur": 33, "98": [33, 52, 55], "tmpqdd_jn5e": 33, "descend": [33, 211], "relevance_col": [33, 211], "binary_classification_task": [33, 57], "00000001": 33, "interpret": [33, 48, 55], "poc_ensembl": 33, "send": [33, 35, 36, 42, 43, 49, 55, 62, 63, 65, 66], "request_schema": [33, 43], "ens_config": 33, "node_config": 33, "ordered_id": 33, "ordered_scor": 33, "0_transformworkflowtriton": [33, 49, 55], "categori": [33, 35, 38, 50, 55, 57, 59, 62, 140, 141, 168, 224, 226, 251], "json": [33, 38, 39, 42, 43, 49, 55, 57, 60, 62], "1_predicttensorflowtriton": [33, 35, 36, 49, 55], "savedmodel": [33, 35, 36, 41, 55, 57, 61, 155], "fingerprint": [33, 55], "pb": [33, 55, 57], "keras_metadata": [33, 55, 57], "saved_model": [33, 35, 36, 53, 55, 57], "00000": [33, 55, 57], "00001": [33, 55, 57], "2_transformworkflowtriton": 33, "3_predicttensorflowtriton": 33, "executor_model": [33, 35, 36, 49, 55, 57, 63, 65, 66], "termin": [33, 34, 35, 36, 39, 45, 48, 49, 54, 55, 62, 65, 66, 119], "ensemble_export_path": [33, 48, 49, 65, 66], "previous": [33, 35, 36, 48, 49, 55, 62, 63, 65, 66], "statu": [33, 42, 43, 49, 55, 57, 59], "dispatch": [33, 35, 37, 38, 43, 55, 57, 62, 63], "make_df": 33, "arrai": [33, 35, 36, 42, 49, 71, 76, 107, 109, 110], "168": 33, "324": 33, "79": [33, 36, 57], "361": 33, "294": 33, "267": [33, 57], "289": 33, "397": 33, "189": [33, 36], "5016385": 33, "50176895": 33, "5017176": 33, "5024097": 33, "5018236": 33, "5018286": 33, "50162375": 33, "5015677": 33, "50175667": 33, "5014358": 33, "pull": [34, 45, 47, 52, 54, 57], "nvcr": [34, 47, 52, 54, 57], "nightli": 34, "8001": [34, 35, 36, 43, 48, 49, 55, 62, 63, 65, 66], "8002": [34, 35, 36, 48, 49, 55, 65, 66], "8888": [34, 45, 54, 56], "v": [34, 47, 52, 56, 57, 93], "ipc": [34, 45, 47, 52, 54, 56], "bin": [34, 45, 47, 50, 52, 53, 54, 56, 57, 109, 110, 168, 223], "bash": [34, 45, 47, 52, 54, 56, 57], "shell": [34, 45, 54, 57], "prompt": [34, 45, 52, 54], "2efa5b50b909": [34, 45, 54], "jupyterlab": [34, 45, 54], "lab": [34, 45, 54], "ip": [34, 43, 45, 54], "notebookapp": 34, "password": [34, 57], "Or": [34, 45, 54], "9b537d1fda9e4e9cadc673ba2a472e247deee69a6229ff8d": [34, 45, 54], "127": [34, 45, 54, 59, 66], "browser": [34, 45, 52, 54], "2022": [35, 36, 49, 57, 58, 59, 61, 63, 65, 66], "anda": [35, 36], "book": 35, "166": 35, "835": 35, "anonym": [35, 255], "hotel": [35, 50], "378": [35, 36], "667": 35, "trip": 35, "utrip_id": 35, "consecut": [35, 227], "itinerari": 35, "chronolog": [35, 36], "goal": [35, 36, 52, 55, 119, 255], "city_id": 35, "statement": 35, "get_lib": [35, 37, 38, 43, 55, 57, 62, 63], "get_book": 35, "alloc": [35, 41, 53, 55, 61, 73, 119], "timeit": 35, "input_data_dir": [35, 37, 38, 39, 40, 41, 42, 43, 58, 59, 61], "output_data_dir": [35, 36, 57, 58, 59, 60, 62, 65, 66], "697025": 35, "26": [35, 41, 55, 57, 58, 60, 61, 62, 217, 259], "988036": 35, "xla": [35, 36], "stream_executor": [35, 36, 41, 57, 65, 66], "cuda_gpu_executor": [35, 36, 41, 57, 65, 66], "998": [35, 36], "success": [35, 36, 41, 57, 65, 66, 190], "numa": [35, 36, 41, 57, 60, 65, 66], "sysf": [35, 36, 41, 57, 65, 66], "zero": [35, 36, 41, 57, 65, 66, 74, 93, 120, 128, 168, 244, 246], "988386": 35, "988518": 35, "28": [35, 55, 57, 66, 217, 218, 219, 259, 260, 261], "519868": 35, "520815": 35, "520999": 35, "521129": 35, "591345": 35, "591534": 35, "591665": 35, "591770": 35, "591778": 35, "gpu_process_st": [35, 41, 55, 61], "222": [35, 41, 61], "malloc": [35, 41, 55, 61], "async": [35, 41, 55, 61], "591860": 35, "149": 35, "compound": [35, 38, 57], "atom": [35, 38, 57], "0x7fe90a7fce80": 35, "0x7fe90a7f7820": 35, "vist": 35, "sever": [35, 36, 49, 65, 66, 245, 257], "destin": 35, "displai": [35, 39, 55, 60, 90], "read_csv": [35, 36, 37, 226], "train_set": 35, "parse_d": 35, "checkin": 35, "device_class": 35, "affiliate_id": 35, "1000027": 35, "2016": [35, 84, 92, 168, 169, 170, 177, 179], "13": [35, 36, 55, 57, 58, 59, 60, 61, 66, 217, 218, 219, 259, 260, 261], "8183": 35, "desktop": 35, "7168": 35, "15626": 35, "60902": 35, "30628": 35, "253": 35, "1000033": 35, "04": [35, 37, 42, 52, 55, 58, 61, 92, 114, 217, 218, 219, 259, 260, 261], "09": [35, 52, 55, 57, 58, 65, 171, 217, 218, 219, 259, 260, 261], "38677": 35, "mobil": 35, "359": 35, "booker_countri": 35, "hotel_countri": 35, "elbonia": 35, "gondal": 35, "1000027_1": 35, "cobra": 35, "island": 35, "1000033_1": 35, "attempt": [35, 57, 119], "hop": 35, "journei": [35, 36], "thank": 35, "trim": 35, "effect": [35, 211], "discard": [35, 85], "shorter": 35, "sens": [35, 51, 53], "begin": [35, 36, 55, 65, 66, 258], "along": [35, 36, 41, 65, 66, 89, 104, 112, 117, 237], "frac": 35, "len": [35, 36, 37, 57, 59, 226], "217686": 35, "assign": [35, 38, 50, 53, 129, 149, 150, 251], "furthermor": 35, "proper": 35, "citi": [35, 50, 168], "from_panda": 35, "groupbi": [35, 36, 224, 237, 251], "train_set_utrip_id": 35, "validation_set_utrip_id": 35, "isin": 35, "validation_set": 35, "too": [35, 38, 114], "short": 35, "schema_select_by_tag": 35, "addtag": [35, 38, 66, 247, 248, 249, 250], "train_set_dataset": 35, "validation_set_dataset": 35, "weekday_checkin": 35, "to_datetim": 35, "dt": 35, "weekdai": 35, "weekday_checkout": 35, "groupby_featur": [35, 36, 233, 237], "groupby_col": [35, 36, 233], "agg": [35, 36, 233], "sort_col": [35, 36, 233], "city_id_list": 35, "booker_country_list": 35, "hotel_country_list": 35, "weekday_checkin_list": 35, "weekday_checkout_list": 35, "minimum_session_length": [35, 36], "city_id_count": 35, "filtered_sess": [35, 36], "wf": [35, 36], "train_process": 35, "validation_process": 35, "8238": 35, "156": [35, 36], "2278": 35, "2097": 35, "63": 35, "1160": 35, "87": [35, 57], "618": 35, "1050": 35, "65": [35, 57], "1032": 35, "757": 35, "140": [35, 47], "3603": 35, "262": [35, 66], "662": 35, "250": 35, "seq_schema": 35, "freq_threshold": [35, 38, 55, 66, 224], "max_siz": [35, 38, 55, 59, 224], "start_index": [35, 38], "cat_path": [35, 38, 55], "element_typ": [35, 38, 49, 55], "lt": [35, 38, 49, 55, 217, 218, 219, 259, 260, 261], "elementtyp": [35, 38, 49, 55], "37202": 35, "37203": 35, "195": 35, "variou": [35, 62], "hyperparamet": [35, 46, 53, 57, 61], "portion": 35, "masking_prob": [35, 36, 150], "timestep": [35, 82], "sequencemaskrandom": [35, 36, 145, 149], "huggingfac": [35, 255], "dummi": [35, 145], "leakag": [35, 145], "inputblockv2": [35, 36, 86, 94, 97, 106, 134, 168], "xlnetblock": [35, 36], "categoricaloutput": [35, 36, 132], "sequencemasklast": [35, 150], "dmodel": [35, 36], "48": [35, 39, 58], "mlp_block": [35, 36], "transformer_block": [35, 36], "44": [35, 49, 219, 261], "034041": 35, "cuda_dnn": [35, 36], "428": [35, 36], "cudnn": [35, 36, 60, 217, 218, 219, 259, 260, 261], "8700": [35, 36], "gradient": [35, 36, 118, 208], "mask_emb": [35, 36], "layer_": [35, 36], "_0": [35, 36, 55], "rel_attn": [35, 36], "r_s_bia": [35, 36], "seg_emb": [35, 36], "_1": [35, 36], "forget": [35, 36, 57], "54": [35, 57, 61], "541024": 35, "grappler": [35, 36], "loop_optim": [35, 36], "907": [35, 36], "loop": [35, 36, 38, 59], "xl_net_block": [35, 36], "sequential_block_5": 35, "replace_masked_embed": [35, 36], "raggedwher": [35, 36], "assertguard": [35, 36], "branch_execut": [35, 36], "_95": [35, 36], "2720": [35, 60], "81": 35, "25m": [35, 37, 40, 41], "3315": 35, "1973": 35, "mrr_at_10": [35, 36], "0863": 35, "1123": 35, "map_at_10": [35, 36], "precision_at_10": [35, 36], "0197": 35, "3306": 35, "70": [35, 57, 65, 234], "0979": 35, "3633": 35, "1707": 35, "2161": 35, "0363": 35, "0950": 35, "71": [35, 40], "26m": 35, "5827": 35, "4306": 35, "2056": 35, "2588": 35, "0431": 35, "72": 35, "3211": 35, "4627": 35, "2213": 35, "2784": 35, "0463": 35, "3194": 35, "1920": 35, "4787": 35, "2306": 35, "2892": 35, "0479": 35, "1903": 35, "0x7fe67105a7f0": 35, "But": [35, 36, 51, 53, 85], "realiti": 35, "care": [35, 41, 48], "mimic": [35, 150], "scenario": [35, 53], "measur": [35, 38, 241], "return_dict": [35, 61], "968982": 35, "_74": 35, "340": 35, "20m": [35, 57], "7151": 35, "5533": 35, "3083": 35, "3665": 35, "0553": 35, "7149": 35, "715089797973633": 35, "5533444881439209": 35, "30831339955329895": 35, "36654922366142273": 35, "055334459990262985": 35, "635858535766602": 35, "deliv": [35, 48, 49], "fast": [35, 38, 48, 49], "ai": [35, 48, 49, 52, 53, 55], "inf_op": [35, 65, 66], "tfsharedembed": [35, 36], "_feature_shap": [35, 36], "_feature_dtyp": [35, 36], "model_context_layer_call_fn": [35, 36, 41, 55, 57, 61], "model_context_layer_call_and_return_conditional_loss": [35, 36, 41, 55, 57, 61], "sequence_mask_random_layer_call_fn": [35, 36], "sequence_mask_random_layer_call_and_return_conditional_loss": [35, 36], "sequence_mask_last_layer_call_fn": 35, "108": [35, 59], "tmp1sakw940": 35, "101": [35, 36, 224], "custommaskwarn": [35, 36], "get_config": [35, 36, 77, 78, 80, 82, 83, 84, 85, 86, 87, 90, 92, 99, 102, 104, 108, 109, 111, 114, 115, 123, 127, 129, 131, 134, 135, 136, 138, 140, 141, 144, 147, 148, 150, 155, 156, 157, 158, 164], "custom_object": [35, 36, 83, 100, 104, 134, 147, 155, 212], "serialize_keras_object": [35, 36], "maybe_valu": [35, 36], "288": [35, 36], "legaci": [35, 36, 41, 118, 129, 168], "layer_seri": [35, 36], "134": [35, 36], "manual": [35, 36, 41, 55, 57, 103, 112, 113, 132, 173, 176], "downstream": 35, "wait": [35, 36, 37, 48, 49, 55, 65, 66, 68], "until": [35, 36, 48, 49, 52, 55, 65, 66, 253], "i0414": [35, 36, 48, 49, 55, 65, 66], "741833": [35, 36, 48, 49, 55, 65, 66], "4067": [35, 36, 48, 49, 55, 65, 66], "grpc_server": [35, 36, 48, 49, 55, 65, 66], "4421": [35, 36, 48, 49, 55, 65, 66], "grpcinferenceservic": [35, 36, 48, 49, 55, 65, 66], "742197": [35, 36, 48, 49, 55, 65, 66], "http_server": [35, 36, 48, 49, 55, 65, 66], "3113": [35, 36, 48, 49, 55, 65, 66], "httpservic": [35, 36, 48, 49, 55, 65, 66], "783470": [35, 36, 48, 49, 55, 65, 66], "178": [35, 36, 48, 49, 55, 65, 66], "servic": [35, 36, 48, 49, 50, 53, 55, 65, 66], "subsequent": [35, 36], "stop": [35, 40, 68, 69], "convert_df_to_triton_input": [35, 36, 43, 55, 57, 62, 63, 65, 66], "iloc": [35, 36, 42, 49], "grpcclient": [35, 36, 43, 49, 55, 62, 63, 65, 66, 215], "inferenceservercli": [35, 36, 42, 43, 49, 55, 57, 62, 63, 65, 66], "as_numpi": [35, 36, 42, 43, 55, 57, 63, 65, 66], "categorical_output": [35, 36, 132], "8206294": 35, "3849059": 35, "9042726": 35, "851537": 35, "4237087": 35, "73849726": 35, "goe": [35, 36], "deeper": [35, 36], "cover": [35, 36], "ty": [35, 36, 84, 92], "fashion": [35, 36, 255], "commerc": [35, 36, 50, 53, 255], "chose": 36, "sigir": 36, "ecom": 36, "2021": [36, 37, 38, 39, 40, 41, 42, 55, 58, 59, 60, 61, 62, 94], "36m": 36, "event": [36, 50, 51, 53], "brows": 36, "action": 36, "22": [36, 37, 38, 39, 40, 41, 42, 57, 65, 66, 113, 258], "58": [36, 57], "667322": 36, "026020": 36, "026445": 36, "026622": 36, "place": [36, 47, 59], "alongsid": 36, "sigir_dataset": 36, "run_on_synthetic_data": 36, "nan": [36, 38, 50, 224], "browsing_train": 36, "sku": 36, "sku_to_cont": 36, "description_vector": 36, "image_vector": 36, "counterpart": 36, "product_sku_hash": 36, "essenti": 36, "piec": 36, "sure": [36, 38, 48, 57, 59, 233], "addition": [36, 41, 56], "session_id_hash": 36, "arrang": 36, "industri": 36, "consult": [36, 39, 40, 65, 66], "retain": 36, "cat_op": 36, "event_typ": 36, "product_act": 36, "hashed_url": 36, "server_timestamp_epoch_m": 36, "normalizeminmax": 36, "hashed_url_count": 36, "longer": 36, "product_sku_hash_list": 36, "event_type_list": 36, "product_action_list": 36, "hashed_url_list": 36, "train_transform": [36, 65, 66], "coupl": 36, "578": 36, "972": 36, "420": 36, "328": 36, "126": 36, "233": 36, "925": 36, "410": 36, "766": 36, "955": 36, "745": 36, "210": 36, "940": 36, "688": 36, "986": 36, "524": 36, "425": 36, "298": 36, "304": [36, 217, 218, 219, 259, 260, 261], "393": 36, "697": 36, "706": 36, "313": 36, "834": 36, "83": [36, 57, 58, 217, 259], "502": 36, "221": 36, "915": 36, "658": 36, "802": 36, "180": [36, 51, 66], "580": 36, "702": 36, "339": 36, "645": 36, "436": 36, "358": 36, "84": [36, 66, 217, 218, 219, 259, 260, 261], "35": [36, 57, 58, 218, 260], "271": 36, "562": [36, 60], "498": [36, 57], "172": 36, "239": 36, "270": 36, "215": 36, "489": [36, 57], "278": 36, "153": 36, "717": 36, "540": [36, 60], "219": 36, "200": [36, 39, 42, 43, 49, 51, 52, 55, 57], "169": [36, 57], "419": 36, "875": 36, "725": 36, "926": 36, "770": 36, "160": [36, 39], "554": 36, "763": 36, "922": 36, "914": 36, "592": [36, 57], "842": 36, "916": 36, "137": 36, "928": 36, "615": 36, "318": 36, "506": 36, "281": 36, "191": [36, 49, 55], "480": 36, "965": 36, "399": 36, "761": 36, "grab": [36, 71, 76], "category_hash": 36, "price_bucket": 36, "07939800762120258": 36, "3465797761609977": 36, "186690": 36, "4275482879608162": 36, "30569476366666": 36, "1440": 36, "951997": 36, "31035419787213536": 36, "18070481533058008": 36, "973384": 36, "31319783485940356": 36, "11623980504981396": 36, "138": 36, "146260": 36, "25091279302969943": 36, "33473442518442525": 36, "119": 36, "808252": 36, "wf_sku": 36, "skus_d": 36, "836": 36, "979": 36, "469": 36, "118": 36, "emebed": 36, "know": [36, 55, 59, 63], "07939801": 36, "34657978": 36, "38269496": 36, "56307004": 36, "10142923": 36, "03702352": 36, "11606304": 36, "10070879": 36, "21879928": 36, "06107687": 36, "20743195": 36, "01330719": 36, "60182867": 36, "0920322": 36, "2648726": 36, "56061561": 36, "48643498": 36, "39045152": 36, "40012162": 36, "09153962": 36, "38351605": 36, "57134731": 36, "59986226": 36, "40321368": 36, "32984972": 36, "37559494": 36, "1554353": 36, "0413067": 36, "33814398": 36, "30678041": 36, "24001132": 36, "42737922": 36, "41554601": 36, "40451691": 36, "50428902": 36, "2004803": 36, "38297056": 36, "06580838": 36, "48285745": 36, "51406472": 36, "02268894": 36, "36343324": 36, "32497967": 36, "29736346": 36, "00538915": 36, "12329302": 36, "04998194": 36, "27843002": 36, "20212714": 36, "39019503": 36, "hardwar": [36, 41, 59], "eas": 36, "broad": [36, 53], "lot": [36, 58], "permit": 36, "significantli": [36, 255], "embedding_oper": 36, "id_lookup_t": 36, "lookup_kei": 36, "embedding_nam": 36, "product_embed": 36, "835162": 36, "836068": 36, "836268": 36, "836425": 36, "836673": 36, "836849": 36, "837009": 36, "837114": 36, "837130": 36, "insruct": 36, "sample_batch": 36, "include_target": 36, "prepare_featur": 36, "dict_kei": 36, "input_block": [36, 94, 97], "pretrained_embed": [36, 113], "pretrainedembed": [36, 113], "output_dim": 36, "amen": 36, "subsequ": [36, 41, 49, 68, 101], "everyth": [36, 41], "input_batch": 36, "remain": [36, 56, 58, 59, 65, 66, 224], "itself": [36, 104, 119, 190, 215, 216, 237], "950175": 36, "59": 36, "285571": 36, "sequential_block_7": 36, "9800": 36, "0106": 36, "0033": 36, "0050": 36, "0011": 36, "9689": 36, "34": [36, 57], "9591": 36, "0031": 36, "0048": 36, "9363": 36, "9471": 36, "0107": 36, "0028": 36, "0046": 36, "9206": 36, "9398": 36, "0103": 36, "0030": 36, "0047": 36, "0010": 36, "9015": 36, "9375": 36, "0104": 36, "9095": 36, "0x7f55081d17c0": 36, "inference_oper": 36, "prepare_list_features_1_layer_call_fn": 36, "110": [36, 57], "tmpi3g8g7q7": 36, "five": 36, "2332087": 36, "1218574": 36, "390479": 36, "7735352": 36, "1954267": 36, "34523243": 36, "arriv": 36, "predicted_hashed_url_id": 36, "argmax": 36, "academ": [37, 40, 41, 44, 45], "public": [37, 40, 41, 44, 45, 46, 58, 61, 255], "movi": [37, 38, 40, 41, 43, 65, 66], "62": [37, 38, 40, 41, 217, 218, 219, 259, 260, 261], "000": [37, 40, 41], "162": [37, 40, 41, 55], "genr": [37, 38, 39, 40, 41, 42, 66], "art": [37, 40], "download_fil": [37, 58], "df_lib": [37, 38, 43, 55, 57, 62, 63], "expandus": [37, 38, 39, 40, 41, 42, 43], "unzip": [37, 66], "grouplen": 37, "ml": [37, 48, 52, 54, 55, 57, 65, 66, 98, 109, 112, 120, 129, 131, 168], "zip": [37, 47, 50, 57, 66, 226], "262mb": 37, "18mb": 37, "00file": 37, "movieid": [37, 38, 39, 40, 41, 42, 43, 65, 66], "titl": [37, 66], "toi": [37, 38, 66, 224], "stori": [37, 38, 66], "adventur": [37, 38], "anim": [37, 38], "children": [37, 38], "comedi": [37, 38], "fantasi": [37, 38], "jumanji": [37, 38], "grumpier": 37, "men": 37, "romanc": [37, 38], "exhal": 37, "drama": [37, 38], "father": [37, 38], "bride": [37, 38], "ii": [37, 38], "movies_convert": [37, 38], "userid": [37, 38, 39, 40, 41, 42, 43, 65, 66, 224, 227], "296": 37, "1147880044": 37, "306": 37, "1147868817": 37, "307": 37, "1147868828": 37, "665": 37, "1147878820": 37, "899": 37, "1147868510": 37, "train_df": 37, "num_valid": 37, "c": [38, 39, 52, 57, 58, 59, 60, 62, 155, 171, 224], "frequent": [38, 50, 51, 224], "ones": [38, 50, 51, 94, 96, 97, 111, 136, 140, 141, 168, 226, 255], "howev": [38, 63, 65, 66, 118, 217, 218, 219, 224, 237, 251, 255, 259, 260, 261], "datapoint": [38, 40], "v0": [38, 258], "familiar": [38, 44, 45, 56, 57, 59, 60, 61], "joinextern": 38, "shutil": [38, 59], "columngroup": 38, "overload": 38, "op1": 38, "op2": 38, "sound": 38, "complic": 38, "road": 38, "categorical_column": [38, 42, 59, 224], "label_column": [38, 42, 55, 57, 59, 62, 63, 207, 214, 251], "acycl": 38, "visual": [38, 52, 255], "graphviz": 38, "contigu": [38, 50, 53, 59, 234], "fulfil": 38, "cat_featur": [38, 59, 224, 253], "int8": [38, 39, 41, 49, 251], "account": [38, 51, 52, 53, 57, 69], "manifest": 38, "solv": [38, 255], "break": 38, "hood": 38, "decomposit": 38, "lazili": 38, "couldn": [38, 57, 59, 92], "give": [38, 40, 41, 47, 55, 57, 59, 86, 121, 168, 255], "dict_dtyp": [38, 59], "valid_dataset": [38, 55, 57, 59], "ll": [38, 55, 59, 61], "scikit": [38, 208], "148": [38, 57, 60], "692": 38, "m": [38, 40, 42, 43, 47, 50, 52, 53, 57, 59], "sy": [38, 40, 42, 43, 55, 57, 58, 59, 61], "354": 38, "wall": [38, 40, 42, 43, 55, 58, 59, 61], "0x7fb2d7fc42b0": 38, "clean": [38, 59, 60], "rmtree": [38, 59], "_metadata": [38, 55], "speed": [38, 39, 40, 59, 60], "86": [38, 43, 65], "\u00b5": 38, "restor": [38, 59], "162541": 38, "162542": [38, 39, 40, 42], "56658": 38, "56659": [38, 40], "glob": [38, 40, 41, 58, 61, 62, 63, 119], "train_path": [38, 40, 55, 57, 59, 253], "valid_path": [38, 40, 55, 57, 59, 253], "part_0": [38, 42, 55, 61], "1691": [38, 40], "332": [38, 40], "1001": [38, 40], "154": [38, 40], "967": [38, 40], "245": [38, 40], "150851": 38, "622": 38, "39553": 38, "1146": 38, "basic": [39, 44, 45, 50, 51, 52, 56, 57, 237], "adopt": 39, "ctr": [39, 50, 60, 97], "experienc": [39, 60], "dgx": [39, 60, 217, 218, 219, 259, 260, 261], "a100": [39, 59, 60, 217, 218, 219, 259, 260, 261], "prove": [39, 60], "fastest": [39, 60], "commerci": [39, 60], "dcn": [39, 41, 47, 51, 60, 93, 94, 255], "deepfm": [39, 47, 51, 60, 97], "profici": 39, "oversubscrib": 39, "prefetch": 39, "multithread": 39, "model_dir": [39, 41, 42, 57], "movielens_hugectr": [39, 42], "mkdir": [39, 59, 60], "commandlin": [39, 60], "train_hugectr": 39, "afterward": [39, 59, 62, 63], "writefil": [39, 57], "get_embedding_s": [39, 224, 234], "mpi4pi": [39, 60], "mpi": [39, 60], "solver": [39, 60], "createsolv": [39, 60], "vvgpu": [39, 60], "batchsiz": [39, 60], "2048": 39, "batchsize_ev": [39, 60], "max_eval_batch": [39, 60], "i64_input_kei": [39, 60], "use_mixed_precis": [39, 60], "repeat_dataset": [39, 60], "createoptim": [39, 60], "optimizer_typ": [39, 60], "optimizer_t": [39, 60], "reader": [39, 56, 57, 59, 60, 189], "datareaderparam": [39, 60], "data_reader_typ": [39, 60], "datareadertype_t": [39, 60], "_file_list": [39, 55, 60], "txt": [39, 47, 52, 55, 60], "eval_sourc": [39, 60], "check_typ": [39, 60], "check_t": [39, 60], "slot_size_arrai": [39, 60], "56586": 39, "label_dim": [39, 42, 60], "dense_dim": [39, 60], "dense_nam": [39, 60], "data_reader_sparse_param_arrai": [39, 60], "datareadersparseparam": [39, 60], "data1": [39, 60], "nnz_per_slot": 39, "is_fixed_length": 39, "slot_num": 39, "sparseembed": [39, 60], "embedding_typ": [39, 60], "embedding_t": [39, 60], "localizedslotsparseembeddinghash": [39, 60], "workspace_size_per_gpu_in_mb": [39, 60], "embedding_vec_s": [39, 60], "sparse_embedding_nam": [39, 60], "sparse_embedding1": [39, 60], "bottom_nam": [39, 60], "denselay": [39, 60], "layer_typ": [39, 60], "layer_t": [39, 60], "top_nam": [39, 60], "reshape1": 39, "leading_dim": 39, "innerproduct": [39, 60], "fc1": [39, 60], "num_output": [39, 60], "relu1": [39, 60], "fc2": [39, 60], "relu2": [39, 60], "fc3": [39, 60], "binarycrossentropyloss": [39, 60], "summari": [39, 60, 172, 256], "max_it": [39, 60], "2000": 39, "eval_interv": [39, 60], "snapshot": [39, 60, 62], "1900": 39, "graph_to_json": [39, 60], "graph_config_fil": [39, 60], "overwrit": [39, 57, 157, 190], "0_opt_sparse_1900": 39, "_dense_1900": [39, 42], "_opt_dense_1900": 39, "0_sparse_1900": [39, 42], "emb_vector": [39, 62], "slot_id": [39, 62], "mv": [39, 62], "observ": [40, 51, 53, 111], "bottleneck": 40, "nativ": 40, "tutori": [40, 47, 51, 52, 65, 66, 171, 174, 175, 177, 178, 179], "explain": [40, 41, 48, 50, 51, 52, 53, 61, 255], "gc": 40, "framework_util": 40, "process_epoch": 40, "recogn": 40, "accordingli": [40, 50, 53, 103, 224], "validation_dataset": 40, "train_load": 40, "valid_load": 40, "32768": [40, 52], "3rd": [40, 168], "4th": 40, "5th": 40, "third": [40, 129], "6th": 40, "88555": 40, "88556": 40, "88557": 40, "848": 40, "1847": 40, "5456": 40, "3095": 40, "1062": 40, "3705": 40, "del": 40, "batchnorm": 40, "detail": [40, 45, 47, 51, 53, 56, 57, 61, 62, 63, 90, 169, 170, 171, 174, 175, 177, 178, 179, 255], "def": [40, 57, 190], "extract_info": 40, "single_hot_embedding_tables_shap": 40, "mutli_hot_embedding_tables_shap": 40, "embedding_table_shap": 40, "num_continu": 40, "emb_dropout": 40, "layer_hidden_dim": 40, "layer_dropout_r": 40, "initial_cat_lay": 40, "concatenatedembed": 40, "embedding_lay": 40, "modulelist": 40, "inplac": 40, "mh_cat_lay": 40, "multihotembed": 40, "initial_cont_lay": 40, "batchnorm1d": 40, "ep": 40, "momentum": 40, "affin": 40, "track_running_stat": 40, "1040": 40, "output_lay": 40, "train_loss": 40, "y_pred": [40, 164], "y": [40, 51, 52, 57, 95, 169, 170, 190], "loss_func": 40, "bcewithlogitsloss": 40, "valid_loss": 40, "02d": 40, "4f": 40, "610": 40, "152": 40, "5204": 40, "2798": 40, "17": [40, 57, 61, 66], "323": 40, "streamlin": 41, "despit": 41, "fairli": 41, "elabor": 41, "great": 41, "fullest": 41, "datalod": 41, "optmiz": 41, "example_util": [41, 55], "workflow_fit_transform": [41, 55], "save_result": 41, "373230": 41, "40": [41, 42, 55, 57, 58, 62, 66, 217, 218, 219, 234, 259, 260, 261], "514976": 41, "996": 41, "515413": 41, "515595": 41, "727125": 41, "728141": 41, "728351": 41, "728508": 41, "41": [41, 55, 57, 66], "475009": 41, "475231": 41, "475394": 41, "475508": 41, "475570": 41, "1637": 41, "train_d": 41, "valid_d": 41, "am": 41, "extrem": 41, "facilit": 41, "dcnmodel": [41, 53], "depth": [41, 93, 94, 98], "deep_block": [41, 94, 97, 168], "binaryoutput": [41, 55, 86, 132, 168], "v2": [41, 42, 43, 47, 49, 51, 55, 93, 94], "upon": 41, "explicit": [41, 42, 43, 47, 50, 58, 119, 234, 253], "complementari": 41, "implicit": [41, 50, 54, 171, 255], "overal": [41, 251], "depict": 41, "embbed": 41, "emb": [41, 114], "\ud835\udc5b": 41, "\ud835\udc65": 41, "paper": [41, 53, 95, 118, 165, 168, 255], "opt": [41, 57], "adagrad": [41, 53, 129, 168], "1221": 41, "6m": 41, "6609": 41, "5281": 41, "6588": 41, "5626": 41, "6537": 41, "0x7f7b5959ed30": 41, "serving_oper": [41, 55, 57, 63], "ens_conf": [41, 55, 63], "node_conf": [41, 55, 63], "unsupport": [41, 61], "signatur": [41, 61], "binary_output": [41, 43, 49, 55, 86, 132], "tensorspec": [41, 61], "sample_weight": [41, 61, 71, 76, 132, 164], "negative_candidate_id": 41, "func_graph": [41, 61], "unknownargu": [41, 61], "0x7f7b58732c40": 41, "_wrapped_model": [41, 61], "charact": [41, 50, 61], "train_compute_metr": [41, 57, 61], "dense_6_layer_call_fn": 41, "dense_6_layer_call_and_return_conditional_loss": 41, "47": [41, 55, 57, 217, 259], "tmp5eyrbewk": 41, "0_predicttensorflowtriton": [41, 43], "hugecr": 42, "movielen": [42, 43, 65, 66, 255], "file_to_writ": [42, 60], "max_batch_s": [42, 62, 214], "de": 42, "data_typ": 42, "type_fp32": 42, "catcolumn": 42, "type_int64": 42, "rowindex": 42, "type_int32": 42, "output0": [42, 62], "instance_group": [42, 57], "kind_gpu": 42, "gpucach": [42, 62], "hit_rate_threshold": [42, 62], "gpucachep": [42, 62], "slot": [42, 62], "cat_feature_num": 42, "des_feature_num": 42, "max_nnz": [42, 62], "embedding_vector_s": [42, 62], "embeddingkey_long_typ": 42, "utf": [42, 60, 62, 181], "dump": [42, 62], "supportlonglong": [42, 62], "sparse_fil": [42, 62], "dense_fil": [42, 62], "network_fil": [42, 62], "num_of_worker_buffer_in_pool": [42, 62], "num_of_refresher_buffer_in_pool": [42, 62], "cache_refresh_percentage_per_iter": [42, 62], "deployed_device_list": [42, 62], "default_value_for_each_t": [42, 62], "maxnum_catfeature_query_per_table_per_sampl": [42, 62], "56632": 42, "embedding_vecsize_per_t": [42, 62], "httpclient": [42, 57], "path_to_model": [42, 43], "wont": 42, "haven": 42, "filterwarn": [42, 43], "tritonhttpcli": [42, 43], "triton_cli": [42, 43, 49, 55], "channel": [42, 43, 49, 55], "fail": [42, 43, 49, 55], "is_server_l": [42, 43, 49, 55], "health": [42, 43, 49, 55], "live": [42, 43, 49, 55], "header": [42, 43, 47, 49, 55, 57, 189], "httpsocketpoolrespons": [42, 43, 49, 55], "plain": [42, 43, 49, 55], "get_model_repository_index": [42, 43, 49, 55], "bytearrai": [42, 43, 49, 55], "load_model": [42, 43, 55, 63], "99": [42, 47, 52, 53, 219, 261], "continuous_column": [42, 59, 241, 242], "emb_size_arrai": 42, "29434": 42, "insert": 42, "cumsum": 42, "test_df": 42, "rp_lst": 42, "cur": 42, "hstack": 42, "dense_featur": 42, "row_ptr": 42, "inferinput": [42, 43, 55, 57, 62, 63, 65, 66, 215], "np_to_triton_dtyp": 42, "set_data_from_numpi": 42, "inferrequestedoutput": [42, 43, 55, 62, 63, 65, 66], "request_id": [42, 43, 55, 62, 63], "get_respons": 42, "wdl2predict": 42, "1851": 42, "settingwithcopywarn": 42, "slice": [42, 239], "loc": 42, "row_index": 42, "col_index": 42, "caveat": 42, "pydata": 42, "doc": [42, 47, 52, 57], "user_guid": 42, "versu": 42, "_setitem_single_column": 42, "pi": 42, "1773": 42, "model_vers": 42, "numsampl": 42, "deviceid": 42, "fp32": 42, "binary_data_s": [42, 57], "5346206": 42, "49736455": 42, "2987379": 42, "6282493": 42, "7548654": 42, "59079504": 42, "55132014": 42, "90419775": 42, "47409508": 42, "5124942": 42, "2020": [43, 83, 133, 174, 175], "hasn": 43, "merlin_triton": 43, "deactiv": 43, "endpoint": [43, 63], "verifi": [43, 55, 65, 66], "aliv": 43, "ensemble_model": 43, "623": 43, "craft": 43, "9098613": 43, "59266": 43, "553": 43, "2556225": 43, "17037": 43, "608": 43, "20514728": 43, "133412": 43, "40583": 43, "decod": 43, "60931313": 43, "6242866": 43, "6068166": 43, "reflect": 43, "movielens25m": [44, 45], "teach": [44, 47], "becom": [44, 113, 168], "primarili": [45, 190], "largest": [45, 57, 58, 61, 64], "publicli": [45, 64], "1tb": [45, 59, 61, 64], "uncompress": [45, 47, 58, 59, 61, 64], "billion": [45, 58, 59, 61, 64, 255], "amazon": [45, 57], "sdk": 45, "ecr": [45, 57], "boto3": [45, 57], "8797": [45, 54, 56], "8787": [45, 54, 56, 59, 66], "8796": [45, 54, 56], "8786": [45, 54, 56], "guid": [46, 47, 49, 60, 224, 255], "power": [46, 47, 50, 53, 83, 133, 168], "practic": [46, 47, 94], "scienc": [46, 47], "involv": [46, 47, 48], "effort": [46, 48], "problem": [47, 53, 190, 251, 255, 256], "hypertun": [47, 51], "feedback": [47, 50, 171], "expos": [47, 53, 119], "switch": [47, 89], "english": 47, "mail": [47, 255], "gb": [47, 59, 217, 218, 219, 259, 260, 261], "qk": [47, 50], "video": [47, 50, 86], "contextu": [47, 50, 82], "watch": 47, "493": [47, 60], "feel": 47, "free": [47, 52, 53, 57, 59, 119], "v100": [47, 59, 60, 61], "10000001": 47, "10m": 47, "input_data_path": [47, 49], "quick_start": [47, 48, 50, 52, 53], "r": [47, 49, 52, 57, 93], "prototyp": 47, "dev": [47, 57, 59, 68], "explan": 47, "binary_classif_target": [47, 50], "regression_target": [47, 50], "user_id_featur": [47, 50], "item_id_featur": [47, 50], "to_int32": [47, 50], "to_int16": [47, 50], "to_int8": [47, 50], "cast": [47, 224, 244], "lower": [47, 50, 51], "dataset_split_strategi": [47, 50], "random_by_us": [47, 50], "random_split_eval_perc": [47, 50], "percentag": [47, 50], "filter_queri": [47, 50], "min_item_freq": [47, 50], "min_user_freq": [47, 50], "max_user_freq": [47, 50], "enable_dask_cuda_clust": [47, 50], "localcudaclust": [47, 50, 58, 59], "persist_intermediate_fil": [47, 50], "paricular": 47, "data_path": [47, 50, 183], "out_dataset_path": [47, 50, 53], "preproc": [47, 49, 50], "input_data_format": [47, 50], "csv_na_valu": [47, 50], "150": [47, 50], "num_max_rounds_filt": [47, 50], "video_categori": [47, 49, 50], "watching_tim": [47, 50], "2nd": [47, 53, 78, 106, 107, 118, 168], "mlp_layer": [47, 52, 53], "lr_decay_r": [47, 52, 53], "lr_decay_step": [47, 52, 53], "l2_reg": [47, 52, 53], "embeddings_l2_reg": [47, 52, 53, 112, 124, 125, 165, 166, 169], "among": [47, 50, 52, 53], "train_batch_s": [47, 52, 53], "eval_batch_s": [47, 52, 53], "65536": [47, 52, 53], "faster": [47, 50, 52, 226, 255], "train_steps_per_epoch": [47, 52, 53], "There": [47, 50, 53, 62, 255], "unbal": 47, "stl_positive_class_weight": [47, 52, 53], "rarer": [47, 53], "cuda_visible_devic": [47, 52, 53, 58, 59], "train_data_path": [47, 52, 53], "eval_data_path": [47, 50, 52, 53], "joint": [47, 224], "expert": [47, 51, 83, 121, 133], "independ": [47, 53], "mmoe_num_mlp_expert": [47, 53], "expert_mlp_lay": [47, 53], "gate": [47, 51, 53, 83, 121, 133], "gate_dim": [47, 53], "harvest": 47, "tower_lay": [47, 53], "mtl_loss_weight_": [47, 51, 53], "mtl_pos_class_weight_": [47, 51, 53], "use_task_tow": [47, 53], "embedding_sizes_multipli": [47, 52, 53], "mtl_pos_class_weight_click": 47, "mtl_pos_class_weight_lik": 47, "mtl_pos_class_weight_shar": 47, "mtl_pos_class_weight_follow": 47, "mtl_loss_weight_click": 47, "mtl_loss_weight_lik": 47, "mtl_loss_weight_follow": 47, "mtl_loss_weight_shar": 47, "bias": [47, 51, 53, 92, 111, 168], "sweep": [47, 51], "benchmark": [47, 59, 168, 174, 175], "empir": [47, 53, 118], "curat": [47, 55, 57], "quick": [48, 49, 51, 53, 169, 170], "phase": 48, "skew": 48, "postprocess": 48, "section": [48, 50, 51, 53, 57, 118], "br": [48, 49], "nvt_workflow_path": 48, "tf_saved_model_path": 48, "output_ensemble_path": 48, "load_model_path": [48, 53], "exact": 48, "save_model_path": [48, 53], "broken": [49, 65, 66], "preprocesss": 49, "locat": [49, 50, 57, 224, 251], "23": [49, 54, 57, 58, 258], "57": [49, 57, 217, 259], "737454": 49, "input_fold": [49, 62, 63], "workflow_stored_path": 49, "output_targets_path": 49, "outfil": 49, "thing": [49, 59, 119], "_cach": 49, "16794": 49, "221049": 49, "23542": 49, "61962": 49, "85886": 49, "281786": 49, "6016": 49, "26929": 49, "66043": 49, "30710": 49, "39752": 49, "222908": 49, "8365": 49, "273888": 49, "73739": 49, "280425": 49, "27552": 49, "28110": 49, "17866": 49, "69910": 49, "good": [49, 50, 51, 53, 55], "50231797": 49, "50405663": 49, "50262684": 49, "5003805": 49, "50613105": 49, "4995402": 49, "5027875": 49, "5036676": 49, "4998571": 49, "5052081": 49, "49693626": 49, "49303743": 49, "49347958": 49, "49609515": 49, "4981295": 49, "49890146": 49, "49202597": 49, "49149314": 49, "5004128": 49, "49684843": 49, "congratul": 49, "templat": [50, 53], "portal": 50, "social": [50, 53], "media": [50, 53], "dislik": 50, "cart": [50, 53], "purchas": [50, 53], "shown": 50, "tenrec": [50, 51, 52, 53], "dynam": [50, 53, 59, 101, 102], "price": 50, "z": [50, 171, 190], "imput": 50, "constant": [50, 52, 102, 118, 231], "median": [50, 51, 230], "nomin": 50, "meaning": 50, "higher": [50, 51, 53], "infrequ": [50, 53, 59, 224], "shard": [50, 53], "low": [50, 53, 57, 93, 94, 98, 224, 228, 237, 251], "categ_min_freq_cap": 50, "cold": [50, 255], "fresh": 50, "major": 50, "collis": 50, "trade": 50, "off": [50, 57, 164], "respect": [50, 52, 224, 237, 251], "udf": [50, 238], "tempor": 50, "geograph": 50, "preprocessingrunn": 50, "generate_nvt_featur": 50, "compress": [50, 57, 58, 217, 218, 219, 259, 260, 261], "small": [50, 51, 53, 118, 180, 255], "expand": [50, 51, 105], "binar": 50, "ordin": 50, "period": 50, "besid": [50, 51], "likelihood": [50, 53, 55, 255], "win": 50, "competit": [50, 58], "target_encoding_featur": 50, "target_encoding_target": 50, "week": 50, "month": [50, 233], "year": 50, "quarter": 50, "hour": 50, "subtract": [50, 92], "trend": 50, "accumul": [50, 118], "engag": 50, "semest": 50, "countri": 50, "latitud": 50, "longitud": 50, "airport": 50, "tourist": 50, "landmark": 50, "enrich": 50, "geoloc": 50, "censu": 50, "stratifi": 50, "dataset_split_temporal_timestamp": 50, "tsv": [50, 53, 59], "columnar": 50, "splitmust": 50, "predict_data_path": [50, 53], "csv_sep": 50, "tab": 50, "saveddefault": 50, "output_num_partit": 50, "filesdefault": 50, "control_featur": 50, "comma": [50, 53], "kept": [50, 53, 95, 129, 140, 159, 161], "sep": [50, 53, 58], "continuous_features_fillna": 50, "max_item_freq": 50, "timestamp_featur": 50, "session_id_featur": 50, "target_encoding_kfold": 50, "fold": [50, 251], "caus": 50, "overfit": [50, 53, 59, 251], "target_encoding_smooth": 50, "noisi": 50, "formula": [50, 118], "sum_target_per_categ_valu": 50, "global_target_avg": 50, "categ_value_count": 50, "int16": 50, "to_float32": 50, "round": [50, 57], "interleav": 50, "proport": 50, "dask_cuda_visible_gpu_devic": 50, "visible_gpu_devic": 50, "dask_cuda_gpu_device_spill_frac": 50, "spill": [50, 59], "divid": 51, "mmoe": [51, 121], "ple": [51, 83, 133], "bottom": [51, 53, 95, 96], "fair": [51, 174, 175], "comparison": [51, 59, 174, 175], "bayesian": [51, 52, 171], "bay": [51, 52], "reus": 51, "mayb": 51, "maxim": [51, 52, 95, 96, 119], "baselin": 51, "avg": 51, "highlight": 51, "bold": 51, "blue": [51, 255], "sparser": [51, 53], "densiti": 51, "denser": 51, "necessarili": 51, "mantain": 51, "simpler": 51, "cost": [51, 57, 101, 255], "evolv": [51, 52], "sensit": 51, "7023": 51, "7828": 51, "105": 51, "7826": 51, "accur": 51, "diminish": 51, "budget": [51, 119], "bar": [51, 52, 190], "chat": 51, "seach": 51, "spot": 51, "hotter": 51, "color": [51, 52], "16k": 51, "reg": [51, 53], "analyz": [51, 55, 65, 66], "plot": [51, 52], "boxplot": 51, "hpo": 51, "curv": 51, "achiv": 51, "adjust": [52, 57, 202, 203], "interest": [52, 59, 61, 63], "cli": [52, 56, 57], "googl": [52, 57, 168, 202, 203, 255], "vertex": 52, "azur": 52, "program": [52, 63], "toward": 52, "int_uniform": 52, "log_uniform": [52, 136], "preproc_data": 52, "easiest": 52, "preproc_input_data_path": 52, "reinstal": 52, "pypi": 52, "nee": 52, "author": [52, 53, 224], "me": 52, "profil": 52, "hit": 52, "enter": 52, "press": [52, 59], "ctrl": 52, "quit": 52, "preproc_data_path": 52, "log_to_wandb": [52, 53], "wandb_ent": [52, 53], "wandb_project": [52, 53], "sucessfulli": 52, "websit": [52, 257], "rememb": 52, "sweep_nam": 52, "wandb_sweep": 52, "stl_mlp": 52, "stl_click_mlp": 52, "agent": [52, 155], "sweep_id": 52, "team_nam": 52, "project_nam": 52, "identif": [52, 129], "env": [52, 57], "background": 52, "nohup": 52, "nohup0": 52, "nice": [52, 53], "chart": 52, "hparam": 52, "inter": 53, "compani": 53, "matrix": [53, 93, 98, 101, 102, 114, 120, 124, 125, 126, 168, 226, 255], "youtubednn": 53, "somewhat": 53, "correl": 53, "spend": 53, "resourc": [53, 256], "abil": [53, 168, 239], "memor": [53, 168], "wideanddeepmodel": 53, "deepfmmodel": 53, "drlm": 53, "bound": [53, 109, 110, 225], "mixtur": [53, 121], "mmoeblock": 53, "cgcblock": [53, 133], "progress": [53, 57, 83, 133], "Their": 53, "pleblock": [53, 83], "cap": [53, 234], "unbalanc": 53, "in_batch_negatives_train": 53, "in_batch_negatives_ev": 53, "domin": 53, "tasks_sample_spac": 53, "empti": [53, 68], "On": [53, 97, 118, 168, 169, 170], "hand": 53, "prior": [53, 69, 92], "predict_output_path": 53, "keep_column": 53, "ignore_column": 53, "wide_n_deep": 53, "selu": 53, "elu": 53, "mlp_init": 53, "glorot_uniform": [53, 120], "dcn_interacted_layer_num": 53, "wnd_hashed_cross_num_bin": 53, "10000": [53, 60], "wnd_wide_l2_reg": 53, "wnd_ignore_combin": 53, "_categori": 53, "multihot_max_seq_length": 53, "cgc_num_task_expert": 53, "cgc_num_shared_expert": 53, "ple_num_lay": 53, "mtl_gates_softmax_temperatur": 53, "train_metrics_step": 53, "bit": [53, 168], "validation_step": 53, "random_se": 53, "reproduc": [53, 136, 174, 175], "shuffled_train": 53, "metrics_log_frequ": 53, "log_to_tensorboard": 53, "sign": 53, "wandb": 53, "consol": 53, "wandb_exp_group": 53, "home": [53, 56, 57], "predict_output_format": 53, "predict_output_keep_col": 53, "tradit": 54, "xgboost": [54, 208, 255], "soon": [54, 256], "xx": [54, 258], "600621": 55, "183": [55, 65], "070258": 55, "070303": 55, "226": [55, 57], "070448": 55, "1638": 55, "16249": 55, "gv100": 55, "tianchi": [55, 57], "aliyun": [55, 57], "1000000": 55, "synthetic_data": [55, 57], "category_temp_directori": 55, "61": [55, 58], "68": [55, 65, 218, 260], "meta": 55, "transit": 55, "828993": 55, "executor": [55, 207], "1209": 55, "abort": 55, "invalid_argu": 55, "placehold": 55, "1563": [55, 61], "eta": [55, 57], "4998": [55, 57], "190967": 55, "69": 55, "38m": 55, "1min": 55, "2min": 55, "0x7f74b2a4b1c0": 55, "prepare_list_features_layer_call_fn": 55, "prepare_list_features_layer_call_and_return_conditional_loss": 55, "dense_9_layer_call_fn": 55, "96": [55, 65, 66, 217, 218, 219, 259, 260, 261], "wokflow": 55, "dl": 55, "edg": 55, "inferenc": 55, "0x7f74b290f550": 55, "tf_model_path": 55, "illustr": 55, "model_context_2_layer_call_fn": 55, "model_context_2_layer_call_and_return_conditional_loss": 55, "prepare_list_features_2_layer_call_fn": 55, "prepare_list_features_2_layer_call_and_return_conditional_loss": 55, "tmpomjyo5xq": 55, "772": 55, "773": 55, "789": 55, "790": 55, "67": [55, 57, 218, 260], "73": 55, "74": 55, "0_transformworkflow": [55, 57], "1_predicttensorflow": [55, 57], "__null_dask_index__": [55, 57], "800000": 55, "85": [55, 61, 65, 66], "5936": 55, "2045": 55, "1670": 55, "484": 55, "830": 55, "88": 55, "800001": 55, "2850": 55, "982": 55, "1879": 55, "544": [55, 62], "934": 55, "800002": 55, "238": 55, "82": 55, "557": 55, "277": 55, "isol": 55, "declar": [55, 155], "output_col": [55, 62, 63], "earlier": 55, "5002032": 55, "5001995": 55, "put": [55, 68], "credenti": [56, 57], "mount": [56, 57], "wtth": 57, "116": 57, "tar": 57, "gz": [57, 58], "kb": 57, "25hrequir": 57, "attr": 57, "pasta": 57, "importlib": 57, "importlib_metadata": 57, "whl": 57, "patho": 57, "25hcollect": 57, "protobuf3": 57, "py2": 57, "smdebug_rulesconfig": 57, "s3transfer": 57, "botocor": 57, "jmespath": 57, "six": 57, "zipp": 57, "pypars": 57, "pytz": 57, "2017": [57, 97], "dateutil": 57, "pox": 57, "dill": 57, "multiprocess": 57, "py38": 57, "ppft": 57, "contextlib2": 57, "urllib3": [57, 61, 62], "wheel": 57, "25ldone": 57, "25h": 57, "filenam": [57, 119], "809052": 57, "sha256": 57, "f446dd6eed6d268b7f3f2709f8f11c1ba153e382fbea9b2caedd517c1fb71215": 57, "3e": 57, "cb": 57, "b1": 57, "5b13ff7b150aa151e4a11030a6c41b1e457c31a52ea1ef11b0": 57, "protobuf3_to_dict": 57, "4029": 57, "8f99baaa875ba544d54f624f95dfbf4fd52ca96d52ce8af6d05c1ff2bb8435b2": 57, "fc": 57, "2d1e23d8b9a9013a83fbb418a0b17b1e6f81c8db8f53b53934": 57, "smdebug": 57, "rulesconfig": 57, "gather": [57, 251], "traffic": 57, "taobao": 57, "retail": 57, "1_000_000": 57, "archiv": 57, "made": 57, "upload": 57, "argpars": 57, "tempfil": 57, "runtim": [57, 207], "tf_memory_alloc": [57, 73, 119], "logger": [57, 181], "getlogg": 57, "__name__": 57, "setlevel": 57, "addhandl": 57, "streamhandl": 57, "stdout": [57, 181], "parse_arg": 57, "parser": 57, "argumentpars": 57, "add_argu": 57, "train_dir": 57, "sm_channel_train": 57, "valid_dir": 57, "sm_channel_valid": 57, "sm_model_dir": 57, "parse_known_arg": 57, "create_nvtabular_workflow": 57, "create_ensembl": 57, "mkdtemp": 57, "workflow_path": 57, "train_data": [57, 94, 96, 97, 125, 126, 166, 167, 168, 169, 170], "valid_data": 57, "model_path": 57, "ensemble_path": 57, "__main__": 57, "_": [57, 65, 66, 95, 109, 165, 179, 224, 233, 237, 251], "pip3": 57, "push": 57, "build_and_push_imag": 57, "sh": 57, "outsid": 57, "region": 57, "euo": 57, "pipefail": 57, "algorithm_nam": 57, "east": 57, "st": 57, "caller": 57, "west": 57, "dkr": 57, "amazonaw": 57, "image_uri": 57, "login": 57, "usernam": 57, "stdin": 57, "ne": 57, "fi": [57, 60], "role": 57, "sess": 57, "get_execution_rol": 57, "get_rol": 57, "arn": 57, "awso": 57, "iam": 57, "843263297212": 57, "data_loc": 57, "upload_data": 57, "key_prefix": 57, "sts_client": 57, "get_caller_ident": 57, "my_sess": 57, "region_nam": 57, "ecr_imag": 57, "g4dn": 57, "equip": [57, 65, 66], "t4": [57, 217, 218, 219, 259, 260, 261], "entry_point": 57, "behind": 57, "scene": 57, "sagemaker_program": 57, "training_instance_typ": 57, "xlarg": 57, "instance_count": 57, "instance_typ": 57, "1_024": 57, "trainingprofilerreport": 57, "1667989110": 57, "inprogress": 57, "34m": [57, 62], "34mnvidia": 57, "42766143": 57, "34mcopyright": 57, "2018": [57, 121, 172, 178], "affili": 57, "34mvariou": 57, "modif": 57, "34mthi": 57, "34mby": 57, "34mhttp": 57, "34mnote": 57, "driver": [57, 217, 218, 219, 259, 260, 261], "515": 57, "kernel": [57, 93, 97, 106, 120, 168], "510": 57, "34m2022": 57, "405": 57, "neuron": 57, "438": 57, "473": 57, "485": 57, "invok": [57, 117], "34mtrain": 57, "additional_framework_paramet": 57, "channel_input_dir": 57, "current_host": 57, "algo": 57, "current_instance_group": 57, "homogeneousclust": 57, "current_instance_group_host": 57, "current_instance_typ": 57, "distribution_host": 57, "distribution_instance_group": 57, "framework_modul": 57, "input_config_dir": 57, "input_data_config": 57, "traininginputmod": 57, "s3distributiontyp": 57, "fullyrepl": 57, "recordwrappertyp": 57, "instance_groups_dict": 57, "instance_group_nam": 57, "is_hetero": 57, "is_mast": 57, "is_modelparallel_en": 57, "is_smddpmprun_instal": 57, "job_nam": 57, "376": [57, 60], "master_hostnam": 57, "module_dir": 57, "sourcedir": 57, "module_nam": 57, "network_interface_nam": 57, "eth0": 57, "num_cpu": 57, "num_gpu": [57, 59], "num_neuron": 57, "output_intermediate_dir": 57, "resource_config": 57, "current_group_nam": 57, "user_entry_point": 57, "34menviron": 57, "34msm_host": 57, "34msm_network_interface_nam": 57, "34msm_hp": 57, "34msm_user_entry_point": 57, "34msm_framework_param": 57, "34msm_resource_config": 57, "34msm_input_data_config": 57, "34msm_output_data_dir": 57, "34msm_channel": 57, "34msm_current_host": 57, "34msm_current_instance_typ": 57, "34msm_current_instance_group": 57, "34msm_current_instance_group_host": 57, "34msm_instance_group": 57, "34msm_instance_groups_dict": 57, "34msm_distribution_instance_group": 57, "34msm_is_hetero": 57, "34msm_module_nam": 57, "34msm_log_level": 57, "34msm_framework_modul": 57, "34msm_input_dir": 57, "34msm_input_config_dir": 57, "34msm_output_dir": 57, "34msm_num_cpu": 57, "34msm_num_gpu": 57, "34msm_num_neuron": 57, "34msm_model_dir": 57, "34msm_module_dir": 57, "34msm_training_env": 57, "34msm_user_arg": 57, "34msm_output_intermediate_dir": 57, "34msm_channel_train": 57, "34msm_channel_valid": 57, "34msm_hp_batch_siz": 57, "34msm_hp_epoch": 57, "34mpythonpath": 57, "python38": 57, "dynload": 57, "merlin_hp": 57, "34minvok": 57, "486": 57, "debugg": 57, "761711": 57, "slightli": [57, 118], "tf_enable_onednn_opt": 57, "818302": 57, "991": [57, 65, 66], "819693": 57, "819906": 57, "894084": 57, "34mto": 57, "895367": 57, "895631": 57, "895807": 57, "651703": 57, "651981": 57, "652183": 57, "653025": 57, "1532": [57, 61], "10752": 57, "tesla": [57, 59, 60, 61, 217, 218, 219, 259, 260, 261], "34mworkflow": [57, 62], "tmp5fpdavsc": 57, "34mbatch_siz": 57, "34mepoch": 57, "34m684": 57, "684": 57, "5026": 57, "4990": 57, "11m": 57, "6922": 57, "5222": 57, "6941": 57, "4989": 57, "6858": 57, "5509": 57, "6991": 57, "4994": 57, "6790": 57, "5660": 57, "7052": 57, "4993": 57, "6751": 57, "5722": 57, "7096": 57, "6722": 57, "5755": 57, "7184": 57, "4991": 57, "6700": 57, "5777": 57, "7289": 57, "6687": 57, "5792": 57, "7404": 57, "6678": 57, "5801": 57, "7393": 57, "4988": 57, "89": [57, 61, 62, 66], "requestsdependencywarn": [57, 61, 62], "chardet": [57, 61, 62], "34mwarn": 57, "output_layer_layer_call_fn": [57, 61], "output_layer_layer_call_and_return_conditional_loss": [57, 61], "97": [57, 219, 261], "34minfo": 57, "34mmodel": 57, "34mensembl": 57, "589": 57, "billabl": 57, "model_data": 57, "s3download": 57, "s3down": 57, "xvzf": 57, "artificat": 57, "sagemaker_triton_default_model_nam": 57, "sm_client": 57, "service_nam": 57, "modeldataurl": 57, "sagemaker_triton_tensorflow_vers": 57, "strftime": 57, "gmtime": 57, "create_model_respons": 57, "create_model": 57, "modelnam": 57, "executionrolearn": 57, "primarycontain": 57, "model_arn": 57, "modelarn": 57, "endpoint_instance_typ": 57, "endpoint_config_nam": 57, "create_endpoint_config_respons": 57, "create_endpoint_config": 57, "endpointconfignam": 57, "productionvari": 57, "instancetyp": 57, "initialvariantweight": 57, "initialinstancecount": 57, "variantnam": 57, "alltraff": 57, "endpoint_config_arn": 57, "endpointconfigarn": 57, "endpoint_nam": 57, "create_endpoint_respons": 57, "create_endpoint": 57, "endpointnam": 57, "endpoint_arn": 57, "endpointarn": 57, "describe_endpoint": 57, "endpointstatu": 57, "sleep": 57, "60": [57, 66], "rv": 57, "inservic": 57, "700000": 57, "700001": 57, "80": [57, 66, 217, 218, 219, 259, 260, 261], "5621": 57, "1936": 57, "700002": 57, "776": 57, "700003": 57, "970": 57, "334": 57, "700004": 57, "1939": 57, "668": 57, "700005": 57, "15893": 57, "5474": 57, "700006": 57, "102": [57, 224], "7172": 57, "2470": 57, "700007": 57, "1163": 57, "401": 57, "700008": 57, "582": 57, "201": 57, "700009": 57, "4458": 57, "1536": 57, "636": 57, "983": 57, "1965": 57, "2890": 57, "1214": 57, "694": 57, "521": 57, "174": 57, "184": 57, "316": 57, "285": 57, "569": 57, "977": [57, 60], "837": 57, "1436": 57, "352": 57, "604": 57, "345": 57, "151": 57, "259": 57, "103": [57, 224], "payload": 57, "request_bodi": 57, "header_length": 57, "generate_request_bodi": 57, "binary_data_output": 57, "x0c": 57, "x00": 57, "x12": 57, "x003": 57, "x16": 57, "x04": 57, "x02": 57, "x1e": 57, "x05": 57, "x06": 57, "x0b": 57, "x07": 57, "x18": 57, "x03": 57, "x00p": 57, "x0e": 57, "x1c": 57, "xe2": 57, "x00f": 57, "x11": 57, "xc2": 57, "xf5": 57, "x15": 57, "x08": 57, "xca": 57, "x93": 57, "x8b": 57, "x00j": 57, "x00c": 57, "x90": 57, "x01": 57, "x00n": 57, "x9c": 57, "x00b": 57, "xa6": 57, "x91": 57, "xc9": 57, "xd7": 57, "xad": 57, "xbe": 57, "xb6": 57, "xae": 57, "xb8": 57, "x1d": 57, "x009": 57, "x00e": 57, "x97": 57, "xe9": 57, "xd1": 57, "x00y": 57, "x00w": 57, "x004": 57, "x00g": 57, "kserv": 57, "runtime_sm_cli": 57, "invoke_endpoint": 57, "contenttyp": 57, "vnd": 57, "header_length_prefix": 57, "header_length_str": 57, "parse_response_bodi": 57, "output_data": 57, "48595208": 57, "4647554": 57, "50048226": 57, "53553176": 57, "5209902": 57, "54944164": 57, "5032344": 57, "475241": 57, "5077254": 57, "5009623": 57, "incur": 57, "delete_model": 57, "delete_endpoint_config": 57, "delete_endpoint": 57, "responsemetadata": 57, "requestid": 57, "6ad24616": 57, "5c7c": 57, "4525": 57, "a63c": 57, "62d1b06ee8ad": 57, "httpstatuscod": 57, "httpheader": 57, "amzn": 57, "amz": 57, "wed": 57, "nov": 57, "gmt": 57, "retryattempt": 57, "tb": [58, 59, 61], "criteolab": 58, "kaggl": [58, 226], "15gb": 58, "47gb": 58, "30min": 58, "download_criteo": 58, "input_path": [58, 61, 63], "crit_orig": 58, "number_dai": 58, "day_": [58, 59], "googleapi": 58, "cail": 58, "day_0": [58, 59], "3gb": 58, "0mb": 58, "day_1": [58, 59], "7gb": 58, "3mb": 58, "15min": 58, "3min": [58, 61], "19min": 58, "23min": 58, "orient": 58, "dask_cuda": [58, 59, 66], "device_mem_s": [58, 59], "get_rmm_siz": 58, "frac_siz": 58, "rmm_pool_siz": [58, 59], "local_directori": [58, 59], "564": 58, "preload": [58, 59, 66], "cont_nam": [58, 119, 223, 225, 232, 237, 240, 245], "cat_nam": [58, 119, 234, 235], "hex": 58, "hexadecim": 58, "file_list": 58, "384": [58, 65, 66], "futurewarn": 58, "set_dask_cli": 58, "prerequisit": 59, "8min": [59, 61], "1x": 59, "9min": 59, "8x": 59, "100x": 59, "10000x": 59, "clip": [59, 118], "publish": 59, "strong": 59, "numba": 59, "fillmiss": [59, 253], "pynvml_mem_s": 59, "test_dask": [59, 60, 61, 62, 63], "use_hugectr": 59, "stats_path": 59, "stat": [59, 224, 237, 246], "dask_workdir": 59, "workdir": 59, "fname": 59, "num_dai": 59, "listdir": 59, "dashboard": 59, "dashboard_port": 59, "tcp": [59, 66], "ucx": 59, "is_avail": 59, "visible_devic": 59, "device_limit_frac": 59, "device_pool_frac": 59, "part_mem_frac": 59, "device_s": 59, "device_limit": 59, "device_pool_s": 59, "occupi": [59, 119], "fmem": 59, "1e9": 59, "bewar": 59, "port": [59, 66], "n_worker": 59, "device_memory_limit": 59, "dashboard_address": 59, "242": 59, "16739757": 59, "7554": 59, "11ed": 59, "88cc": 59, "2a33bb9638f6": 59, "c4f394c8": 59, "gib": 59, "a605479f": 59, "02de": 59, "4ca6": 59, "8661": 59, "fd02b84655ac": 59, "comm": 59, "44059": 59, "45833": 59, "38541": 59, "nanni": 59, "43849": 59, "9hxldmq1": 59, "sxm2": [59, 60, 61], "32gb": [59, 60, 61], "75": [59, 218, 223, 260], "35261": 59, "46685": 59, "37015": 59, "nsltf61z": 59, "consumpt": 59, "fact": 59, "magnitud": 59, "uncent": 59, "concis": 59, "worth": 59, "handi": 59, "ve": 59, "occurr": 59, "signal": 59, "10000000": [59, 60], "categorify_op": 59, "cont_featur": [59, 230, 231, 240, 241, 242, 245, 253], "out_dtyp": [59, 241, 242, 251], "label_featur": 59, "output_train_dir": 59, "output_valid_dir": 59, "260": 59, "0x7fdacec4fdc0": 59, "980": 59, "202": 59, "801": 59, "203": 59, "exploit": 60, "cubla": 60, "nccl": 60, "criteo_hugectr": [60, 62], "noqa": [60, 63], "sgd": [60, 61, 129, 131], "3014529": 60, "400781": 60, "2209": 60, "11869": 60, "38713": 60, "584616": 60, "12883": 60, "109": [60, 65], "17177": 60, "7425": 60, "20266": 60, "7085": 60, "1535": 60, "6000": 60, "relu3": 60, "interaction1": 60, "fc4": 60, "relu4": 60, "fc5": 60, "relu5": 60, "fc6": 60, "relu6": 60, "fc7": 60, "relu7": 60, "fc8": 60, "3200": 60, "run_tim": 60, "hctr": 60, "374": 60, "rk0": 60, "2831956451": 60, "490": 60, "peer": 60, "all2al": 60, "warmup": 60, "491": 60, "num": [60, 110], "dataread": 60, "54120457": 60, "541": 60, "max_vocabulary_size_per_gpu_": 60, "12288000": 60, "analysi": 60, "055": 60, "gpu0": 60, "107": 60, "111": 60, "113": 60, "9122965335846": 60, "942873": 61, "579306": 61, "579506": 61, "16255": 61, "582211": 61, "582328": 61, "30655": 61, "8a": 61, "path_to_train_data": 61, "path_to_valid_data": 61, "part_1": 61, "2867": 61, "224": 61, "72m": 61, "0378": 61, "0745e": 61, "binary_accuraci": [61, 80], "9677": 61, "5673": 61, "1385": 61, "val_precis": 61, "val_recal": 61, "val_binary_accuraci": 61, "9680": 61, "6279": 61, "1405": 61, "13min": 61, "21min": 61, "45": 61, "0x7f58457b1c40": 61, "eval_metr": 61, "2787": 61, "31m": 61, "13853003084659576": 61, "9679937958717346": 61, "6279259324073792": 61, "14048266410827637": 61, "predictionoutput": [61, 114, 138, 155, 160], "positive_item_id": 61, "label_relevant_count": 61, "valid_negatives_mask": 61, "negative_item_id": 61, "0x7f57c5f8ecd0": 61, "c1": [61, 62], "c10": [61, 62], "c11": [61, 62], "c12": [61, 62], "c13": [61, 62], "c14": [61, 62], "c15": [61, 62], "c16": [61, 62], "c17": [61, 62], "c18": [61, 62], "c19": [61, 62], "c2": [61, 62], "c20": [61, 62], "c21": [61, 62], "c22": [61, 62], "c23": [61, 62], "c24": [61, 62], "c25": [61, 62], "c26": [61, 62], "c3": [61, 62], "c4": [61, 62], "c5": [61, 62], "c6": [61, 62], "c7": [61, 62], "c8": [61, 62], "c9": [61, 62], "i1": 61, "i10": [61, 62], "i11": [61, 62], "i12": [61, 62], "i13": [61, 62], "i2": 61, "i3": 61, "i4": [61, 62], "i5": [61, 62], "i6": [61, 62], "i7": [61, 62], "i8": [61, 62], "i9": [61, 62], "161": 61, "temporari": 62, "export_hugectr_ensembl": 62, "original_data_path": [62, 63], "9600": 62, "model_infer": 62, "hugectr_model_path": 62, "hugectr_param": 62, "n_output": 62, "tree": [62, 101, 119, 208, 224, 237, 251], "test_merlin_criteo_hugectr": 62, "00m": 62, "34mcriteo": 62, "34m1": 62, "34m0_sparse_9600": 62, "_dense_9600": 62, "_opt_dense_9600": 62, "34mcriteo_en": 62, "34mcriteo_nvt": 62, "34m__pycache__": 62, "34mcategori": 62, "0_sparse_9600": 62, "70000": 62, "2714039": 62, "29401": 62, "11464": 62, "1122": 62, "9355": 62, "6370": 62, "1010": 62, "1865651": 62, "208215": 62, "952671": 62, "955872": 62, "944922": 62, "139380": 62, "994092": 62, "056103": 62, "547473": 62, "709442": 62, "930728": 62, "70001": 62, "3514299": 62, "27259": 62, "8072": 62, "395": 62, "9361": 62, "862": 62, "3292987": 62, "171709": 62, "759526": 62, "795019": 62, "716366": 62, "134964": 62, "516737": 62, "065577": 62, "129782": 62, "471361": 62, "386101": 62, "70002": 62, "1304577": 62, "5287": 62, "7367": 62, "2033": 62, "2899": 62, "712": 62, "640": 62, "6415968": 62, "880028": 62, "347701": 62, "207892": 62, "753950": 62, "371013": 62, "759502": 62, "201477": 62, "192447": 62, "085893": 62, "957961": 62, "na": [62, 63], "workaround": [62, 63], "fillna": [62, 63], "criteo_en": 62, "52164096": 62, "50390565": 62, "4957397": 62, "though": 63, "f401": 63, "friendli": [65, 66], "accustom": [65, 66], "accommod": [65, 66], "100k": [65, 66], "proce": [65, 66], "breez": [65, 66], "bayesianpersonalizedrank": 65, "entertain": [65, 66], "get_movielen": [65, 66], "variant": [65, 66, 118], "train_workflow": [65, 66], "681291": 65, "681740": 65, "681877": 65, "frame": [65, 66], "777": 65, "52it": 65, "train_auc": 65, "incom": [65, 66, 210], "lifecycl": [65, 66], "redefin": [65, 66], "subtl": [65, 66], "inf_workflow": [65, 66], "predictimplicit": 65, "implicit_model": 65, "ten_exampl": [65, 66], "to_fram": 65, "143": 65, "609": 65, "858": 65, "predictions_from_triton": [65, 66], "local_predict": [65, 66], "assert_allclos": 65, "xgb": 66, "preprocess_categori": 66, "preprocess_r": 66, "rating_binari": 66, "num_boost_round": 66, "verbose_ev": 66, "446602": 66, "447091": 66, "447227": 66, "94mb": 66, "45mb": 66, "32file": 66, "947": 66, "diskutil": 66, "stale": 66, "lock": 66, "oqemvhkv": 66, "purg": 66, "41809": 66, "got": 66, "rmse": 66, "36952": 66, "95316": 66, "92447": 66, "90741": 66, "89437": 66, "89138": 66, "fil": 66, "predictforest": 66, "te_movieid_r": 66, "userid_count": 66, "zip_cod": 66, "77": 66, "779876": 66, "572154": 66, "231": 66, "896619": 66, "goldeney": 66, "366": 66, "954632": 66, "room": 66, "093809": 66, "shorti": 66, "383": 66, "539376": 66, "copycat": 66, "perhap": 66, "35647": 66, "allclos": 66, "loaderbas": [67, 71, 76], "yield": [67, 69, 119], "qsize": 68, "num_part": 68, "put_wait": 68, "hold": 68, "queue": [68, 71, 76, 136], "packet": 68, "itr": 68, "gpu_mem_frac": 68, "chunk_log": 68, "load_chunk": 68, "get_batch_div_chunk": 68, "halt": 69, "peek": [69, 71, 76], "make_tensor": 69, "use_row_length": 69, "offset": [69, 71, 76, 215], "array_lib": 69, "convert_batch": [71, 76], "fn": [71, 76], "builtin": 72, "memory_alloc": 73, "tf_visible_devic": [73, 119], "feature_column": [74, 119], "batch_sampl": 75, "worker_init_fn": 75, "multiprocessing_context": 75, "persistent_work": 75, "compute_output_shap": [77, 78, 80, 82, 85, 86, 87, 99, 102, 104, 105, 107, 109, 117, 123, 127, 138, 140, 141, 144, 151, 152, 155, 156, 157, 160, 162], "is_tabular": [77, 155, 157], "weight_feature_nam": 78, "embeddingt": [78, 84, 92, 95, 101, 103], "from_schema_convent": 78, "weight_features_name_suffix": 78, "item_id_seq": 78, "item_id_seq_weight": 78, "seq": [78, 112, 145], "weightedaveragebyfeatur": 78, "topkmetr": [79, 122, 130, 137, 142, 164], "pre_sort": [79, 122, 130, 137, 142], "map_at": 79, "binary_crossentropi": [80, 81], "functool": [80, 128, 144], "confusion_metr": 80, "accuracy_metr": [80, 128], "from_config": [80, 82, 83, 87, 92, 100, 102, 104, 114, 115, 123, 127, 129, 131, 134, 135, 138, 144, 147, 149, 150, 154, 155, 157, 164], "modeloutput": [81, 84, 86, 92, 94, 96, 97, 126, 132, 143, 147, 167, 168, 170], "logits_temperatur": [81, 84, 92, 115, 125, 126, 127, 166, 167, 169, 170], "default_metrics_fn": [81, 84, 92, 127, 143], "base_lay": [81, 84, 92, 103, 113, 143, 170], "base_metr": [81, 84, 92, 143], "default_binary_metr": 81, "context_schema": [82, 113], "sequence_schema": [82, 113], "compute_mask": [82, 148, 149, 150, 151, 152, 153], "parallelblock": [83, 86, 89, 94, 95, 96, 97, 100, 103, 109, 110, 112, 113, 121, 129, 132, 133, 135, 165, 168, 180], "cgc": [83, 133], "tang": [83, 133], "hongyan": [83, 133], "et": [83, 94, 95, 96, 97, 111, 118, 121, 133, 150, 166, 167, 168, 169, 170, 174, 175], "al": [83, 94, 95, 96, 97, 111, 118, 121, 133, 150, 166, 167, 168, 169, 170, 174, 175], "novel": [83, 133], "mtl": [83, 133], "fourteenth": [83, 133, 174, 175], "acm": [83, 111, 121, 133, 150, 166, 167, 169, 170, 172, 174, 175, 178], "confer": [83, 94, 97, 106, 107, 111, 121, 133, 150, 166, 167, 169, 170, 172, 174, 175, 177, 178, 179], "parallelpredictionblock": [83, 94, 96, 97, 121, 125, 133, 139, 166, 168], "expert_block": [83, 121, 133], "num_task_expert": [83, 133], "num_shared_expert": [83, 133], "add_shared_g": 83, "gate_block": [83, 121, 133], "gate_softmax_temperatur": [83, 121, 133], "enable_gate_weights_metr": [83, 133], "compute_call_output_shap": [83, 90, 102, 108, 134, 135, 140, 141, 148, 157], "categoricaltarget": [84, 92], "embeddingtablepredict": [84, 92], "negative_sampl": [84, 92, 126, 167], "itemsamplerstyp": [84, 92], "get_default_metr": [84, 92, 143], "inan": [84, 92], "hakan": [84, 92], "khosravi": [84, 92], "khashayar": [84, 92], "richard": [84, 92], "socher": [84, 92], "1611": [84, 92], "01462": [84, 92], "to_cal": [84, 92, 104, 127], "default_categorical_prediction_metr": [84, 92], "to_dataset": [84, 92, 101, 102], "condens": 85, "outputmod": 85, "output_mod": [85, 109, 110, 168], "multi_hot": [85, 168], "one_hot": [85, 109, 110, 162, 168], "feature_cardin": 85, "squeezabl": 85, "behav": 85, "count_weight": 85, "appear": [85, 118], "binary_class_weight": 86, "music_streaming_data": 86, "output_block": 86, "weight_column_nam": 86, "he": 86, "negative_valu": 86, "positive_valu": 86, "condition": 87, "embedding_block": 89, "continuous_aggreg": 89, "tabular_aggregation_registri": [90, 134, 148, 157], "keyword": [90, 102, 118], "repr_ignor": [90, 135, 157], "repr_extra": [90, 157], "dotproduct": 92, "store_negative_id": [92, 114, 115], "logq_sampling_correct": 92, "logq": 92, "prob": 92, "overpen": 92, "with_sampling_prob": 92, "popularitylogitscorrect": 92, "item_frequ": 92, "candidatesampl": [92, 126, 167], "downscore_false_neg": 92, "false_negative_scor": 92, "655": [92, 114], "query_nam": [92, 114, 147], "candidate_nam": [92, 147], "call_contrast": 92, "query_embed": [92, 147], "sample_neg": 92, "positive_item": 92, "embedding_lookup": 92, "has_candidate_weight": 92, "set_negative_sampl": 92, "low_rank_dim": [93, 98], "kernel_initi": [93, 120, 128], "truncated_norm": 93, "bias_initi": [93, 120, 128], "kernel_regular": [93, 120], "bias_regular": [93, 120], "eq": [93, 94], "dxd": 93, "dxr": 93, "initializertyp": [93, 103, 120], "regularizertyp": [93, 103, 120, 168], "_dens": [94, 169, 170], "wang": 94, "ruoxi": 94, "lesson": 94, "proceed": [94, 111, 121, 150, 166, 167, 168, 169, 170, 172, 177, 178, 179], "2008": [94, 169, 170], "13535": 94, "modeloutputtyp": [94, 96, 97, 168], "outputblock": [94, 96, 97, 168], "1906": [95, 96], "00091": [95, 96], "naumov": [95, 96], "preprint": [95, 96, 169, 170], "wide_input_block": [97, 106, 168], "wide_logit_block": [97, 106], "deep_logit_block": 97, "deep_fm": 97, "huifeng": 97, "guo": 97, "1703": 97, "04247": 97, "steffen": [97, 106, 107], "rendl": [97, 106, 107, 171], "ieee": [97, 106, 107], "mine": [97, 106, 107, 121], "2010": [97, 106, 107], "ieeexplor": [97, 106, 107], "5694074": [97, 106, 107], "fm": [97, 106], "dense_kwarg": 98, "residu": [98, 146], "interaction_typ": 99, "self_interact": 99, "l2_normal": [100, 169], "towerblock": 100, "retrievalmodelv2": [101, 126, 167, 170], "embeddings_regular": [101, 102, 103], "activity_regular": [101, 102, 103, 120], "embeddings_constraint": [101, 102], "mask_zero": [101, 102, 148], "recurr": [101, 102, 172, 177, 178, 179], "consequ": 101, "input_dim": 101, "input_length": [101, 102], "combinertyp": [101, 102], "mixed_precis": [101, 102], "polici": [101, 102], "global_polici": 101, "eagerli": [101, 102], "flow": 101, "safe": 101, "embeddings_l2_batch_regular": [101, 126], "_description_": 101, "embeddingtablebas": 102, "scalar": [102, 104, 140], "seq_length": 102, "col_schema": 102, "l2_batch_regularization_factor": [102, 103], "from_pretrain": 102, "dataframetyp": [102, 228, 253], "from_dataset": [102, 158], "to_df": 102, "newli": 102, "infer_dim_fn": 103, "infer_embedding_dim": 103, "table_cl": 103, "block_nam": [103, 120, 155], "introduct": [103, 112, 113, 132, 255, 257], "feature_nam": [103, 108, 109, 119, 128], "frozen": 103, "prep_featur": 104, "batch_predict": [104, 163], "train_step": 104, "include_optim": 104, "save_trac": 104, "trace": 104, "has_schema": 104, "deseri": [104, 253], "cont_feat1": 105, "cont_feat2": 105, "multi_hot_categ_feat": 105, "minval": 105, "maxval": 105, "expand_dims_op": 105, "expand_dim": 105, "expanded_input": 105, "fm_input_block": 106, "factors_dim": 106, "1st": [106, 118, 168], "pairwis": [107, 171, 172, 174, 175, 177, 178, 179], "modelcontext": 107, "n_featur": 107, "add_to_context": 108, "check_featur": 108, "trick": [109, 168], "conceptu": 109, "thought": 109, "num_bin": [109, 110, 168], "model_bodi": 109, "cross_schema": 109, "is_input": [109, 157], "cross_": 109, "infer_num_bin": [109, 110], "cadin": [109, 110], "bigger": [109, 110], "max_num_bin": [109, 110], "clipe": [109, 110], "upper": [109, 110, 224], "100000": [109, 110], "max_level": [110, 168], "ignore_combin": [110, 168], "hashedcross": [110, 168], "feature_1": 110, "feature_2": 110, "feature_3": 110, "level_3_cross": 110, "user_birth_c": 110, "itemsampl": [111, 114, 115, 125, 126, 136, 166, 167], "cachedcrossbatchsampl": 111, "rather": [111, 118], "exclus": 111, "itemretrievalscor": [111, 136], "sampling_downscore_false_neg": [111, 114, 136], "yi": [111, 166, 167], "xinyang": [111, 166, 167], "13th": [111, 166, 167], "set_batch_s": 111, "embeddingwithmetadata": [111, 116, 136], "items_embed": 111, "items_metadata": [111, 116, 136], "downscor": [111, 114], "branch": [112, 113, 134], "add_continuous_branch": 112, "add_embedding_branch": 112, "infer_embeddings_ensure_dim_multiple_of_8": [112, 165, 166, 169], "sequential_tag": 112, "split_spars": 112, "seq_aggreg": 112, "sequenceaggreg": 112, "tag_to_block": 113, "categoryencod": [113, 168], "tospars": 113, "continuousproject": 113, "continuous_schema": 113, "broadcasttosequ": 113, "itemretriev": 114, "sampling_downscore_false_negatives_valu": 114, "finfo": 114, "item_id_feature_nam": [114, 136], "item_nam": 114, "cache_queri": [114, 115], "sampled_softmax_mod": 114, "item_domain": 114, "get_embed": 114, "call_output": [114, 138, 155, 160], "all_scor": 114, "set_required_featur": 114, "multiclassclassificationtask": 115, "post_logit": 115, "predictionblock": [115, 127], "popularitysamplingblock": 115, "item_fequ": 115, "popularii": 115, "topkmetricsaggreg": 115, "eval_sampl": 115, "retrieval_scor": 115, "set_retrieval_cache_queri": 115, "max_num_sampl": [116, 136], "required_featur": 116, "set_max_num_sampl": 116, "float16": 118, "float64": [118, 241, 242], "001": [118, 168], "beta_1": 118, "beta_2": 118, "epsilon": 118, "amsgrad": 118, "maintain": 118, "lazier": 118, "semant": 118, "tensforflow": 118, "addon": 118, "floattensorlik": 118, "learningrateschedul": 118, "exponenti": 118, "moment": 118, "stabil": [118, 224, 237, 251], "hat": 118, "kingma": 118, "2014": [118, 169, 170], "ab": [118, 172, 177, 178, 179], "1412": [118, 169, 170], "6980": 118, "converg": 118, "clipnorm": 118, "clipvalu": 118, "backward": [118, 119, 227], "invers": 118, "get_weight": 118, "sparse_nam": 119, "sparse_max": [119, 214], "sparse_as_dens": 119, "loader_kwarg": 119, "older": [119, 258], "infinit": 119, "amount": 119, "expens": 119, "oom": 119, "fewest": 119, "initialzi": 119, "leav": 119, "restrict": 119, "feature_tensor": 119, "elemtn": 119, "kerassequenceload": 119, "update_stat": 119, "record_stat": 119, "pattern": [119, 168], "climb": 119, "sparse_list": 119, "has_transform": 119, "droptout": 120, "num_expert": 121, "gate_kwarg": 121, "ma": 121, "jiaqi": 121, "relationship": [121, 168], "24th": 121, "sigkdd": 121, "discoveri": 121, "replic": 121, "mrr_at": 122, "query_id_tag": [124, 125, 126], "item_id_tag": [124, 125], "cosinesimilar": 124, "queryitemidsembeddingsblock": 124, "retrievalmodel": [125, 166], "mf": [125, 126, 255], "candidate_id_tag": [126, 167, 170], "create_default_metr": [127, 138], "get_task_nam": 127, "random_norm": 128, "extra_pr": 128, "optimizers_and_block": [129, 168], "optimizerblock": [129, 168], "default_optim": [129, 168], "optimizerv2": [129, 131], "rmsprop": [129, 163], "rest": 129, "user_tow": [129, 131], "item_tow": [129, 131, 165, 166], "third_tow": [129, 131], "three_tow": 129, "apply_gradi": 129, "grads_and_var": 129, "experimental_aggregate_gradi": 129, "optimizer_block": 129, "optimzi": 129, "update_optimizers_and_block": 129, "ndcg_at": 130, "rubric": 131, "model_output": 132, "regressionoutput": 132, "output_typ": 132, "regression_output": 132, "num_lay": 133, "use_layer_nam": 134, "automatic_prun": 134, "prune": 134, "parallel_valu": 134, "parallel_dict": 134, "all_input": 134, "item_input": 134, "item_rec": 134, "item_genr": 134, "add_branch": 134, "apply_to_branch": 134, "branch_nam": 134, "parse_config": 134, "bias_block": [135, 139], "get_tasks_from_schema": 135, "task_pre_dict": [135, 139], "task_names_from_schema": 135, "add_task": 135, "bias_output": 135, "parallel_lay": [135, 146, 165, 168], "zipfian": 136, "log_uniform_candidate_sampl": 136, "api_doc": 136, "item_weight": 136, "get_distribution_prob": 136, "precision_at": 137, "contextmixin": 138, "metricormetr": [138, 144], "pre_eval_topk": 138, "prediction_metr": 138, "label_metr": 138, "compute_train_metr": 138, "pre_cal": [138, 157], "pre_loss": 138, "features_shap": 138, "build_task": 138, "categories__valu": [140, 141], "categories__offset": [140, 141], "list_as_dens": [140, 141], "recall_at": 142, "mse": [143, 144], "squar": 144, "regression_metr": 144, "rootmeansquarederror": 144, "root_mean_squared_error": 144, "predictmask": 145, "cascad": 145, "_keras_mask": [145, 149, 150], "sequencelastrandom": 145, "configure_for_train": [145, 149, 150, 152], "masking_pr": [145, 149, 150, 152], "sequence_length": 145, "withshortcut": 146, "shortcut": 146, "candidate_embed": 147, "has_candidate_encod": 147, "query_encod": [147, 163], "candidate_encod": [147, 163], "to_top_k_encod": 147, "brute": [147, 163], "forc": [147, 163], "add_default_pr": 148, "lookup_featur": 148, "sequencetargetasinput": [149, 150], "discov": [149, 150], "masking_post": [149, 150, 152], "sequencepredictnext": [149, 150], "configure_for_test": [149, 150, 152], "nlp": [150, 255], "bert4rec": 150, "predicion": 150, "sun": [150, 174, 175], "fei": 150, "28th": 150, "sequencetransform": [151, 152, 153, 154], "preparefeatur": [151, 152, 153, 154], "sequentiallay": 155, "pure": [155, 168], "usabl": 155, "policysav": 155, "layer1": 155, "layer2": 155, "layer3": 155, "equival": [155, 253], "pre_aggreg": 155, "copy_lay": 155, "composit": 155, "compute_output_signatur": 155, "input_signatur": 155, "sequenceblock": 155, "trainable_weight": 155, "non_trainable_weight": 155, "allow_non": 157, "tabularlay": 157, "tabulartransformationstyp": 157, "post_cal": 157, "apply_to_al": 157, "columns_to_filt": 157, "set_pr": 157, "set_post": 157, "set_aggreg": 157, "repr_add": 157, "calculate_batch_size_from_input_shap": 157, "super": 157, "featurestensortypeconvers": [159, 161], "unchang": [159, 161], "basemodel": 163, "topk_lay": 163, "topkoutput": 163, "from_candidate_dataset": 163, "index_column": 163, "loss_weight": 163, "weighted_metr": 163, "steps_per_execut": 163, "jit_compil": 163, "index_candid": 163, "encode_candid": 163, "topkmetricwithlabelrelevantcountsmixin": 164, "topk_metr": 164, "update_st": 164, "y_true": 164, "cut": 164, "predefin": 164, "dualencoderblock": 165, "retrievalmixin": 165, "doi": [165, 169, 170], "1145": 165, "3298689": 165, "3346996": 165, "xinyang19": 165, "query_tower_tag": [165, 166], "item_tower_tag": [165, 166], "twotow": 165, "two_tow": [166, 167], "losstyp": 166, "candidate_tow": 167, "user_schema": 167, "item_schema": 167, "wide_schema": 168, "deep_schema": 168, "wide_preprocess": 168, "deep_input_block": 168, "deep_regular": 168, "wide_regular": 168, "deep_dropout": 168, "wide_dropout": 168, "wide_body_kwarg": 168, "wide_deep": 168, "deep_embed": 168, "hashedcrossal": 168, "one_hot_schema": 168, "categ_1": 168, "categ_2": 168, "multi_hot_schema": 168, "categ_multi_hot_3": 168, "one_hot_encod": 168, "asdensefeatur": 168, "multi_hot_encod": 168, "todens": 168, "pick": 168, "features_cross": 168, "ftrl": 168, "multioptim": 168, "wide_model": 168, "deep_model": 168, "multi_optim": 168, "cheng": 168, "koc": 168, "harmsen": 168, "shake": 168, "chandra": 168, "aradhy": 168, "anderson": 168, "workshop": 168, "pp": 168, "extra_pre_cal": 169, "num_sampl": [169, 170], "min_sampled_id": [169, 170], "youtub": [169, 170], "dnn": [169, 170], "covington": [169, 170], "paul": [169, 170], "jai": [169, 170], "emr": [169, 170], "sargin": [169, 170], "10th": [169, 170], "yoshua": [169, 170], "bengio": [169, 170], "jean": [169, 170], "s\u00e9bastien": [169, 170], "s\u00e9n\u00e9cal": [169, 170], "2003": [169, 170], "probabilist": [169, 170], "net": [169, 170], "intellig": [169, 170, 171], "aistat": [169, 170], "j": [169, 170], "senec": [169, 170], "tran": [169, 170], "neur": [169, 170], "netw": [169, 170], "april": [169, 170], "713": [169, 170], "722": [169, 170], "1109": [169, 170], "tnn": [169, 170], "2007": [169, 170], "912312": [169, 170], "translat": [169, 170], "pairwiseloss": [171, 172, 174, 175, 177, 178, 179], "personalis": 171, "bpr": [171, 172], "freudenthal": 171, "gantner": 171, "schmidt": 171, "thiem": 171, "uai": 171, "25th": 171, "conf": 171, "uncertainti": 171, "1205": 171, "2618": 171, "almost": [171, 174, 175, 177, 178, 179], "sum_over_batch_s": [171, 174, 175, 177, 178, 179], "custom_train": [171, 174, 175, 177, 178, 179], "positives_scor": [171, 172, 174, 175, 177, 178, 179], "negatives_scor": [171, 172, 174, 175, 177, 178, 179], "reg_lambda": 172, "hidasi": [172, 177, 178, 179], "bal\u00e1z": [172, 178], "alexandro": [172, 178], "karatzogl": [172, 177, 178, 179], "gain": [172, 178], "27th": [172, 178], "1706": [172, 178], "03847": [172, 178], "neg_scor": 172, "from_logit": [173, 176], "lossregistrymixin": [173, 176], "sparsecategoricalcrossentropi": 173, "loss_registri": [173, 176], "hing": 174, "r_uj": [174, 175], "r_ui": [174, 175], "zhu": [174, 175], "rigor": [174, 175], "exp": 175, "baltruna": [177, 179], "tikk": [177, 179], "fourth": [177, 179], "iclr": [177, 179], "1511": [177, 179], "06939": [177, 179], "top1": 178, "gru4rec": [179, 255], "_io": 181, "textiowrapp": 181, "one_lin": 181, "thing_with_kwarg": 182, "cascade_kwargs_if_poss": 182, "argspec_fn": 182, "getfullargspec": 182, "files_filter_pattern": 183, "feature_map": [184, 187], "analys": [184, 187], "data_arg": 186, "time_indic": 186, "is_train": 186, "registry_nam": 190, "default_key_fn": 190, "default_nam": 190, "on_set": 190, "value_transform": 190, "registr": [190, 193], "my_registri": 190, "custom_nam": 190, "my_func": 190, "another_func": 190, "non_default_nam": 190, "third_func": 190, "baz": 190, "my_regist": 190, "existent_kei": 190, "keyerror": 190, "__getitem__": 190, "registered_valu": 190, "class_registri": 190, "default_kei": 190, "key_or_valu": 190, "decor": 190, "parenthes": 190, "key1": [190, 236], "value_fn": 190, "another_fn": 190, "different_kei": 190, "unction": 190, "register_with_multiple_nam": 190, "kwd": 191, "registryclasst": 191, "class_or_fn": 193, "names_list": 195, "starting_spac": 195, "domain_nam": 199, "min_value_count": 199, "max_value_count": 199, "ensure_multiple_of_8": [202, 203], "suggest": [202, 203], "forth": [202, 203], "smallest": [202, 203], "herist": 203, "featir": 203, "extra_tag": 205, "inferencenod": 207, "chain": 207, "deleg": 207, "travers": 207, "mutat": 207, "tensort": [207, 208, 209, 210], "fil_param": 208, "inferenceoper": [208, 209, 210, 211, 212, 213, 214], "forest": 208, "boost": 208, "gbdt": 208, "lightgbm": 208, "num_to_recommend": 209, "filter_out": 210, "_summary_": 210, "ancestor": 210, "_input_col": 211, "judg": 211, "wish": 211, "model_or_path": 212, "unus": [212, 214], "columunselector": [212, 214], "from_path": 212, "item_id_col": 213, "unroll_col": 213, "unrolled_prefix": 213, "sparsiti": 214, "nvt_model_nam": 214, "set_nvt_model_nam": 214, "input_class": 215, "_infer_input": 215, "station": [217, 218, 219, 259, 260, 261], "ubuntu": [217, 218, 219, 259, 260, 261], "certifi": [217, 218, 219, 259, 260, 261], "465": [217, 218, 219, 259, 260, 261], "center": [217, 218, 219, 259, 260, 261], "formerli": [217, 218, 219, 259, 260, 261], "418": [217, 218, 219, 259, 260, 261], "r418": [217, 218, 219, 259, 260, 261], "440": [217, 218, 219, 259, 260, 261], "r440": [217, 218, 219, 259, 260, 261], "450": [217, 218, 219, 259, 260, 261], "r450": [217, 218, 219, 259, 260, 261], "r460": [217, 218, 219, 259, 260, 261], "amper": [217, 218, 219, 259, 260, 261], "ture": [217, 218, 219, 259, 260, 261], "volta": [217, 218, 219, 259, 260, 261], "pascal": [217, 218, 219, 259, 260, 261], "023": [217, 218, 219, 259, 260, 261], "011": [217, 218, 219, 259, 260, 261], "065": [217, 218, 219, 259, 260, 261], "rmm": [217, 218, 219, 259, 260, 261], "00a": [217, 218, 219, 259, 260, 261], "gf6bf047": [217, 218, 219, 259, 260, 261], "dirti": [217, 218, 219, 259, 260, 261], "g6ca81bbc78": [217, 218, 219, 259, 260, 261], "131": [217, 218, 219, 259, 260, 261], "cuda11": [217, 218, 219, 259, 260, 261], "95": [217, 259], "017": [217, 218, 219, 259, 260, 261], "014": [217, 218, 219, 259, 260, 261], "022": [217, 218, 219, 259, 260, 261], "76": [217, 218, 219, 259, 260, 261], "g185c18e6": [217, 218, 219, 259, 260, 261], "319": [217, 218, 219, 259, 260, 261], "g97422602b8": [217, 218, 219, 259, 260, 261], "g1354dcf": [217, 218, 219, 259, 260, 261], "g042ee198": [217, 219, 259, 261], "g886cf6de": [217, 218, 219, 259, 260, 261], "gf1e2bf5": [217, 219, 259, 261], "g712b04d": [217, 218, 219, 259, 260, 261], "g32ed5fa12": [217, 218, 219, 259, 260, 261], "g3367d725": [217, 219, 259, 261], "g046077b8": [218, 260], "g07bf4ab": [218, 260], "boundari": 223, "cont1": [223, 230, 231], "cont2": [223, 230, 231], "bucketize_op": 223, "processor": [223, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 245, 251], "cat_cach": [224, 237, 251], "on_host": [224, 237, 251], "encode_typ": 224, "name_sep": [224, 233, 237, 251], "search_sort": 224, "vocab": 224, "single_t": 224, "cardinality_memory_limit": 224, "tree_width": [224, 237, 251], "split_out": [224, 237, 251], "split_everi": [224, 237, 251], "convent": [224, 233], "oov": 224, "proc": 224, "user_a": 224, "user_b": 224, "user_c": 224, "productid": 224, "10001": 224, "10002": 224, "10003": 224, "30003": 224, "30005": 224, "40005": 224, "freq_limit_valu": 224, "omit": 224, "combo": 224, "adjac": [224, 237, 251], "movement": [224, 237, 251], "searchsort": 224, "num_oov_indic": 224, "modulo": [224, 234, 235], "max_size_valu": 224, "997": 224, "unconstrain": 224, "fit_fin": [224, 230, 237, 241, 242, 244, 246, 251, 252], "process_vocab": 224, "set_storage_path": [224, 237, 246, 251], "new_path": [224, 237, 246, 251], "inference_initi": [224, 231], "inference_config": [224, 231], "logop": [225, 245], "left_featur": 226, "right_featur": 226, "on_devic": 226, "idf": 226, "matric": 226, "document_categori": 226, "outbrain": 226, "cupyx": 226, "scipi": 226, "coo_matrix": 226, "cupi": 226, "document_id": 226, "category_id": 226, "document_id_document_id_promo_sim": 226, "document_id_promo": 226, "sim_featur": 226, "csr_matrix": 226, "partition_col": 227, "lag": 227, "delta": 227, "diff_featur": 227, "quantiti": 227, "min_cardin": 228, "dropna_featur": 229, "cat1": [229, 236, 237, 251], "num1": [229, 236, 237], "add_binary_col": [230, 231], "cont3": [230, 231], "dask_stat": [230, 237, 241, 242, 244, 246, 251, 252], "fill_val": 231, "unwant": 232, "ascend": 233, "incorrect": 233, "prod_id": 233, "dataset_transform": 233, "feature_a": 234, "feature_b": 234, "hash_featur": 234, "90": 234, "num_hash_bucket": 234, "hashed_cross": 235, "df_ext": 236, "on_ext": 236, "columns_ext": 236, "drop_duplicates_ext": 236, "kind_ext": 236, "df_extern": 236, "columns_left": 236, "key2": 236, "key1_ext": 236, "key2_ext": 236, "cat2": [236, 237, 251], "dd": 236, "duplic": 236, "extdata": 236, "cont_col": 237, "cat3": [237, 251], "tmpdir": 237, "workflownod": [237, 253], "var": 237, "pad_valu": 239, "zerofil": 240, "float_dtyp": 244, "choos": 244, "reiniti": [244, 246], "_log": 245, "bundl": 246, "target_mean": 251, "kfold": 251, "fold_se": 251, "p_smooth": 251, "out_col": 251, "drop_fold": 251, "th": 251, "emploi": 251, "te": 251, "mean_cat": 251, "count_cat": 251, "mean_glob": 251, "label1": 251, "label2": 251, "target_encod": 251, "cat_group": 251, "front": 251, "__fold__": 251, "realli": 251, "unittest": 251, "multihot": 252, "sklearn": 253, "cat_column": 253, "cont_column": 253, "train_out_path": 253, "valid_out_path": 253, "beeen": 253, "lazi": 253, "notimplementederror": 253, "unsupoprt": 253, "fit_schema": 253, "subworkflow": 253, "subgraph_nam": 253, "conveni": 253, "modules_byvalu": 253, "ultim": 253, "lieu": 253, "stat_oper": 253, "1a": 255, "1b": 255, "ncf": 255, "guidanc": 255, "2b": 255, "yellow": 255, "latenc": 255, "2a": 255, "retrain": 255, "hi": 255, "her": 255, "viewed_item_id": 255, "4a": 255, "gru": 255, "lstm": 255, "4b": 255, "othersequenti": 255, "casual": 255, "lstm4rec": 255, "xl": 255, "divers": 256, "bring": 257}, "objects": {"": [[9, 0, 0, "-", "merlin"], [17, 0, 0, "-", "merlin_standard_lib"], [22, 0, 0, "-", "transformers4rec"]], "merlin.dag": [[1, 1, 1, "", "BaseOperator"], [2, 1, 1, "", "ColumnSelector"], [3, 1, 1, "", "Graph"], [4, 1, 1, "", "Node"]], "merlin.dag.BaseOperator": [[1, 2, 1, "", "__init__"], [1, 2, 1, "", "column_mapping"], [1, 2, 1, "", "compute_column_schema"], [1, 2, 1, "", "compute_input_schema"], [1, 2, 1, "", "compute_output_schema"], [1, 2, 1, "", "compute_selector"], [1, 2, 1, "", "create_node"], [1, 3, 1, "", "dependencies"], [1, 3, 1, "", "dynamic_dtypes"], [1, 3, 1, "", "is_subgraph"], [1, 3, 1, "", "label"], [1, 2, 1, "", "load_artifacts"], [1, 2, 1, "", "output_column_names"], [1, 3, 1, "", "output_dtype"], [1, 3, 1, "", "output_properties"], [1, 3, 1, "", "output_tags"], [1, 2, 1, "", "save_artifacts"], [1, 3, 1, "", "supported_formats"], [1, 3, 1, "", "supports"], [1, 2, 1, "", "transform"], [1, 2, 1, "", "validate_schemas"]], "merlin.dag.ColumnSelector": [[2, 2, 1, "", "__init__"], [2, 3, 1, "", "all"], [2, 2, 1, "", "filter_columns"], [2, 3, 1, "", "grouped_names"], [2, 3, 1, "", "names"], [2, 2, 1, "", "resolve"], [2, 3, 1, "", "tags"]], "merlin.dag.Graph": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "clear_stats"], [3, 3, 1, "", "column_mapping"], [3, 2, 1, "", "construct_schema"], [3, 2, 1, "", "get_nodes_by_op_type"], [3, 3, 1, "", "input_dtypes"], [3, 3, 1, "", "input_schema"], [3, 3, 1, "", "leaf_nodes"], [3, 3, 1, "", "output_dtypes"], [3, 3, 1, "", "output_schema"], [3, 2, 1, "", "remove_inputs"], [3, 2, 1, "", "subgraph"]], "merlin.dag.Node": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "add_child"], [4, 2, 1, "", "add_dependency"], [4, 2, 1, "", "add_parent"], [4, 3, 1, "", "column_mapping"], [4, 2, 1, "", "compute_schemas"], [4, 2, 1, "", "construct_from"], [4, 3, 1, "", "dependency_columns"], [4, 2, 1, "", "exportable"], [4, 3, 1, "", "graph"], [4, 3, 1, "", "grouped_parents_with_dependencies"], [4, 3, 1, "", "input_columns"], [4, 3, 1, "", "label"], [4, 3, 1, "", "output_columns"], [4, 3, 1, "", "parents_with_dependencies"], [4, 2, 1, "", "remove_child"], [4, 2, 1, "", "remove_inputs"], [4, 3, 1, "", "selector"], [4, 2, 1, "", "validate_schemas"]], "merlin.dataloader.jax": [[67, 1, 1, "", "Loader"]], "merlin.dataloader.jax.Loader": [[67, 2, 1, "", "__init__"]], "merlin.dataloader.loader_base": [[68, 1, 1, "", "ChunkQueue"], [69, 1, 1, "", "LoaderBase"]], "merlin.dataloader.loader_base.ChunkQueue": [[68, 2, 1, "", "__init__"], [68, 2, 1, "", "batch"], [68, 2, 1, "", "chunk_logic"], [68, 3, 1, "", "empty"], [68, 2, 1, "", "get"], [68, 2, 1, "", "get_batch_div_chunk"], [68, 2, 1, "", "load_chunks"], [68, 2, 1, "", "put"], [68, 2, 1, "", "start"], [68, 2, 1, "", "stop"], [68, 3, 1, "", "stopped"]], "merlin.dataloader.loader_base.LoaderBase": [[69, 2, 1, "", "__init__"], [69, 2, 1, "", "array_lib"], [69, 2, 1, "", "epochs"], [69, 3, 1, "", "input_schema"], [69, 2, 1, "", "make_tensors"], [69, 3, 1, "", "output_schema"], [69, 2, 1, "", "peek"], [69, 3, 1, "", "schema"], [69, 2, 1, "", "stop"], [69, 3, 1, "", "transforms"]], "merlin.dataloader.tensorflow": [[70, 1, 1, "", "KerasSequenceValidater"], [71, 1, 1, "", "Loader"]], "merlin.dataloader.tensorflow.KerasSequenceValidater": [[70, 2, 1, "", "__init__"], [70, 2, 1, "", "on_epoch_end"]], "merlin.dataloader.tensorflow.Loader": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "convert_batch"], [71, 2, 1, "", "map"], [71, 2, 1, "", "on_epoch_end"], [71, 2, 1, "", "peek"]], "merlin.dataloader.tf_utils": [[72, 4, 1, "", "HAS_GPU"], [73, 5, 1, "", "configure_tensorflow"], [74, 5, 1, "", "get_dataset_schema_from_feature_columns"]], "merlin.dataloader.torch": [[75, 1, 1, "", "DLDataLoader"], [76, 1, 1, "", "Loader"]], "merlin.dataloader.torch.DLDataLoader": [[75, 2, 1, "", "__init__"], [75, 6, 1, "", "batch_size"], [75, 6, 1, "", "dataset"], [75, 3, 1, "", "device"], [75, 6, 1, "", "drop_last"], [75, 6, 1, "", "num_workers"], [75, 6, 1, "", "pin_memory"], [75, 6, 1, "", "pin_memory_device"], [75, 6, 1, "", "prefetch_factor"], [75, 6, 1, "", "sampler"], [75, 6, 1, "", "timeout"]], "merlin.dataloader.torch.Loader": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "convert_batch"], [76, 2, 1, "", "map"], [76, 2, 1, "", "peek"]], "merlin.io": [[5, 1, 1, "", "Dataset"]], "merlin.io.Dataset": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "compute"], [5, 3, 1, "", "file_partition_map"], [5, 2, 1, "", "head"], [5, 2, 1, "", "infer_schema"], [5, 2, 1, "", "merge"], [5, 3, 1, "", "npartitions"], [5, 3, 1, "", "num_rows"], [5, 3, 1, "", "partition_lens"], [5, 2, 1, "", "persist"], [5, 2, 1, "", "regenerate_dataset"], [5, 2, 1, "", "repartition"], [5, 2, 1, "", "sample_dtypes"], [5, 2, 1, "", "shuffle_by_keys"], [5, 2, 1, "", "tail"], [5, 2, 1, "", "to_cpu"], [5, 2, 1, "", "to_ddf"], [5, 2, 1, "", "to_gpu"], [5, 2, 1, "", "to_hugectr"], [5, 2, 1, "", "to_iter"], [5, 2, 1, "", "to_npy"], [5, 2, 1, "", "to_parquet"], [5, 2, 1, "", "validate_dataset"]], "merlin.models.tf": [[77, 1, 1, "", "AsTabular"], [78, 1, 1, "", "AverageEmbeddingsByWeightFeature"], [79, 1, 1, "", "AvgPrecisionAt"], [80, 1, 1, "", "BinaryClassificationTask"], [81, 1, 1, "", "BinaryOutput"], [82, 1, 1, "", "BroadcastToSequence"], [83, 1, 1, "", "CGCBlock"], [84, 1, 1, "", "CategoricalOutput"], [85, 1, 1, "", "CategoryEncoding"], [86, 1, 1, "", "ColumnBasedSampleWeight"], [87, 1, 1, "", "Cond"], [88, 1, 1, "", "Continuous"], [89, 5, 1, "", "ContinuousEmbedding"], [90, 1, 1, "", "ContinuousFeatures"], [91, 5, 1, "", "ContinuousProjection"], [92, 1, 1, "", "ContrastiveOutput"], [93, 5, 1, "", "CrossBlock"], [94, 5, 1, "", "DCNModel"], [95, 5, 1, "", "DLRMBlock"], [96, 5, 1, "", "DLRMModel"], [97, 5, 1, "", "DeepFMModel"], [98, 5, 1, "", "DenseResidualBlock"], [99, 1, 1, "", "DotProductInteraction"], [100, 1, 1, "", "DualEncoderBlock"], [101, 1, 1, "", "EmbeddingEncoder"], [102, 1, 1, "", "EmbeddingTable"], [103, 5, 1, "", "Embeddings"], [104, 1, 1, "", "Encoder"], [105, 1, 1, "", "ExpandDims"], [106, 5, 1, "", "FMBlock"], [107, 1, 1, "", "FMPairwiseInteraction"], [108, 1, 1, "", "Filter"], [109, 1, 1, "", "HashedCross"], [110, 5, 1, "", "HashedCrossAll"], [111, 1, 1, "", "InBatchSampler"], [112, 5, 1, "", "InputBlock"], [113, 5, 1, "", "InputBlockV2"], [114, 1, 1, "", "ItemRetrievalScorer"], [115, 1, 1, "", "ItemRetrievalTask"], [116, 1, 1, "", "ItemSampler"], [117, 1, 1, "", "L2Norm"], [118, 1, 1, "", "LazyAdam"], [119, 1, 1, "", "Loader"], [120, 5, 1, "", "MLPBlock"], [121, 5, 1, "", "MMOEBlock"], [122, 1, 1, "", "MRRAt"], [123, 1, 1, "", "MapValues"], [124, 5, 1, "", "MatrixFactorizationBlock"], [125, 5, 1, "", "MatrixFactorizationModel"], [126, 5, 1, "", "MatrixFactorizationModelV2"], [127, 1, 1, "", "ModelOutput"], [128, 1, 1, "", "MultiClassClassificationTask"], [129, 1, 1, "", "MultiOptimizer"], [130, 1, 1, "", "NDCGAt"], [131, 1, 1, "", "OptimizerBlocks"], [132, 5, 1, "", "OutputBlock"], [133, 5, 1, "", "PLEBlock"], [134, 1, 1, "", "ParallelBlock"], [135, 1, 1, "", "ParallelPredictionBlock"], [136, 1, 1, "", "PopularityBasedSampler"], [137, 1, 1, "", "PrecisionAt"], [138, 1, 1, "", "PredictionTask"], [139, 5, 1, "", "PredictionTasks"], [140, 1, 1, "", "PrepareFeatures"], [141, 1, 1, "", "PrepareListFeatures"], [142, 1, 1, "", "RecallAt"], [143, 1, 1, "", "RegressionOutput"], [144, 1, 1, "", "RegressionTask"], [145, 1, 1, "", "ReplaceMaskedEmbeddings"], [146, 1, 1, "", "ResidualBlock"], [147, 1, 1, "", "RetrievalModelV2"], [148, 1, 1, "", "SequenceEmbeddingFeatures"], [149, 1, 1, "", "SequenceMaskLast"], [150, 1, 1, "", "SequenceMaskRandom"], [151, 1, 1, "", "SequencePredictLast"], [152, 1, 1, "", "SequencePredictNext"], [153, 1, 1, "", "SequencePredictRandom"], [154, 1, 1, "", "SequenceTargetAsInput"], [155, 1, 1, "", "SequentialBlock"], [156, 1, 1, "", "StochasticSwapNoise"], [157, 1, 1, "", "TabularBlock"], [158, 1, 1, "", "TensorInitializer"], [159, 1, 1, "", "ToDense"], [160, 1, 1, "", "ToOneHot"], [161, 1, 1, "", "ToSparse"], [162, 1, 1, "", "ToTarget"], [163, 1, 1, "", "TopKEncoder"], [164, 1, 1, "", "TopKMetricsAggregator"], [165, 1, 1, "", "TwoTowerBlock"], [166, 5, 1, "", "TwoTowerModel"], [167, 5, 1, "", "TwoTowerModelV2"], [168, 5, 1, "", "WideAndDeepModel"], [169, 5, 1, "", "YoutubeDNNRetrievalModel"], [170, 5, 1, "", "YoutubeDNNRetrievalModelV2"], [180, 5, 1, "", "split_embeddings_on_size"]], "merlin.models.tf.AsTabular": [[77, 2, 1, "", "__init__"], [77, 2, 1, "", "call"], [77, 2, 1, "", "compute_output_shape"], [77, 2, 1, "", "get_config"], [77, 3, 1, "", "is_tabular"]], "merlin.models.tf.AverageEmbeddingsByWeightFeature": [[78, 2, 1, "", "__init__"], [78, 2, 1, "", "call"], [78, 2, 1, "", "compute_output_shape"], [78, 2, 1, "", "from_schema_convention"], [78, 2, 1, "", "get_config"]], "merlin.models.tf.AvgPrecisionAt": [[79, 2, 1, "", "__init__"]], "merlin.models.tf.BinaryClassificationTask": [[80, 6, 1, "", "DEFAULT_LOSS"], [80, 6, 1, "", "DEFAULT_METRICS"], [80, 2, 1, "", "__init__"], [80, 2, 1, "", "call"], [80, 2, 1, "", "compute_output_shape"], [80, 2, 1, "", "from_config"], [80, 2, 1, "", "get_config"]], "merlin.models.tf.BinaryOutput": [[81, 2, 1, "", "__init__"]], "merlin.models.tf.BroadcastToSequence": [[82, 2, 1, "", "__init__"], [82, 2, 1, "", "call"], [82, 2, 1, "", "compute_mask"], [82, 2, 1, "", "compute_output_shape"], [82, 2, 1, "", "from_config"], [82, 2, 1, "", "get_config"]], "merlin.models.tf.CGCBlock": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "call"], [83, 2, 1, "", "compute_call_output_shape"], [83, 2, 1, "", "from_config"], [83, 2, 1, "", "get_config"]], "merlin.models.tf.CategoricalOutput": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "get_config"], [84, 2, 1, "", "to_dataset"]], "merlin.models.tf.CategoryEncoding": [[85, 6, 1, "", "REQUIRES_SCHEMA"], [85, 2, 1, "", "__init__"], [85, 2, 1, "", "call"], [85, 2, 1, "", "compute_output_shape"], [85, 2, 1, "", "get_config"]], "merlin.models.tf.ColumnBasedSampleWeight": [[86, 2, 1, "", "__init__"], [86, 2, 1, "", "call"], [86, 2, 1, "", "compute_output_shape"], [86, 2, 1, "", "get_config"]], "merlin.models.tf.Cond": [[87, 2, 1, "", "__init__"], [87, 2, 1, "", "build"], [87, 2, 1, "", "call"], [87, 2, 1, "", "compute_output_shape"], [87, 2, 1, "", "from_config"], [87, 2, 1, "", "get_config"]], "merlin.models.tf.Continuous": [[88, 2, 1, "", "__init__"]], "merlin.models.tf.ContinuousFeatures": [[90, 2, 1, "", "__init__"], [90, 2, 1, "", "call"], [90, 2, 1, "", "compute_call_output_shape"], [90, 2, 1, "", "from_features"], [90, 2, 1, "", "get_config"], [90, 2, 1, "", "repr_extra"], [90, 2, 1, "", "repr_ignore"]], "merlin.models.tf.ContrastiveOutput": [[92, 2, 1, "", "__init__"], [92, 2, 1, "", "build"], [92, 2, 1, "", "call"], [92, 2, 1, "", "call_contrastive"], [92, 2, 1, "", "embedding_lookup"], [92, 2, 1, "", "from_config"], [92, 2, 1, "", "get_config"], [92, 3, 1, "", "has_candidate_weights"], [92, 3, 1, "", "keys"], [92, 2, 1, "", "outputs"], [92, 2, 1, "", "sample_negatives"], [92, 2, 1, "", "set_negative_samplers"], [92, 2, 1, "", "to_dataset"]], "merlin.models.tf.DotProductInteraction": [[99, 2, 1, "", "__init__"], [99, 2, 1, "", "build"], [99, 2, 1, "", "call"], [99, 2, 1, "", "compute_output_shape"], [99, 2, 1, "", "get_config"]], "merlin.models.tf.DualEncoderBlock": [[100, 2, 1, "", "__init__"], [100, 2, 1, "", "from_config"], [100, 2, 1, "", "item_block"], [100, 2, 1, "", "query_block"]], "merlin.models.tf.EmbeddingEncoder": [[101, 2, 1, "", "__init__"], [101, 2, 1, "", "to_dataset"]], "merlin.models.tf.EmbeddingTable": [[102, 2, 1, "", "__init__"], [102, 2, 1, "", "build"], [102, 2, 1, "", "call"], [102, 2, 1, "", "compute_call_output_shape"], [102, 2, 1, "", "compute_output_shape"], [102, 2, 1, "", "from_config"], [102, 2, 1, "", "from_dataset"], [102, 2, 1, "", "from_pretrained"], [102, 2, 1, "", "get_config"], [102, 2, 1, "", "select_by_tag"], [102, 2, 1, "", "to_dataset"], [102, 2, 1, "", "to_df"]], "merlin.models.tf.Encoder": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "batch_predict"], [104, 2, 1, "", "build"], [104, 2, 1, "", "call"], [104, 2, 1, "", "compute_output_shape"], [104, 2, 1, "", "encode"], [104, 3, 1, "", "first"], [104, 2, 1, "", "fit"], [104, 2, 1, "", "from_config"], [104, 2, 1, "", "get_config"], [104, 3, 1, "", "has_schema"], [104, 3, 1, "", "last"], [104, 2, 1, "", "save"], [104, 3, 1, "", "schema"], [104, 3, 1, "", "to_call"], [104, 2, 1, "", "train_step"]], "merlin.models.tf.ExpandDims": [[105, 2, 1, "", "__init__"], [105, 2, 1, "", "call"], [105, 2, 1, "", "compute_output_shape"]], "merlin.models.tf.FMPairwiseInteraction": [[107, 2, 1, "", "__init__"], [107, 2, 1, "", "call"], [107, 2, 1, "", "compute_output_shape"]], "merlin.models.tf.Filter": [[108, 2, 1, "", "__init__"], [108, 2, 1, "", "call"], [108, 2, 1, "", "check_feature"], [108, 2, 1, "", "compute_call_output_shape"], [108, 2, 1, "", "get_config"], [108, 2, 1, "", "select_by_tag"], [108, 2, 1, "", "set_schema"]], "merlin.models.tf.HashedCross": [[109, 2, 1, "", "__init__"], [109, 2, 1, "", "call"], [109, 2, 1, "", "compute_output_shape"], [109, 2, 1, "", "get_config"]], "merlin.models.tf.InBatchSampler": [[111, 2, 1, "", "__init__"], [111, 2, 1, "", "add"], [111, 3, 1, "", "batch_size"], [111, 2, 1, "", "build"], [111, 2, 1, "", "call"], [111, 2, 1, "", "get_config"], [111, 2, 1, "", "sample"], [111, 2, 1, "", "set_batch_size"]], "merlin.models.tf.ItemRetrievalScorer": [[114, 2, 1, "", "__init__"], [114, 2, 1, "", "build"], [114, 2, 1, "", "call"], [114, 2, 1, "", "call_outputs"], [114, 2, 1, "", "from_config"], [114, 2, 1, "", "get_config"], [114, 2, 1, "", "set_required_features"]], "merlin.models.tf.ItemRetrievalTask": [[115, 6, 1, "", "DEFAULT_LOSS"], [115, 6, 1, "", "DEFAULT_METRICS"], [115, 2, 1, "", "__init__"], [115, 2, 1, "", "call"], [115, 2, 1, "", "from_config"], [115, 2, 1, "", "get_config"], [115, 3, 1, "", "retrieval_scorer"], [115, 2, 1, "", "set_retrieval_cache_query"]], "merlin.models.tf.ItemSampler": [[116, 2, 1, "", "__init__"], [116, 2, 1, "", "add"], [116, 3, 1, "", "max_num_samples"], [116, 3, 1, "", "required_features"], [116, 2, 1, "", "sample"], [116, 2, 1, "", "set_max_num_samples"]], "merlin.models.tf.L2Norm": [[117, 2, 1, "", "__init__"], [117, 2, 1, "", "call"], [117, 2, 1, "", "compute_output_shape"]], "merlin.models.tf.LazyAdam": [[118, 2, 1, "", "__init__"], [118, 2, 1, "", "get_weights"]], "merlin.models.tf.Loader": [[119, 2, 1, "", "__init__"], [119, 3, 1, "", "has_transforms"], [119, 3, 1, "", "output_schema"]], "merlin.models.tf.MRRAt": [[122, 2, 1, "", "__init__"]], "merlin.models.tf.MapValues": [[123, 2, 1, "", "__init__"], [123, 2, 1, "", "call"], [123, 2, 1, "", "compute_output_shape"], [123, 2, 1, "", "from_config"], [123, 2, 1, "", "get_config"]], "merlin.models.tf.ModelOutput": [[127, 2, 1, "", "__init__"], [127, 2, 1, "", "build"], [127, 2, 1, "", "call"], [127, 2, 1, "", "compute_output_shape"], [127, 2, 1, "", "create_default_metrics"], [127, 2, 1, "", "from_config"], [127, 2, 1, "", "get_config"], [127, 2, 1, "", "get_task_name"], [127, 3, 1, "", "task_name"]], "merlin.models.tf.MultiClassClassificationTask": [[128, 6, 1, "", "DEFAULT_LOSS"], [128, 6, 1, "", "DEFAULT_METRICS"], [128, 2, 1, "", "__init__"], [128, 2, 1, "", "call"], [128, 2, 1, "", "from_schema"]], "merlin.models.tf.MultiOptimizer": [[129, 2, 1, "", "__init__"], [129, 2, 1, "", "add"], [129, 2, 1, "", "apply_gradients"], [129, 2, 1, "", "from_config"], [129, 2, 1, "", "get_config"], [129, 3, 1, "", "iterations"], [129, 3, 1, "", "optimizers"], [129, 2, 1, "", "update"], [129, 2, 1, "", "variables"], [129, 3, 1, "", "weights"]], "merlin.models.tf.NDCGAt": [[130, 2, 1, "", "__init__"]], "merlin.models.tf.OptimizerBlocks": [[131, 2, 1, "", "__init__"], [131, 6, 1, "", "blocks"], [131, 2, 1, "", "from_config"], [131, 2, 1, "", "get_config"], [131, 6, 1, "", "optimizer"]], "merlin.models.tf.ParallelBlock": [[134, 2, 1, "", "__init__"], [134, 2, 1, "", "add_branch"], [134, 2, 1, "", "apply_to_branch"], [134, 2, 1, "", "build"], [134, 2, 1, "", "call"], [134, 2, 1, "", "compute_call_output_shape"], [134, 3, 1, "", "first"], [134, 2, 1, "", "from_config"], [134, 2, 1, "", "get_config"], [134, 3, 1, "", "layers"], [134, 3, 1, "", "parallel_dict"], [134, 3, 1, "", "parallel_values"], [134, 2, 1, "", "parse_config"], [134, 3, 1, "", "schema"], [134, 2, 1, "", "select_by_name"], [134, 2, 1, "", "select_by_names"], [134, 2, 1, "", "select_by_tag"]], "merlin.models.tf.ParallelPredictionBlock": [[135, 2, 1, "", "__init__"], [135, 2, 1, "", "add_task"], [135, 2, 1, "", "call"], [135, 2, 1, "", "compute_call_output_shape"], [135, 2, 1, "", "from_config"], [135, 2, 1, "", "from_schema"], [135, 2, 1, "", "get_config"], [135, 2, 1, "", "get_tasks_from_schema"], [135, 6, 1, "", "parallel_layers"], [135, 2, 1, "", "pop_labels"], [135, 2, 1, "", "repr_ignore"], [135, 3, 1, "", "task_blocks"], [135, 3, 1, "", "task_names"], [135, 2, 1, "", "task_names_from_schema"]], "merlin.models.tf.PopularityBasedSampler": [[136, 2, 1, "", "__init__"], [136, 2, 1, "", "add"], [136, 2, 1, "", "call"], [136, 2, 1, "", "get_config"], [136, 2, 1, "", "get_distribution_probs"], [136, 2, 1, "", "sample"]], "merlin.models.tf.PrecisionAt": [[137, 2, 1, "", "__init__"]], "merlin.models.tf.PredictionTask": [[138, 2, 1, "", "__init__"], [138, 2, 1, "", "build"], [138, 2, 1, "", "build_task"], [138, 2, 1, "", "child_name"], [138, 2, 1, "", "compute_output_shape"], [138, 2, 1, "", "create_default_metrics"], [138, 2, 1, "", "from_config"], [138, 2, 1, "", "get_config"], [138, 2, 1, "", "pre_call"], [138, 3, 1, "", "pre_eval_topk"], [138, 2, 1, "", "pre_loss"], [138, 3, 1, "", "task_name"]], "merlin.models.tf.PrepareFeatures": [[140, 2, 1, "", "__init__"], [140, 2, 1, "", "call"], [140, 2, 1, "", "compute_call_output_shape"], [140, 2, 1, "", "compute_output_shape"], [140, 2, 1, "", "get_config"]], "merlin.models.tf.PrepareListFeatures": [[141, 2, 1, "", "__init__"], [141, 2, 1, "", "call"], [141, 2, 1, "", "compute_call_output_shape"], [141, 2, 1, "", "compute_output_shape"], [141, 2, 1, "", "get_config"]], "merlin.models.tf.RecallAt": [[142, 2, 1, "", "__init__"]], "merlin.models.tf.RegressionOutput": [[143, 2, 1, "", "__init__"]], "merlin.models.tf.RegressionTask": [[144, 6, 1, "", "DEFAULT_LOSS"], [144, 6, 1, "", "DEFAULT_METRICS"], [144, 2, 1, "", "__init__"], [144, 2, 1, "", "call"], [144, 2, 1, "", "compute_output_shape"], [144, 2, 1, "", "from_config"], [144, 2, 1, "", "get_config"]], "merlin.models.tf.ReplaceMaskedEmbeddings": [[145, 2, 1, "", "__init__"], [145, 2, 1, "", "build"], [145, 2, 1, "", "call"]], "merlin.models.tf.ResidualBlock": [[146, 2, 1, "", "__init__"], [146, 6, 1, "", "parallel_layers"]], "merlin.models.tf.RetrievalModelV2": [[147, 2, 1, "", "__init__"], [147, 2, 1, "", "candidate_embeddings"], [147, 3, 1, "", "candidate_encoder"], [147, 3, 1, "", "encoder"], [147, 2, 1, "", "from_config"], [147, 2, 1, "", "get_config"], [147, 3, 1, "", "has_candidate_encoder"], [147, 2, 1, "", "query_embeddings"], [147, 3, 1, "", "query_encoder"], [147, 2, 1, "", "to_top_k_encoder"]], "merlin.models.tf.SequenceEmbeddingFeatures": [[148, 2, 1, "", "__init__"], [148, 2, 1, "", "compute_call_output_shape"], [148, 2, 1, "", "compute_mask"], [148, 2, 1, "", "get_config"], [148, 2, 1, "", "lookup_feature"]], "merlin.models.tf.SequenceMaskLast": [[149, 2, 1, "", "__init__"], [149, 2, 1, "", "compute_mask"], [149, 2, 1, "", "configure_for_test"], [149, 2, 1, "", "configure_for_train"], [149, 2, 1, "", "from_config"]], "merlin.models.tf.SequenceMaskRandom": [[150, 2, 1, "", "__init__"], [150, 2, 1, "", "compute_mask"], [150, 2, 1, "", "configure_for_test"], [150, 2, 1, "", "configure_for_train"], [150, 2, 1, "", "from_config"], [150, 2, 1, "", "get_config"]], "merlin.models.tf.SequencePredictLast": [[151, 2, 1, "", "__init__"], [151, 2, 1, "", "call"], [151, 2, 1, "", "compute_mask"], [151, 2, 1, "", "compute_output_shape"]], "merlin.models.tf.SequencePredictNext": [[152, 2, 1, "", "__init__"], [152, 2, 1, "", "call"], [152, 2, 1, "", "compute_mask"], [152, 2, 1, "", "compute_output_shape"], [152, 2, 1, "", "configure_for_test"], [152, 2, 1, "", "configure_for_train"]], "merlin.models.tf.SequencePredictRandom": [[153, 2, 1, "", "__init__"], [153, 2, 1, "", "call"], [153, 2, 1, "", "compute_mask"]], "merlin.models.tf.SequenceTargetAsInput": [[154, 2, 1, "", "__init__"], [154, 2, 1, "", "call"], [154, 2, 1, "", "from_config"]], "merlin.models.tf.SequentialBlock": [[155, 2, 1, "", "__init__"], [155, 2, 1, "", "build"], [155, 2, 1, "", "call"], [155, 2, 1, "", "call_outputs"], [155, 2, 1, "", "compute_loss"], [155, 2, 1, "", "compute_output_shape"], [155, 2, 1, "", "compute_output_signature"], [155, 3, 1, "", "filter_features"], [155, 3, 1, "", "first"], [155, 2, 1, "", "from_config"], [155, 2, 1, "", "get_config"], [155, 3, 1, "", "inputs"], [155, 3, 1, "", "is_tabular"], [155, 3, 1, "", "last"], [155, 3, 1, "", "losses"], [155, 3, 1, "", "non_trainable_weights"], [155, 3, 1, "", "regularizers"], [155, 2, 1, "", "set_schema"], [155, 3, 1, "", "trainable"], [155, 3, 1, "", "trainable_weights"]], "merlin.models.tf.StochasticSwapNoise": [[156, 2, 1, "", "__init__"], [156, 2, 1, "", "augment"], [156, 2, 1, "", "call"], [156, 2, 1, "", "compute_output_shape"], [156, 2, 1, "", "get_config"]], "merlin.models.tf.TabularBlock": [[157, 2, 1, "", "__init__"], [157, 3, 1, "", "aggregation"], [157, 2, 1, "", "apply_to_all"], [157, 2, 1, "", "build"], [157, 2, 1, "", "calculate_batch_size_from_input_shapes"], [157, 2, 1, "", "call"], [157, 2, 1, "", "compute_call_output_shape"], [157, 2, 1, "", "compute_output_shape"], [157, 2, 1, "", "from_config"], [157, 2, 1, "", "from_features"], [157, 2, 1, "", "from_schema"], [157, 2, 1, "", "get_config"], [157, 3, 1, "", "is_input"], [157, 3, 1, "", "is_tabular"], [157, 3, 1, "", "post"], [157, 2, 1, "", "post_call"], [157, 3, 1, "", "pre"], [157, 2, 1, "", "pre_call"], [157, 2, 1, "", "repr_add"], [157, 2, 1, "", "repr_extra"], [157, 2, 1, "", "repr_ignore"], [157, 2, 1, "", "select_by_tag"], [157, 2, 1, "", "set_aggregation"], [157, 2, 1, "", "set_post"], [157, 2, 1, "", "set_pre"], [157, 2, 1, "", "set_schema"], [157, 2, 1, "", "super"]], "merlin.models.tf.TensorInitializer": [[158, 2, 1, "", "__init__"], [158, 2, 1, "", "from_dataset"], [158, 2, 1, "", "get_config"]], "merlin.models.tf.ToDense": [[159, 2, 1, "", "__init__"], [159, 2, 1, "", "call"]], "merlin.models.tf.ToOneHot": [[160, 2, 1, "", "__init__"], [160, 2, 1, "", "call_outputs"], [160, 2, 1, "", "compute_output_shape"]], "merlin.models.tf.ToSparse": [[161, 2, 1, "", "__init__"], [161, 2, 1, "", "call"]], "merlin.models.tf.ToTarget": [[162, 2, 1, "", "__init__"], [162, 2, 1, "", "call"], [162, 2, 1, "", "compute_output_schema"], [162, 2, 1, "", "compute_output_shape"]], "merlin.models.tf.TopKEncoder": [[163, 2, 1, "", "__init__"], [163, 2, 1, "", "batch_predict"], [163, 2, 1, "", "compile"], [163, 2, 1, "", "encode_candidates"], [163, 2, 1, "", "fit"], [163, 2, 1, "", "from_candidate_dataset"], [163, 2, 1, "", "index_candidates"], [163, 3, 1, "", "topk_layer"]], "merlin.models.tf.TopKMetricsAggregator": [[164, 2, 1, "", "__init__"], [164, 2, 1, "", "default_metrics"], [164, 2, 1, "", "from_config"], [164, 2, 1, "", "get_config"], [164, 2, 1, "", "result"], [164, 2, 1, "", "update_state"]], "merlin.models.tf.TwoTowerBlock": [[165, 2, 1, "", "__init__"], [165, 6, 1, "", "parallel_layers"]], "merlin.models.tf.losses": [[171, 1, 1, "", "BPRLoss"], [172, 1, 1, "", "BPRmaxLoss"], [173, 1, 1, "", "CategoricalCrossEntropy"], [174, 1, 1, "", "HingeLoss"], [175, 1, 1, "", "LogisticLoss"], [176, 1, 1, "", "SparseCategoricalCrossEntropy"], [177, 1, 1, "", "TOP1Loss"], [178, 1, 1, "", "TOP1maxLoss"], [179, 1, 1, "", "TOP1v2Loss"]], "merlin.models.tf.losses.BPRLoss": [[171, 2, 1, "", "__init__"], [171, 2, 1, "", "compute"]], "merlin.models.tf.losses.BPRmaxLoss": [[172, 2, 1, "", "__init__"], [172, 2, 1, "", "compute"]], "merlin.models.tf.losses.CategoricalCrossEntropy": [[173, 2, 1, "", "__init__"]], "merlin.models.tf.losses.HingeLoss": [[174, 2, 1, "", "__init__"], [174, 2, 1, "", "compute"]], "merlin.models.tf.losses.LogisticLoss": [[175, 2, 1, "", "__init__"], [175, 2, 1, "", "compute"]], "merlin.models.tf.losses.SparseCategoricalCrossEntropy": [[176, 2, 1, "", "__init__"]], "merlin.models.tf.losses.TOP1Loss": [[177, 2, 1, "", "__init__"], [177, 2, 1, "", "compute"]], "merlin.models.tf.losses.TOP1maxLoss": [[178, 2, 1, "", "__init__"], [178, 2, 1, "", "compute"]], "merlin.models.tf.losses.TOP1v2Loss": [[179, 2, 1, "", "__init__"], [179, 2, 1, "", "compute"]], "merlin.models.utils.misc_utils": [[181, 1, 1, "", "Timing"], [182, 5, 1, "", "filter_kwargs"], [183, 5, 1, "", "get_filenames"], [184, 5, 1, "", "get_label_feature_name"], [185, 5, 1, "", "get_object_size"], [186, 5, 1, "", "get_parquet_files_names"], [187, 5, 1, "", "get_timestamp_feature_name"], [188, 5, 1, "", "safe_json"], [189, 5, 1, "", "validate_dataset"]], "merlin.models.utils.misc_utils.Timing": [[181, 2, 1, "", "__init__"]], "merlin.models.utils.registry": [[190, 1, 1, "", "Registry"], [191, 1, 1, "", "RegistryMixin"], [192, 5, 1, "", "camelcase_to_snakecase"], [193, 5, 1, "", "default_name"], [194, 5, 1, "", "default_object_name"], [195, 5, 1, "", "display_list_by_prefix"], [196, 5, 1, "", "snakecase_to_camelcase"]], "merlin.models.utils.registry.Registry": [[190, 2, 1, "", "__init__"], [190, 2, 1, "", "class_registry"], [190, 2, 1, "", "default_key"], [190, 2, 1, "", "get"], [190, 2, 1, "", "items"], [190, 2, 1, "", "keys"], [190, 3, 1, "", "name"], [190, 2, 1, "", "on_set"], [190, 2, 1, "", "parse"], [190, 2, 1, "", "register"], [190, 2, 1, "", "register_with_multiple_names"], [190, 2, 1, "", "validate"], [190, 2, 1, "", "values"]], "merlin.models.utils.registry.RegistryMixin": [[191, 2, 1, "", "__init__"], [191, 2, 1, "", "parse"], [191, 6, 1, "", "registry"]], "merlin.models.utils.schema_utils": [[197, 5, 1, "", "categorical_cardinalities"], [198, 5, 1, "", "categorical_domains"], [199, 5, 1, "", "create_categorical_column"], [200, 5, 1, "", "create_continuous_column"], [201, 5, 1, "", "filter_dict_by_schema"], [202, 5, 1, "", "get_embedding_size_from_cardinality"], [203, 5, 1, "", "get_embedding_sizes_from_schema"], [204, 5, 1, "", "schema_to_tensorflow_metadata_json"], [205, 5, 1, "", "select_targets"], [206, 5, 1, "", "tensorflow_metadata_json_to_schema"]], "merlin.schema": [[6, 1, 1, "", "ColumnSchema"], [7, 1, 1, "", "Schema"], [8, 1, 1, "", "Tags"]], "merlin.schema.ColumnSchema": [[6, 2, 1, "", "__init__"], [6, 6, 1, "", "dims"], [6, 6, 1, "", "dtype"], [6, 3, 1, "", "float_domain"], [6, 3, 1, "", "int_domain"], [6, 6, 1, "", "is_list"], [6, 6, 1, "", "is_ragged"], [6, 6, 1, "", "name"], [6, 6, 1, "", "properties"], [6, 3, 1, "", "shape"], [6, 6, 1, "", "tags"], [6, 3, 1, "", "value_count"], [6, 2, 1, "", "with_dtype"], [6, 2, 1, "", "with_name"], [6, 2, 1, "", "with_properties"], [6, 2, 1, "", "with_shape"], [6, 2, 1, "", "with_tags"]], "merlin.schema.Schema": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "apply"], [7, 2, 1, "", "apply_inverse"], [7, 3, 1, "", "column_names"], [7, 2, 1, "", "copy"], [7, 2, 1, "", "excluding"], [7, 2, 1, "", "excluding_by_name"], [7, 2, 1, "", "excluding_by_tag"], [7, 3, 1, "", "first"], [7, 2, 1, "", "get"], [7, 2, 1, "", "remove_by_tag"], [7, 2, 1, "", "remove_col"], [7, 2, 1, "", "select"], [7, 2, 1, "", "select_by_name"], [7, 2, 1, "", "select_by_tag"], [7, 2, 1, "", "to_pandas"], [7, 2, 1, "", "without"]], "merlin.schema.Tags": [[8, 6, 1, "", "BINARY"], [8, 6, 1, "", "BINARY_CLASSIFICATION"], [8, 6, 1, "", "CATEGORICAL"], [8, 6, 1, "", "CLASSIFICATION"], [8, 6, 1, "", "CONTEXT"], [8, 6, 1, "", "CONTINUOUS"], [8, 6, 1, "", "EMBEDDING"], [8, 6, 1, "", "ID"], [8, 6, 1, "", "ITEM"], [8, 6, 1, "", "ITEM_ID"], [8, 6, 1, "", "LIST"], [8, 6, 1, "", "MULTI_CLASS"], [8, 6, 1, "", "MULTI_CLASS_CLASSIFICATION"], [8, 6, 1, "", "REGRESSION"], [8, 6, 1, "", "SEQUENCE"], [8, 6, 1, "", "SESSION"], [8, 6, 1, "", "SESSION_ID"], [8, 6, 1, "", "TARGET"], [8, 6, 1, "", "TEXT"], [8, 6, 1, "", "TEXT_TOKENIZED"], [8, 6, 1, "", "TIME"], [8, 6, 1, "", "TOKENIZED"], [8, 6, 1, "", "USER"], [8, 6, 1, "", "USER_ID"], [8, 2, 1, "", "__init__"]], "merlin.systems.dag": [[207, 1, 1, "", "Ensemble"]], "merlin.systems.dag.Ensemble": [[207, 2, 1, "", "__init__"], [207, 2, 1, "", "export"], [207, 3, 1, "", "input_schema"], [207, 2, 1, "", "load"], [207, 3, 1, "", "output_schema"], [207, 2, 1, "", "save"], [207, 2, 1, "", "transform"]], "merlin.systems.dag.ops.fil": [[208, 1, 1, "", "PredictForest"]], "merlin.systems.dag.ops.fil.PredictForest": [[208, 2, 1, "", "__init__"], [208, 2, 1, "", "compute_input_schema"], [208, 2, 1, "", "compute_output_schema"], [208, 2, 1, "", "transform"]], "merlin.systems.dag.ops.implicit": [[209, 1, 1, "", "PredictImplicit"]], "merlin.systems.dag.ops.implicit.PredictImplicit": [[209, 2, 1, "", "__init__"], [209, 2, 1, "", "compute_input_schema"], [209, 2, 1, "", "compute_output_schema"], [209, 2, 1, "", "load_artifacts"], [209, 2, 1, "", "save_artifacts"], [209, 2, 1, "", "transform"]], "merlin.systems.dag.ops.session_filter": [[210, 1, 1, "", "FilterCandidates"]], "merlin.systems.dag.ops.session_filter.FilterCandidates": [[210, 2, 1, "", "__init__"], [210, 2, 1, "", "compute_input_schema"], [210, 2, 1, "", "compute_output_schema"], [210, 3, 1, "", "dependencies"], [210, 2, 1, "", "transform"], [210, 2, 1, "", "validate_schemas"]], "merlin.systems.dag.ops.softmax_sampling": [[211, 1, 1, "", "SoftmaxSampling"]], "merlin.systems.dag.ops.softmax_sampling.SoftmaxSampling": [[211, 2, 1, "", "__init__"], [211, 2, 1, "", "compute_input_schema"], [211, 2, 1, "", "compute_output_schema"], [211, 3, 1, "", "dependencies"], [211, 2, 1, "", "transform"]], "merlin.systems.dag.ops.tensorflow": [[212, 1, 1, "", "PredictTensorflow"]], "merlin.systems.dag.ops.tensorflow.PredictTensorflow": [[212, 2, 1, "", "__init__"], [212, 2, 1, "", "compute_input_schema"], [212, 2, 1, "", "compute_output_schema"], [212, 2, 1, "", "from_path"], [212, 3, 1, "", "supported_formats"], [212, 2, 1, "", "transform"]], "merlin.systems.dag.ops.unroll_features": [[213, 1, 1, "", "UnrollFeatures"]], "merlin.systems.dag.ops.unroll_features.UnrollFeatures": [[213, 2, 1, "", "__init__"], [213, 2, 1, "", "compute_output_schema"], [213, 3, 1, "", "dependencies"], [213, 3, 1, "", "supported_formats"], [213, 2, 1, "", "transform"]], "merlin.systems.dag.ops.workflow": [[214, 1, 1, "", "TransformWorkflow"]], "merlin.systems.dag.ops.workflow.TransformWorkflow": [[214, 2, 1, "", "__init__"], [214, 2, 1, "", "compute_output_schema"], [214, 3, 1, "", "nvt_model_name"], [214, 2, 1, "", "set_nvt_model_name"], [214, 3, 1, "", "supported_formats"], [214, 2, 1, "", "transform"]], "merlin.systems.triton": [[215, 5, 1, "", "convert_df_to_triton_input"], [216, 5, 1, "", "convert_triton_output_to_df"]], "merlin_standard_lib": [[17, 1, 1, "", "ColumnSchema"], [17, 1, 1, "", "Schema"], [17, 5, 1, "", "categorical_cardinalities"], [18, 0, 0, "-", "proto"], [19, 0, 0, "-", "schema"], [20, 0, 0, "-", "utils"]], "merlin_standard_lib.ColumnSchema": [[17, 2, 1, "", "copy"], [17, 2, 1, "", "create_categorical"], [17, 2, 1, "", "create_continuous"], [17, 3, 1, "", "properties"], [17, 3, 1, "", "tags"], [17, 2, 1, "", "to_proto_text"], [17, 2, 1, "", "with_name"], [17, 2, 1, "", "with_properties"], [17, 2, 1, "", "with_tags"], [17, 2, 1, "", "with_tags_based_on_properties"]], "merlin_standard_lib.Schema": [[17, 2, 1, "", "add"], [17, 2, 1, "", "apply"], [17, 2, 1, "", "apply_inverse"], [17, 3, 1, "", "column_names"], [17, 3, 1, "", "column_schemas"], [17, 2, 1, "", "copy"], [17, 2, 1, "", "create"], [17, 6, 1, "", "feature"], [17, 2, 1, "", "filter_column_schemas"], [17, 2, 1, "", "filter_columns_from_dict"], [17, 2, 1, "", "from_json"], [17, 2, 1, "", "from_proto_text"], [17, 3, 1, "", "item_id_column_name"], [17, 2, 1, "", "map_column_schemas"], [17, 2, 1, "", "remove_by_name"], [17, 2, 1, "", "remove_by_tag"], [17, 2, 1, "", "remove_by_type"], [17, 2, 1, "", "select_by_name"], [17, 2, 1, "", "select_by_tag"], [17, 2, 1, "", "select_by_type"], [17, 2, 1, "", "to_proto_text"], [17, 2, 1, "", "with_tags_based_on_properties"]], "merlin_standard_lib.proto": [[18, 0, 0, "-", "schema_bp"]], "merlin_standard_lib.proto.schema_bp": [[18, 1, 1, "", "Annotation"], [18, 1, 1, "", "BoolDomain"], [18, 1, 1, "", "DatasetConstraints"], [18, 1, 1, "", "DistributionConstraints"], [18, 1, 1, "", "Feature"], [18, 1, 1, "", "FeatureComparator"], [18, 1, 1, "", "FeatureCoverageConstraints"], [18, 1, 1, "", "FeaturePresence"], [18, 1, 1, "", "FeaturePresenceWithinGroup"], [18, 1, 1, "", "FeatureType"], [18, 1, 1, "", "FixedShape"], [18, 1, 1, "", "FixedShapeDim"], [18, 1, 1, "", "FloatDomain"], [18, 1, 1, "", "ImageDomain"], [18, 1, 1, "", "InfinityNorm"], [18, 1, 1, "", "IntDomain"], [18, 1, 1, "", "JensenShannonDivergence"], [18, 1, 1, "", "LifecycleStage"], [18, 1, 1, "", "MIDDomain"], [18, 1, 1, "", "NaturalLanguageDomain"], [18, 1, 1, "", "NumericValueComparator"], [18, 1, 1, "", "Path"], [18, 1, 1, "", "SequenceLengthConstraints"], [18, 1, 1, "", "SequenceValueConstraints"], [18, 1, 1, "", "SparseFeature"], [18, 1, 1, "", "SparseFeatureIndexFeature"], [18, 1, 1, "", "SparseFeatureValueFeature"], [18, 1, 1, "", "StringDomain"], [18, 1, 1, "", "StructDomain"], [18, 1, 1, "", "TensorRepresentation"], [18, 1, 1, "", "TensorRepresentationDefaultValue"], [18, 1, 1, "", "TensorRepresentationDenseTensor"], [18, 1, 1, "", "TensorRepresentationGroup"], [18, 1, 1, "", "TensorRepresentationRaggedTensor"], [18, 1, 1, "", "TensorRepresentationRaggedTensorPartition"], [18, 1, 1, "", "TensorRepresentationRowPartitionDType"], [18, 1, 1, "", "TensorRepresentationSparseTensor"], [18, 1, 1, "", "TensorRepresentationVarLenSparseTensor"], [18, 1, 1, "", "TimeDomain"], [18, 1, 1, "", "TimeDomainIntegerTimeFormat"], [18, 1, 1, "", "TimeOfDayDomain"], [18, 1, 1, "", "TimeOfDayDomainIntegerTimeOfDayFormat"], [18, 1, 1, "", "URLDomain"], [18, 1, 1, "", "UniqueConstraints"], [18, 1, 1, "", "ValueCount"], [18, 1, 1, "", "ValueCountList"], [18, 1, 1, "", "WeightedFeature"]], "merlin_standard_lib.proto.schema_bp.Annotation": [[18, 6, 1, "", "comment"], [18, 6, 1, "", "extra_metadata"], [18, 3, 1, "", "metadata"], [18, 6, 1, "", "tag"]], "merlin_standard_lib.proto.schema_bp.BoolDomain": [[18, 6, 1, "", "false_value"], [18, 6, 1, "", "name"], [18, 6, 1, "", "true_value"]], "merlin_standard_lib.proto.schema_bp.DatasetConstraints": [[18, 6, 1, "", "max_examples_count"], [18, 6, 1, "", "min_examples_count"], [18, 6, 1, "", "num_examples_drift_comparator"], [18, 6, 1, "", "num_examples_version_comparator"]], "merlin_standard_lib.proto.schema_bp.DistributionConstraints": [[18, 6, 1, "", "min_domain_mass"]], "merlin_standard_lib.proto.schema_bp.Feature": [[18, 6, 1, "", "annotation"], [18, 6, 1, "", "bool_domain"], [18, 6, 1, "", "deprecated"], [18, 6, 1, "", "distribution_constraints"], [18, 6, 1, "", "domain"], [18, 6, 1, "", "drift_comparator"], [18, 6, 1, "", "float_domain"], [18, 6, 1, "", "group_presence"], [18, 6, 1, "", "image_domain"], [18, 6, 1, "", "in_environment"], [18, 6, 1, "", "int_domain"], [18, 6, 1, "", "lifecycle_stage"], [18, 6, 1, "", "mid_domain"], [18, 6, 1, "", "name"], [18, 6, 1, "", "natural_language_domain"], [18, 6, 1, "", "not_in_environment"], [18, 6, 1, "", "presence"], [18, 6, 1, "", "shape"], [18, 6, 1, "", "skew_comparator"], [18, 6, 1, "", "string_domain"], [18, 6, 1, "", "struct_domain"], [18, 6, 1, "", "time_domain"], [18, 6, 1, "", "time_of_day_domain"], [18, 6, 1, "", "type"], [18, 6, 1, "", "unique_constraints"], [18, 6, 1, "", "url_domain"], [18, 6, 1, "", "value_count"], [18, 6, 1, "", "value_counts"]], "merlin_standard_lib.proto.schema_bp.FeatureComparator": [[18, 6, 1, "", "infinity_norm"], [18, 6, 1, "", "jensen_shannon_divergence"]], "merlin_standard_lib.proto.schema_bp.FeatureCoverageConstraints": [[18, 6, 1, "", "excluded_int_tokens"], [18, 6, 1, "", "excluded_string_tokens"], [18, 6, 1, "", "min_avg_token_length"], [18, 6, 1, "", "min_coverage"], [18, 6, 1, "", "oov_string_tokens"]], "merlin_standard_lib.proto.schema_bp.FeaturePresence": [[18, 6, 1, "", "min_count"], [18, 6, 1, "", "min_fraction"]], "merlin_standard_lib.proto.schema_bp.FeaturePresenceWithinGroup": [[18, 6, 1, "", "required"]], "merlin_standard_lib.proto.schema_bp.FeatureType": [[18, 6, 1, "", "BYTES"], [18, 6, 1, "", "FLOAT"], [18, 6, 1, "", "INT"], [18, 6, 1, "", "STRUCT"], [18, 6, 1, "", "TYPE_UNKNOWN"]], "merlin_standard_lib.proto.schema_bp.FixedShape": [[18, 6, 1, "", "dim"]], "merlin_standard_lib.proto.schema_bp.FixedShapeDim": [[18, 6, 1, "", "name"], [18, 6, 1, "", "size"]], "merlin_standard_lib.proto.schema_bp.FloatDomain": [[18, 6, 1, "", "disallow_inf"], [18, 6, 1, "", "disallow_nan"], [18, 6, 1, "", "is_embedding"], [18, 6, 1, "", "max"], [18, 6, 1, "", "min"], [18, 6, 1, "", "name"]], "merlin_standard_lib.proto.schema_bp.ImageDomain": [[18, 6, 1, "", "max_image_byte_size"], [18, 6, 1, "", "minimum_supported_image_fraction"]], "merlin_standard_lib.proto.schema_bp.InfinityNorm": [[18, 6, 1, "", "threshold"]], "merlin_standard_lib.proto.schema_bp.IntDomain": [[18, 6, 1, "", "is_categorical"], [18, 6, 1, "", "max"], [18, 6, 1, "", "min"], [18, 6, 1, "", "name"]], "merlin_standard_lib.proto.schema_bp.JensenShannonDivergence": [[18, 6, 1, "", "threshold"]], "merlin_standard_lib.proto.schema_bp.LifecycleStage": [[18, 6, 1, "", "ALPHA"], [18, 6, 1, "", "BETA"], [18, 6, 1, "", "DEBUG_ONLY"], [18, 6, 1, "", "DEPRECATED"], [18, 6, 1, "", "DISABLED"], [18, 6, 1, "", "PLANNED"], [18, 6, 1, "", "PRODUCTION"], [18, 6, 1, "", "UNKNOWN_STAGE"]], "merlin_standard_lib.proto.schema_bp.NaturalLanguageDomain": [[18, 6, 1, "", "coverage"], [18, 6, 1, "", "location_constraint_regex"], [18, 6, 1, "", "sequence_length_constraints"], [18, 6, 1, "", "token_constraints"], [18, 6, 1, "", "vocabulary"]], "merlin_standard_lib.proto.schema_bp.NumericValueComparator": [[18, 6, 1, "", "max_fraction_threshold"], [18, 6, 1, "", "min_fraction_threshold"]], "merlin_standard_lib.proto.schema_bp.Path": [[18, 6, 1, "", "step"]], "merlin_standard_lib.proto.schema_bp.SequenceLengthConstraints": [[18, 6, 1, "", "excluded_int_value"], [18, 6, 1, "", "excluded_string_value"], [18, 6, 1, "", "max_sequence_length"], [18, 6, 1, "", "min_sequence_length"]], "merlin_standard_lib.proto.schema_bp.SequenceValueConstraints": [[18, 6, 1, "", "int_value"], [18, 6, 1, "", "max_fraction_of_sequences"], [18, 6, 1, "", "max_per_sequence"], [18, 6, 1, "", "min_fraction_of_sequences"], [18, 6, 1, "", "min_per_sequence"], [18, 6, 1, "", "string_value"]], "merlin_standard_lib.proto.schema_bp.SparseFeature": [[18, 6, 1, "", "dense_shape"], [18, 6, 1, "", "deprecated"], [18, 6, 1, "", "index_feature"], [18, 6, 1, "", "is_sorted"], [18, 6, 1, "", "lifecycle_stage"], [18, 6, 1, "", "name"], [18, 6, 1, "", "presence"], [18, 6, 1, "", "type"], [18, 6, 1, "", "value_feature"]], "merlin_standard_lib.proto.schema_bp.SparseFeatureIndexFeature": [[18, 6, 1, "", "name"]], "merlin_standard_lib.proto.schema_bp.SparseFeatureValueFeature": [[18, 6, 1, "", "name"]], "merlin_standard_lib.proto.schema_bp.StringDomain": [[18, 6, 1, "", "name"], [18, 6, 1, "", "value"]], "merlin_standard_lib.proto.schema_bp.StructDomain": [[18, 6, 1, "", "feature"], [18, 6, 1, "", "sparse_feature"]], "merlin_standard_lib.proto.schema_bp.TensorRepresentation": [[18, 6, 1, "", "dense_tensor"], [18, 6, 1, "", "ragged_tensor"], [18, 6, 1, "", "sparse_tensor"], [18, 6, 1, "", "varlen_sparse_tensor"]], "merlin_standard_lib.proto.schema_bp.TensorRepresentationDefaultValue": [[18, 6, 1, "", "bytes_value"], [18, 6, 1, "", "float_value"], [18, 6, 1, "", "int_value"], [18, 6, 1, "", "uint_value"]], "merlin_standard_lib.proto.schema_bp.TensorRepresentationDenseTensor": [[18, 6, 1, "", "column_name"], [18, 6, 1, "", "default_value"], [18, 6, 1, "", "shape"]], "merlin_standard_lib.proto.schema_bp.TensorRepresentationGroup": [[18, 6, 1, "", "tensor_representation"]], "merlin_standard_lib.proto.schema_bp.TensorRepresentationRaggedTensor": [[18, 6, 1, "", "feature_path"], [18, 6, 1, "", "partition"], [18, 6, 1, "", "row_partition_dtype"]], "merlin_standard_lib.proto.schema_bp.TensorRepresentationRaggedTensorPartition": [[18, 6, 1, "", "row_length"], [18, 6, 1, "", "uniform_row_length"]], "merlin_standard_lib.proto.schema_bp.TensorRepresentationRowPartitionDType": [[18, 6, 1, "", "INT32"], [18, 6, 1, "", "INT64"], [18, 6, 1, "", "UNSPECIFIED"]], "merlin_standard_lib.proto.schema_bp.TensorRepresentationSparseTensor": [[18, 6, 1, "", "dense_shape"], [18, 6, 1, "", "index_column_names"], [18, 6, 1, "", "value_column_name"]], "merlin_standard_lib.proto.schema_bp.TensorRepresentationVarLenSparseTensor": [[18, 6, 1, "", "column_name"]], "merlin_standard_lib.proto.schema_bp.TimeDomain": [[18, 6, 1, "", "integer_format"], [18, 6, 1, "", "string_format"]], "merlin_standard_lib.proto.schema_bp.TimeDomainIntegerTimeFormat": [[18, 6, 1, "", "FORMAT_UNKNOWN"], [18, 6, 1, "", "UNIX_DAYS"], [18, 6, 1, "", "UNIX_MICROSECONDS"], [18, 6, 1, "", "UNIX_MILLISECONDS"], [18, 6, 1, "", "UNIX_NANOSECONDS"], [18, 6, 1, "", "UNIX_SECONDS"]], "merlin_standard_lib.proto.schema_bp.TimeOfDayDomain": [[18, 6, 1, "", "integer_format"], [18, 6, 1, "", "string_format"]], "merlin_standard_lib.proto.schema_bp.TimeOfDayDomainIntegerTimeOfDayFormat": [[18, 6, 1, "", "FORMAT_UNKNOWN"], [18, 6, 1, "", "PACKED_64_NANOS"]], "merlin_standard_lib.proto.schema_bp.UniqueConstraints": [[18, 6, 1, "", "max"], [18, 6, 1, "", "min"]], "merlin_standard_lib.proto.schema_bp.ValueCount": [[18, 6, 1, "", "max"], [18, 6, 1, "", "min"]], "merlin_standard_lib.proto.schema_bp.ValueCountList": [[18, 6, 1, "", "value_count"]], "merlin_standard_lib.proto.schema_bp.WeightedFeature": [[18, 6, 1, "", "feature"], [18, 6, 1, "", "lifecycle_stage"], [18, 6, 1, "", "name"], [18, 6, 1, "", "weight_feature"]], "merlin_standard_lib.schema": [[19, 0, 0, "-", "schema"], [19, 0, 0, "-", "tag"]], "merlin_standard_lib.schema.schema": [[19, 1, 1, "", "ColumnSchema"], [19, 1, 1, "", "Schema"], [19, 5, 1, "", "categorical_cardinalities"]], "merlin_standard_lib.schema.schema.ColumnSchema": [[19, 2, 1, "", "copy"], [19, 2, 1, "", "create_categorical"], [19, 2, 1, "", "create_continuous"], [19, 3, 1, "", "properties"], [19, 3, 1, "", "tags"], [19, 2, 1, "", "to_proto_text"], [19, 2, 1, "", "with_name"], [19, 2, 1, "", "with_properties"], [19, 2, 1, "", "with_tags"], [19, 2, 1, "", "with_tags_based_on_properties"]], "merlin_standard_lib.schema.schema.Schema": [[19, 2, 1, "", "add"], [19, 2, 1, "", "apply"], [19, 2, 1, "", "apply_inverse"], [19, 3, 1, "", "column_names"], [19, 3, 1, "", "column_schemas"], [19, 2, 1, "", "copy"], [19, 2, 1, "", "create"], [19, 6, 1, "", "feature"], [19, 2, 1, "", "filter_column_schemas"], [19, 2, 1, "", "filter_columns_from_dict"], [19, 2, 1, "", "from_json"], [19, 2, 1, "", "from_proto_text"], [19, 3, 1, "", "item_id_column_name"], [19, 2, 1, "", "map_column_schemas"], [19, 2, 1, "", "remove_by_name"], [19, 2, 1, "", "remove_by_tag"], [19, 2, 1, "", "remove_by_type"], [19, 2, 1, "", "select_by_name"], [19, 2, 1, "", "select_by_tag"], [19, 2, 1, "", "select_by_type"], [19, 2, 1, "", "to_proto_text"], [19, 2, 1, "", "with_tags_based_on_properties"]], "merlin_standard_lib.schema.tag": [[19, 6, 1, "", "Tag"]], "merlin_standard_lib.utils": [[20, 0, 0, "-", "embedding_utils"]], "merlin_standard_lib.utils.embedding_utils": [[20, 5, 1, "", "get_embedding_size_from_cardinality"], [20, 5, 1, "", "get_embedding_sizes_from_schema"]], "nvtabular.ops": [[220, 1, 1, "", "AddMetadata"], [221, 1, 1, "", "AddProperties"], [222, 1, 1, "", "AddTags"], [223, 1, 1, "", "Bucketize"], [224, 1, 1, "", "Categorify"], [225, 1, 1, "", "Clip"], [226, 1, 1, "", "ColumnSimilarity"], [227, 1, 1, "", "DifferenceLag"], [228, 1, 1, "", "DropLowCardinality"], [229, 1, 1, "", "Dropna"], [230, 1, 1, "", "FillMedian"], [231, 1, 1, "", "FillMissing"], [232, 1, 1, "", "Filter"], [233, 1, 1, "", "Groupby"], [234, 1, 1, "", "HashBucket"], [235, 1, 1, "", "HashedCross"], [236, 1, 1, "", "JoinExternal"], [237, 1, 1, "", "JoinGroupby"], [238, 6, 1, "", "LambdaOp"], [239, 1, 1, "", "ListSlice"], [240, 1, 1, "", "LogOp"], [241, 1, 1, "", "Normalize"], [242, 1, 1, "", "NormalizeMinMax"], [243, 6, 1, "", "Operator"], [244, 1, 1, "", "ReduceDtypeSize"], [245, 1, 1, "", "Rename"], [246, 1, 1, "", "StatOperator"], [247, 1, 1, "", "TagAsItemFeatures"], [248, 1, 1, "", "TagAsItemID"], [249, 1, 1, "", "TagAsUserFeatures"], [250, 1, 1, "", "TagAsUserID"], [251, 1, 1, "", "TargetEncoding"], [252, 1, 1, "", "ValueCount"]], "nvtabular.ops.AddMetadata": [[220, 2, 1, "", "__init__"], [220, 3, 1, "", "output_properties"], [220, 3, 1, "", "output_tags"], [220, 2, 1, "", "transform"]], "nvtabular.ops.AddProperties": [[221, 2, 1, "", "__init__"]], "nvtabular.ops.AddTags": [[222, 2, 1, "", "__init__"]], "nvtabular.ops.Bucketize": [[223, 2, 1, "", "__init__"], [223, 3, 1, "", "output_dtype"], [223, 3, 1, "", "output_tags"], [223, 2, 1, "", "transform"]], "nvtabular.ops.Categorify": [[224, 2, 1, "", "__init__"], [224, 2, 1, "", "clear"], [224, 2, 1, "", "column_mapping"], [224, 2, 1, "", "compute_selector"], [224, 2, 1, "", "fit"], [224, 2, 1, "", "fit_finalize"], [224, 2, 1, "", "get_embedding_sizes"], [224, 2, 1, "", "inference_initialize"], [224, 3, 1, "", "output_dtype"], [224, 3, 1, "", "output_tags"], [224, 2, 1, "", "process_vocabs"], [224, 2, 1, "", "set_storage_path"], [224, 2, 1, "", "transform"]], "nvtabular.ops.Clip": [[225, 2, 1, "", "__init__"], [225, 2, 1, "", "transform"]], "nvtabular.ops.ColumnSimilarity": [[226, 2, 1, "", "__init__"], [226, 2, 1, "", "column_mapping"], [226, 2, 1, "", "compute_selector"], [226, 3, 1, "", "output_dtype"], [226, 3, 1, "", "output_tags"], [226, 2, 1, "", "transform"]], "nvtabular.ops.DifferenceLag": [[227, 2, 1, "", "__init__"], [227, 2, 1, "", "column_mapping"], [227, 3, 1, "", "dependencies"], [227, 3, 1, "", "output_dtype"], [227, 3, 1, "", "output_tags"], [227, 2, 1, "", "transform"]], "nvtabular.ops.DropLowCardinality": [[228, 2, 1, "", "__init__"], [228, 2, 1, "", "compute_selector"], [228, 2, 1, "", "transform"]], "nvtabular.ops.Dropna": [[229, 2, 1, "", "__init__"], [229, 2, 1, "", "transform"]], "nvtabular.ops.FillMedian": [[230, 2, 1, "", "__init__"], [230, 2, 1, "", "clear"], [230, 2, 1, "", "column_mapping"], [230, 2, 1, "", "fit"], [230, 2, 1, "", "fit_finalize"], [230, 2, 1, "", "transform"]], "nvtabular.ops.FillMissing": [[231, 2, 1, "", "__init__"], [231, 2, 1, "", "column_mapping"], [231, 2, 1, "", "inference_initialize"], [231, 2, 1, "", "transform"]], "nvtabular.ops.Filter": [[232, 2, 1, "", "__init__"], [232, 2, 1, "", "transform"]], "nvtabular.ops.Groupby": [[233, 2, 1, "", "__init__"], [233, 2, 1, "", "column_mapping"], [233, 2, 1, "", "compute_output_schema"], [233, 3, 1, "", "dependencies"], [233, 2, 1, "", "transform"]], "nvtabular.ops.HashBucket": [[234, 2, 1, "", "__init__"], [234, 2, 1, "", "get_embedding_sizes"], [234, 3, 1, "", "output_dtype"], [234, 3, 1, "", "output_tags"], [234, 2, 1, "", "transform"]], "nvtabular.ops.HashedCross": [[235, 2, 1, "", "__init__"], [235, 2, 1, "", "column_mapping"], [235, 3, 1, "", "output_dtype"], [235, 2, 1, "", "transform"]], "nvtabular.ops.JoinExternal": [[236, 2, 1, "", "__init__"], [236, 2, 1, "", "column_mapping"], [236, 2, 1, "", "compute_output_schema"], [236, 2, 1, "", "compute_selector"], [236, 2, 1, "", "transform"]], "nvtabular.ops.JoinGroupby": [[237, 2, 1, "", "__init__"], [237, 2, 1, "", "clear"], [237, 2, 1, "", "column_mapping"], [237, 2, 1, "", "compute_selector"], [237, 3, 1, "", "cont_names"], [237, 3, 1, "", "dependencies"], [237, 2, 1, "", "fit"], [237, 2, 1, "", "fit_finalize"], [237, 2, 1, "", "set_storage_path"], [237, 2, 1, "", "transform"]], "nvtabular.ops.ListSlice": [[239, 2, 1, "", "__init__"], [239, 3, 1, "", "output_tags"], [239, 2, 1, "", "transform"]], "nvtabular.ops.LogOp": [[240, 2, 1, "", "__init__"], [240, 3, 1, "", "output_dtype"], [240, 3, 1, "", "output_tags"], [240, 2, 1, "", "transform"]], "nvtabular.ops.Normalize": [[241, 2, 1, "", "__init__"], [241, 2, 1, "", "clear"], [241, 2, 1, "", "fit"], [241, 2, 1, "", "fit_finalize"], [241, 3, 1, "", "output_dtype"], [241, 3, 1, "", "output_tags"], [241, 3, 1, "", "supported_formats"], [241, 3, 1, "", "supports"], [241, 2, 1, "", "transform"]], "nvtabular.ops.NormalizeMinMax": [[242, 2, 1, "", "__init__"], [242, 2, 1, "", "clear"], [242, 2, 1, "", "fit"], [242, 2, 1, "", "fit_finalize"], [242, 3, 1, "", "output_dtype"], [242, 3, 1, "", "output_tags"], [242, 3, 1, "", "supported_formats"], [242, 3, 1, "", "supports"], [242, 2, 1, "", "transform"]], "nvtabular.ops.ReduceDtypeSize": [[244, 2, 1, "", "__init__"], [244, 2, 1, "", "clear"], [244, 2, 1, "", "compute_output_schema"], [244, 2, 1, "", "fit"], [244, 2, 1, "", "fit_finalize"], [244, 2, 1, "", "transform"]], "nvtabular.ops.Rename": [[245, 2, 1, "", "__init__"], [245, 2, 1, "", "column_mapping"], [245, 2, 1, "", "transform"]], "nvtabular.ops.StatOperator": [[246, 2, 1, "", "__init__"], [246, 2, 1, "", "clear"], [246, 2, 1, "", "fit"], [246, 2, 1, "", "fit_finalize"], [246, 6, 1, "", "fitted"], [246, 2, 1, "", "set_storage_path"]], "nvtabular.ops.TagAsItemFeatures": [[247, 2, 1, "", "__init__"]], "nvtabular.ops.TagAsItemID": [[248, 2, 1, "", "__init__"]], "nvtabular.ops.TagAsUserFeatures": [[249, 2, 1, "", "__init__"]], "nvtabular.ops.TagAsUserID": [[250, 2, 1, "", "__init__"]], "nvtabular.ops.TargetEncoding": [[251, 2, 1, "", "__init__"], [251, 2, 1, "", "clear"], [251, 2, 1, "", "column_mapping"], [251, 2, 1, "", "compute_selector"], [251, 3, 1, "", "dependencies"], [251, 2, 1, "", "fit"], [251, 2, 1, "", "fit_finalize"], [251, 3, 1, "", "output_dtype"], [251, 3, 1, "", "output_tags"], [251, 2, 1, "", "set_storage_path"], [251, 3, 1, "", "target_columns"], [251, 2, 1, "", "transform"]], "nvtabular.ops.ValueCount": [[252, 2, 1, "", "__init__"], [252, 2, 1, "", "clear"], [252, 2, 1, "", "fit"], [252, 2, 1, "", "fit_finalize"], [252, 2, 1, "", "transform"]], "nvtabular.workflow.workflow": [[253, 1, 1, "", "Workflow"], [254, 6, 1, "", "WorkflowNode"]], "nvtabular.workflow.workflow.Workflow": [[253, 2, 1, "", "__init__"], [253, 2, 1, "", "clear_stats"], [253, 2, 1, "", "fit"], [253, 2, 1, "", "fit_schema"], [253, 2, 1, "", "fit_transform"], [253, 2, 1, "", "get_subworkflow"], [253, 3, 1, "", "input_dtypes"], [253, 3, 1, "", "input_schema"], [253, 2, 1, "", "load"], [253, 3, 1, "", "output_dtypes"], [253, 3, 1, "", "output_node"], [253, 3, 1, "", "output_schema"], [253, 2, 1, "", "remove_inputs"], [253, 2, 1, "", "save"], [253, 3, 1, "", "subworkflows"], [253, 2, 1, "", "transform"]], "transformers4rec": [[23, 0, 0, "-", "config"], [24, 0, 0, "-", "torch"], [22, 0, 0, "-", "types"], [30, 0, 0, "-", "utils"]], "transformers4rec.config": [[23, 0, 0, "-", "schema"], [23, 0, 0, "-", "trainer"], [23, 0, 0, "-", "transformer"]], "transformers4rec.config.schema": [[23, 1, 1, "", "SchemaMixin"], [23, 5, 1, "", "requires_schema"]], "transformers4rec.config.schema.SchemaMixin": [[23, 6, 1, "", "REQUIRES_SCHEMA"], [23, 2, 1, "", "check_schema"], [23, 2, 1, "", "get_item_ids_from_inputs"], [23, 2, 1, "", "get_padding_mask_from_item_id"], [23, 3, 1, "", "schema"], [23, 2, 1, "", "set_schema"]], "transformers4rec.config.trainer": [[23, 1, 1, "", "T4RecTrainingArguments"], [23, 1, 1, "", "T4RecTrainingArgumentsTF"]], "transformers4rec.config.trainer.T4RecTrainingArguments": [[23, 6, 1, "", "compute_metrics_each_n_steps"], [23, 6, 1, "", "data_loader_engine"], [23, 6, 1, "", "eval_on_test_set"], [23, 6, 1, "", "eval_steps_on_train_set"], [23, 6, 1, "", "experiments_group"], [23, 6, 1, "", "learning_rate_num_cosine_cycles_by_epoch"], [23, 6, 1, "", "log_predictions"], [23, 6, 1, "", "max_sequence_length"], [23, 3, 1, "", "place_model_on_device"], [23, 6, 1, "", "predict_top_k"], [23, 6, 1, "", "shuffle_buffer_size"]], "transformers4rec.config.trainer.T4RecTrainingArgumentsTF": [[23, 6, 1, "", "output_dir"]], "transformers4rec.config.transformer": [[23, 1, 1, "", "AlbertConfig"], [23, 1, 1, "", "BertConfig"], [23, 1, 1, "", "ElectraConfig"], [23, 1, 1, "", "GPT2Config"], [23, 1, 1, "", "LongformerConfig"], [23, 1, 1, "", "ReformerConfig"], [23, 1, 1, "", "RobertaConfig"], [23, 1, 1, "", "T4RecConfig"], [23, 1, 1, "", "TransfoXLConfig"], [23, 1, 1, "", "XLNetConfig"]], "transformers4rec.config.transformer.AlbertConfig": [[23, 2, 1, "", "build"]], "transformers4rec.config.transformer.BertConfig": [[23, 2, 1, "", "build"]], "transformers4rec.config.transformer.ElectraConfig": [[23, 2, 1, "", "build"]], "transformers4rec.config.transformer.GPT2Config": [[23, 2, 1, "", "build"]], "transformers4rec.config.transformer.LongformerConfig": [[23, 2, 1, "", "build"]], "transformers4rec.config.transformer.ReformerConfig": [[23, 2, 1, "", "build"]], "transformers4rec.config.transformer.RobertaConfig": [[23, 2, 1, "", "build"]], "transformers4rec.config.transformer.T4RecConfig": [[23, 2, 1, "", "build"], [23, 2, 1, "", "to_huggingface_torch_model"], [23, 2, 1, "", "to_torch_model"], [23, 3, 1, "", "transformers_config_cls"]], "transformers4rec.config.transformer.TransfoXLConfig": [[23, 2, 1, "", "build"]], "transformers4rec.config.transformer.XLNetConfig": [[23, 2, 1, "", "build"]], "transformers4rec.torch": [[24, 1, 1, "", "AlbertConfig"], [24, 1, 1, "", "AsTabular"], [24, 1, 1, "", "BinaryClassificationTask"], [24, 1, 1, "", "Block"], [24, 1, 1, "", "BlockBase"], [24, 1, 1, "", "ConcatFeatures"], [24, 1, 1, "", "ContinuousFeatures"], [24, 1, 1, "", "ElectraConfig"], [24, 1, 1, "", "ElementwiseSum"], [24, 1, 1, "", "ElementwiseSumItemMulti"], [24, 1, 1, "", "EmbeddingFeatures"], [24, 1, 1, "", "FeatureConfig"], [24, 1, 1, "", "FilterFeatures"], [24, 1, 1, "", "GPT2Config"], [24, 1, 1, "", "Head"], [24, 5, 1, "", "LabelSmoothCrossEntropyLoss"], [24, 1, 1, "", "LongformerConfig"], [24, 1, 1, "", "MLPBlock"], [24, 1, 1, "", "MergeTabular"], [24, 1, 1, "", "Model"], [24, 1, 1, "", "NextItemPredictionTask"], [24, 1, 1, "", "PredictionTask"], [24, 1, 1, "", "PretrainedEmbeddingFeatures"], [24, 1, 1, "", "PretrainedEmbeddingsInitializer"], [24, 1, 1, "", "ReformerConfig"], [24, 1, 1, "", "RegressionTask"], [24, 1, 1, "", "Schema"], [24, 1, 1, "", "SequenceEmbeddingFeatures"], [24, 1, 1, "", "SequentialBlock"], [24, 1, 1, "", "SequentialTabularTransformations"], [24, 1, 1, "", "SoftEmbedding"], [24, 1, 1, "", "SoftEmbeddingFeatures"], [24, 1, 1, "", "StackFeatures"], [24, 1, 1, "", "StochasticSwapNoise"], [24, 1, 1, "", "T4RecConfig"], [24, 1, 1, "", "T4RecTrainingArguments"], [24, 1, 1, "", "TableConfig"], [24, 1, 1, "", "TabularAggregation"], [24, 1, 1, "", "TabularBlock"], [24, 1, 1, "", "TabularDropout"], [24, 1, 1, "", "TabularFeatures"], [24, 1, 1, "", "TabularLayerNorm"], [24, 1, 1, "", "TabularModule"], [24, 1, 1, "", "TabularSequenceFeatures"], [24, 1, 1, "", "TabularTransformation"], [24, 1, 1, "", "Trainer"], [24, 1, 1, "", "TransfoXLConfig"], [24, 1, 1, "", "TransformerBlock"], [24, 1, 1, "", "XLNetConfig"], [25, 0, 0, "-", "block"], [24, 5, 1, "", "build_blocks"], [26, 0, 0, "-", "features"], [24, 0, 0, "-", "masking"], [27, 0, 0, "-", "model"], [24, 0, 0, "-", "ranking_metric"], [24, 5, 1, "", "requires_schema"], [24, 5, 1, "", "right_shift_block"], [28, 0, 0, "-", "tabular"], [24, 0, 0, "-", "trainer"], [24, 0, 0, "-", "typing"], [29, 0, 0, "-", "utils"]], "transformers4rec.torch.AlbertConfig": [[24, 2, 1, "", "build"]], "transformers4rec.torch.AsTabular": [[24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.BinaryClassificationTask": [[24, 6, 1, "", "DEFAULT_LOSS"], [24, 6, 1, "", "DEFAULT_METRICS"], [24, 6, 1, "", "training"]], "transformers4rec.torch.Block": [[24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.BlockBase": [[24, 2, 1, "", "as_tabular"], [24, 2, 1, "", "to_model"]], "transformers4rec.torch.ConcatFeatures": [[24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.ContinuousFeatures": [[24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"], [24, 2, 1, "", "from_features"]], "transformers4rec.torch.ElectraConfig": [[24, 2, 1, "", "build"]], "transformers4rec.torch.ElementwiseSum": [[24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.ElementwiseSumItemMulti": [[24, 6, 1, "", "REQUIRES_SCHEMA"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.EmbeddingFeatures": [[24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"], [24, 2, 1, "", "from_schema"], [24, 3, 1, "", "item_embedding_table"], [24, 2, 1, "", "item_ids"], [24, 2, 1, "", "table_to_embedding_module"]], "transformers4rec.torch.FeatureConfig": [[24, 6, 1, "", "max_sequence_length"], [24, 6, 1, "", "name"], [24, 6, 1, "", "table"]], "transformers4rec.torch.FilterFeatures": [[24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.GPT2Config": [[24, 2, 1, "", "build"]], "transformers4rec.torch.Head": [[24, 2, 1, "", "build"], [24, 2, 1, "", "calculate_metrics"], [24, 2, 1, "", "compute_metrics"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "from_schema"], [24, 2, 1, "", "pop_labels"], [24, 2, 1, "", "reset_metrics"], [24, 3, 1, "", "task_blocks"], [24, 2, 1, "", "to_model"], [24, 6, 1, "", "training"]], "transformers4rec.torch.LongformerConfig": [[24, 2, 1, "", "build"]], "transformers4rec.torch.MLPBlock": [[24, 2, 1, "", "build"]], "transformers4rec.torch.MergeTabular": [[24, 2, 1, "", "build"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"], [24, 3, 1, "", "merge_values"]], "transformers4rec.torch.Model": [[24, 2, 1, "", "calculate_metrics"], [24, 2, 1, "", "compute_metrics"], [24, 2, 1, "", "evaluate"], [24, 2, 1, "", "fit"], [24, 2, 1, "", "forward"], [24, 3, 1, "", "input_schema"], [24, 2, 1, "", "load"], [24, 3, 1, "", "output_schema"], [24, 3, 1, "", "prediction_tasks"], [24, 2, 1, "", "reset_metrics"], [24, 2, 1, "", "save"], [24, 2, 1, "", "to_lightning"], [24, 6, 1, "", "training"]], "transformers4rec.torch.NextItemPredictionTask": [[24, 6, 1, "", "DEFAULT_METRICS"], [24, 2, 1, "", "build"], [24, 2, 1, "", "calculate_metrics"], [24, 2, 1, "", "compute_metrics"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "remove_pad_3d"], [24, 6, 1, "", "training"]], "transformers4rec.torch.PredictionTask": [[24, 2, 1, "", "build"], [24, 2, 1, "", "calculate_metrics"], [24, 2, 1, "", "child_name"], [24, 2, 1, "", "compute_metrics"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "metric_name"], [24, 2, 1, "", "reset_metrics"], [24, 2, 1, "", "set_metrics"], [24, 3, 1, "", "task_name"], [24, 2, 1, "", "to_head"], [24, 2, 1, "", "to_model"], [24, 6, 1, "", "training"]], "transformers4rec.torch.PretrainedEmbeddingFeatures": [[24, 2, 1, "", "build"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"], [24, 2, 1, "", "from_schema"], [24, 2, 1, "", "parse_combiner"]], "transformers4rec.torch.PretrainedEmbeddingsInitializer": [[24, 2, 1, "", "forward"], [24, 6, 1, "", "training"]], "transformers4rec.torch.ReformerConfig": [[24, 2, 1, "", "build"]], "transformers4rec.torch.RegressionTask": [[24, 6, 1, "", "DEFAULT_LOSS"], [24, 6, 1, "", "DEFAULT_METRICS"], [24, 6, 1, "", "training"]], "transformers4rec.torch.Schema": [[24, 2, 1, "", "add"], [24, 2, 1, "", "apply"], [24, 2, 1, "", "apply_inverse"], [24, 3, 1, "", "column_names"], [24, 3, 1, "", "column_schemas"], [24, 2, 1, "", "copy"], [24, 2, 1, "", "create"], [24, 6, 1, "", "feature"], [24, 2, 1, "", "filter_column_schemas"], [24, 2, 1, "", "filter_columns_from_dict"], [24, 2, 1, "", "from_json"], [24, 2, 1, "", "from_proto_text"], [24, 3, 1, "", "item_id_column_name"], [24, 2, 1, "", "map_column_schemas"], [24, 2, 1, "", "remove_by_name"], [24, 2, 1, "", "remove_by_tag"], [24, 2, 1, "", "remove_by_type"], [24, 2, 1, "", "select_by_name"], [24, 2, 1, "", "select_by_tag"], [24, 2, 1, "", "select_by_type"], [24, 2, 1, "", "to_proto_text"], [24, 2, 1, "", "with_tags_based_on_properties"]], "transformers4rec.torch.SequenceEmbeddingFeatures": [[24, 2, 1, "", "forward_output_size"], [24, 2, 1, "", "table_to_embedding_module"]], "transformers4rec.torch.SequentialBlock": [[24, 2, 1, "", "add_module"], [24, 2, 1, "", "add_module_and_maybe_build"], [24, 2, 1, "", "as_tabular"], [24, 2, 1, "", "build"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"], [24, 2, 1, "", "get_children_by_class_name"], [24, 3, 1, "", "inputs"]], "transformers4rec.torch.SequentialTabularTransformations": [[24, 2, 1, "", "append"]], "transformers4rec.torch.SoftEmbedding": [[24, 2, 1, "", "forward"], [24, 6, 1, "", "training"]], "transformers4rec.torch.SoftEmbeddingFeatures": [[24, 2, 1, "", "from_schema"], [24, 2, 1, "", "table_to_embedding_module"]], "transformers4rec.torch.StackFeatures": [[24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.StochasticSwapNoise": [[24, 2, 1, "", "augment"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.T4RecConfig": [[24, 2, 1, "", "build"], [24, 2, 1, "", "to_huggingface_torch_model"], [24, 2, 1, "", "to_torch_model"], [24, 3, 1, "", "transformers_config_cls"]], "transformers4rec.torch.T4RecTrainingArguments": [[24, 6, 1, "", "compute_metrics_each_n_steps"], [24, 6, 1, "", "data_loader_engine"], [24, 6, 1, "", "eval_on_test_set"], [24, 6, 1, "", "eval_steps_on_train_set"], [24, 6, 1, "", "experiments_group"], [24, 6, 1, "", "learning_rate_num_cosine_cycles_by_epoch"], [24, 6, 1, "", "log_predictions"], [24, 6, 1, "", "max_sequence_length"], [24, 6, 1, "", "output_dir"], [24, 3, 1, "", "place_model_on_device"], [24, 6, 1, "", "predict_top_k"], [24, 6, 1, "", "shuffle_buffer_size"]], "transformers4rec.torch.TableConfig": [[24, 6, 1, "", "combiner"], [24, 6, 1, "", "dim"], [24, 6, 1, "", "initializer"], [24, 6, 1, "", "name"], [24, 6, 1, "", "vocabulary_size"]], "transformers4rec.torch.TabularAggregation": [[24, 2, 1, "", "forward"], [24, 2, 1, "", "parse"]], "transformers4rec.torch.TabularBlock": [[24, 2, 1, "", "build"], [24, 2, 1, "", "output_size"], [24, 2, 1, "", "to_module"]], "transformers4rec.torch.TabularDropout": [[24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.TabularFeatures": [[24, 6, 1, "", "CONTINUOUS_MODULE_CLASS"], [24, 6, 1, "", "EMBEDDING_MODULE_CLASS"], [24, 6, 1, "", "PRETRAINED_EMBEDDING_MODULE_CLASS"], [24, 6, 1, "", "SOFT_EMBEDDING_MODULE_CLASS"], [24, 3, 1, "", "categorical_module"], [24, 3, 1, "", "continuous_module"], [24, 2, 1, "", "forward_output_size"], [24, 2, 1, "", "from_schema"], [24, 3, 1, "", "pretrained_module"], [24, 2, 1, "", "project_continuous_features"]], "transformers4rec.torch.TabularLayerNorm": [[24, 2, 1, "", "build"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"], [24, 2, 1, "", "from_feature_config"]], "transformers4rec.torch.TabularModule": [[24, 3, 1, "", "aggregation"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "from_features"], [24, 2, 1, "", "from_schema"], [24, 2, 1, "", "merge"], [24, 3, 1, "", "post"], [24, 2, 1, "", "post_forward"], [24, 3, 1, "", "pre"], [24, 2, 1, "", "pre_forward"], [24, 6, 1, "", "training"]], "transformers4rec.torch.TabularSequenceFeatures": [[24, 6, 1, "", "EMBEDDING_MODULE_CLASS"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"], [24, 2, 1, "", "from_schema"], [24, 3, 1, "", "item_embedding_table"], [24, 3, 1, "", "item_id"], [24, 3, 1, "", "masking"], [24, 2, 1, "", "project_continuous_features"], [24, 2, 1, "", "set_masking"]], "transformers4rec.torch.TabularTransformation": [[24, 2, 1, "", "forward"], [24, 2, 1, "", "parse"]], "transformers4rec.torch.Trainer": [[24, 2, 1, "", "compute_loss"], [24, 2, 1, "", "create_scheduler"], [24, 2, 1, "", "evaluation_loop"], [24, 2, 1, "", "get_eval_dataloader"], [24, 2, 1, "", "get_scheduler"], [24, 2, 1, "", "get_test_dataloader"], [24, 2, 1, "", "get_train_dataloader"], [24, 2, 1, "", "load_model_trainer_states_from_checkpoint"], [24, 2, 1, "", "log"], [24, 3, 1, "", "log_predictions_callback"], [24, 2, 1, "", "num_examples"], [24, 2, 1, "", "prediction_step"], [24, 2, 1, "", "reset_lr_scheduler"]], "transformers4rec.torch.TransfoXLConfig": [[24, 2, 1, "", "build"]], "transformers4rec.torch.TransformerBlock": [[24, 6, 1, "", "TRANSFORMER_TO_PREPARE"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"], [24, 2, 1, "", "from_registry"]], "transformers4rec.torch.XLNetConfig": [[24, 2, 1, "", "build"]], "transformers4rec.torch.block": [[25, 0, 0, "-", "base"], [25, 0, 0, "-", "mlp"], [25, 0, 0, "-", "transformer"]], "transformers4rec.torch.block.base": [[25, 1, 1, "", "Block"], [25, 1, 1, "", "BlockBase"], [25, 1, 1, "", "BuildableBlock"], [25, 1, 1, "", "SequentialBlock"], [25, 5, 1, "", "build_blocks"], [25, 5, 1, "", "right_shift_block"]], "transformers4rec.torch.block.base.Block": [[25, 2, 1, "", "forward"], [25, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.block.base.BlockBase": [[25, 2, 1, "", "as_tabular"], [25, 2, 1, "", "to_model"]], "transformers4rec.torch.block.base.BuildableBlock": [[25, 2, 1, "", "build"], [25, 2, 1, "", "to_module"]], "transformers4rec.torch.block.base.SequentialBlock": [[25, 2, 1, "", "add_module"], [25, 2, 1, "", "add_module_and_maybe_build"], [25, 2, 1, "", "as_tabular"], [25, 2, 1, "", "build"], [25, 2, 1, "", "forward"], [25, 2, 1, "", "forward_output_size"], [25, 2, 1, "", "get_children_by_class_name"], [25, 3, 1, "", "inputs"]], "transformers4rec.torch.block.mlp": [[25, 1, 1, "", "DenseBlock"], [25, 1, 1, "", "MLPBlock"]], "transformers4rec.torch.block.mlp.DenseBlock": [[25, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.block.mlp.MLPBlock": [[25, 2, 1, "", "build"]], "transformers4rec.torch.block.transformer": [[25, 1, 1, "", "GPT2Prepare"], [25, 1, 1, "", "TransformerBlock"], [25, 1, 1, "", "TransformerPrepare"]], "transformers4rec.torch.block.transformer.GPT2Prepare": [[25, 2, 1, "", "forward"], [25, 6, 1, "", "training"]], "transformers4rec.torch.block.transformer.TransformerBlock": [[25, 6, 1, "", "TRANSFORMER_TO_PREPARE"], [25, 2, 1, "", "forward"], [25, 2, 1, "", "forward_output_size"], [25, 2, 1, "", "from_registry"], [25, 6, 1, "", "prepare_module"], [25, 6, 1, "", "training"], [25, 6, 1, "", "transformer"]], "transformers4rec.torch.block.transformer.TransformerPrepare": [[25, 2, 1, "", "forward"], [25, 6, 1, "", "training"]], "transformers4rec.torch.features": [[26, 0, 0, "-", "base"], [26, 0, 0, "-", "continuous"], [26, 0, 0, "-", "embedding"], [26, 0, 0, "-", "sequence"], [26, 0, 0, "-", "tabular"], [26, 0, 0, "-", "text"]], "transformers4rec.torch.features.base": [[26, 1, 1, "", "InputBlock"]], "transformers4rec.torch.features.continuous": [[26, 1, 1, "", "ContinuousFeatures"]], "transformers4rec.torch.features.continuous.ContinuousFeatures": [[26, 2, 1, "", "forward"], [26, 2, 1, "", "forward_output_size"], [26, 2, 1, "", "from_features"]], "transformers4rec.torch.features.embedding": [[26, 1, 1, "", "EmbeddingBagWrapper"], [26, 1, 1, "", "EmbeddingFeatures"], [26, 1, 1, "", "FeatureConfig"], [26, 1, 1, "", "PretrainedEmbeddingFeatures"], [26, 1, 1, "", "PretrainedEmbeddingsInitializer"], [26, 1, 1, "", "SoftEmbedding"], [26, 1, 1, "", "SoftEmbeddingFeatures"], [26, 1, 1, "", "TableConfig"]], "transformers4rec.torch.features.embedding.EmbeddingBagWrapper": [[26, 6, 1, "", "embedding_dim"], [26, 2, 1, "", "forward"], [26, 6, 1, "", "include_last_offset"], [26, 6, 1, "", "max_norm"], [26, 6, 1, "", "mode"], [26, 6, 1, "", "norm_type"], [26, 6, 1, "", "num_embeddings"], [26, 6, 1, "", "padding_idx"], [26, 6, 1, "", "scale_grad_by_freq"], [26, 6, 1, "", "sparse"], [26, 6, 1, "", "weight"]], "transformers4rec.torch.features.embedding.EmbeddingFeatures": [[26, 2, 1, "", "forward"], [26, 2, 1, "", "forward_output_size"], [26, 2, 1, "", "from_schema"], [26, 3, 1, "", "item_embedding_table"], [26, 2, 1, "", "item_ids"], [26, 2, 1, "", "table_to_embedding_module"]], "transformers4rec.torch.features.embedding.FeatureConfig": [[26, 6, 1, "", "max_sequence_length"], [26, 6, 1, "", "name"], [26, 6, 1, "", "table"]], "transformers4rec.torch.features.embedding.PretrainedEmbeddingFeatures": [[26, 2, 1, "", "build"], [26, 2, 1, "", "forward"], [26, 2, 1, "", "forward_output_size"], [26, 2, 1, "", "from_schema"], [26, 2, 1, "", "parse_combiner"]], "transformers4rec.torch.features.embedding.PretrainedEmbeddingsInitializer": [[26, 2, 1, "", "forward"], [26, 6, 1, "", "training"]], "transformers4rec.torch.features.embedding.SoftEmbedding": [[26, 2, 1, "", "forward"], [26, 6, 1, "", "training"]], "transformers4rec.torch.features.embedding.SoftEmbeddingFeatures": [[26, 2, 1, "", "from_schema"], [26, 2, 1, "", "table_to_embedding_module"]], "transformers4rec.torch.features.embedding.TableConfig": [[26, 6, 1, "", "combiner"], [26, 6, 1, "", "dim"], [26, 6, 1, "", "initializer"], [26, 6, 1, "", "name"], [26, 6, 1, "", "vocabulary_size"]], "transformers4rec.torch.features.sequence": [[26, 1, 1, "", "SequenceEmbeddingFeatures"], [26, 1, 1, "", "TabularSequenceFeatures"]], "transformers4rec.torch.features.sequence.SequenceEmbeddingFeatures": [[26, 2, 1, "", "forward_output_size"], [26, 2, 1, "", "table_to_embedding_module"]], "transformers4rec.torch.features.sequence.TabularSequenceFeatures": [[26, 6, 1, "", "EMBEDDING_MODULE_CLASS"], [26, 2, 1, "", "forward"], [26, 2, 1, "", "forward_output_size"], [26, 2, 1, "", "from_schema"], [26, 3, 1, "", "item_embedding_table"], [26, 3, 1, "", "item_id"], [26, 3, 1, "", "masking"], [26, 2, 1, "", "project_continuous_features"], [26, 2, 1, "", "set_masking"]], "transformers4rec.torch.features.tabular": [[26, 1, 1, "", "TabularFeatures"]], "transformers4rec.torch.features.tabular.TabularFeatures": [[26, 6, 1, "", "CONTINUOUS_MODULE_CLASS"], [26, 6, 1, "", "EMBEDDING_MODULE_CLASS"], [26, 6, 1, "", "PRETRAINED_EMBEDDING_MODULE_CLASS"], [26, 6, 1, "", "SOFT_EMBEDDING_MODULE_CLASS"], [26, 3, 1, "", "categorical_module"], [26, 3, 1, "", "continuous_module"], [26, 2, 1, "", "forward_output_size"], [26, 2, 1, "", "from_schema"], [26, 3, 1, "", "pretrained_module"], [26, 2, 1, "", "project_continuous_features"]], "transformers4rec.torch.masking": [[24, 1, 1, "", "CausalLanguageModeling"], [24, 1, 1, "", "MaskSequence"], [24, 1, 1, "", "MaskedLanguageModeling"], [24, 1, 1, "", "MaskingInfo"], [24, 1, 1, "", "PermutationLanguageModeling"], [24, 1, 1, "", "ReplacementLanguageModeling"]], "transformers4rec.torch.masking.CausalLanguageModeling": [[24, 2, 1, "", "apply_mask_to_inputs"]], "transformers4rec.torch.masking.MaskSequence": [[24, 2, 1, "", "apply_mask_to_inputs"], [24, 2, 1, "", "compute_masked_targets"], [24, 2, 1, "", "forward"], [24, 2, 1, "", "forward_output_size"], [24, 2, 1, "", "predict_all"], [24, 3, 1, "", "transformer_arguments"], [24, 2, 1, "", "transformer_optional_arguments"], [24, 2, 1, "", "transformer_required_arguments"]], "transformers4rec.torch.masking.MaskedLanguageModeling": [[24, 2, 1, "", "apply_mask_to_inputs"]], "transformers4rec.torch.masking.MaskingInfo": [[24, 6, 1, "", "schema"], [24, 6, 1, "", "targets"]], "transformers4rec.torch.masking.PermutationLanguageModeling": [[24, 2, 1, "", "compute_masked_targets"], [24, 2, 1, "", "transformer_required_arguments"]], "transformers4rec.torch.masking.ReplacementLanguageModeling": [[24, 2, 1, "", "get_fake_tokens"], [24, 2, 1, "", "sample_from_softmax"]], "transformers4rec.torch.model": [[27, 0, 0, "-", "prediction_task"]], "transformers4rec.torch.model.prediction_task": [[27, 1, 1, "", "BinaryClassificationPrepareBlock"], [27, 1, 1, "", "BinaryClassificationTask"], [27, 1, 1, "", "LogUniformSampler"], [27, 1, 1, "", "NextItemPredictionPrepareBlock"], [27, 1, 1, "", "NextItemPredictionTask"], [27, 1, 1, "", "RegressionPrepareBlock"], [27, 1, 1, "", "RegressionTask"]], "transformers4rec.torch.model.prediction_task.BinaryClassificationPrepareBlock": [[27, 2, 1, "", "build"]], "transformers4rec.torch.model.prediction_task.BinaryClassificationTask": [[27, 6, 1, "", "DEFAULT_LOSS"], [27, 6, 1, "", "DEFAULT_METRICS"], [27, 6, 1, "", "training"]], "transformers4rec.torch.model.prediction_task.LogUniformSampler": [[27, 2, 1, "", "forward"], [27, 2, 1, "", "get_log_uniform_distr"], [27, 2, 1, "", "get_unique_sampling_distr"], [27, 2, 1, "", "sample"], [27, 6, 1, "", "training"]], "transformers4rec.torch.model.prediction_task.NextItemPredictionPrepareBlock": [[27, 2, 1, "", "build"]], "transformers4rec.torch.model.prediction_task.NextItemPredictionTask": [[27, 6, 1, "", "DEFAULT_METRICS"], [27, 2, 1, "", "build"], [27, 2, 1, "", "calculate_metrics"], [27, 2, 1, "", "compute_metrics"], [27, 2, 1, "", "forward"], [27, 2, 1, "", "remove_pad_3d"], [27, 6, 1, "", "training"]], "transformers4rec.torch.model.prediction_task.RegressionPrepareBlock": [[27, 2, 1, "", "build"]], "transformers4rec.torch.model.prediction_task.RegressionTask": [[27, 6, 1, "", "DEFAULT_LOSS"], [27, 6, 1, "", "DEFAULT_METRICS"], [27, 6, 1, "", "training"]], "transformers4rec.torch.ranking_metric": [[24, 1, 1, "", "AvgPrecisionAt"], [24, 1, 1, "", "DCGAt"], [24, 1, 1, "", "MeanReciprocalRankAt"], [24, 1, 1, "", "NDCGAt"], [24, 1, 1, "", "PrecisionAt"], [24, 1, 1, "", "RankingMetric"], [24, 1, 1, "", "RecallAt"]], "transformers4rec.torch.ranking_metric.RankingMetric": [[24, 2, 1, "", "compute"], [24, 2, 1, "", "update"]], "transformers4rec.torch.tabular": [[28, 0, 0, "-", "aggregation"], [28, 0, 0, "-", "transformations"]], "transformers4rec.torch.tabular.aggregation": [[28, 1, 1, "", "ConcatFeatures"], [28, 1, 1, "", "ElementwiseFeatureAggregation"], [28, 1, 1, "", "ElementwiseSum"], [28, 1, 1, "", "ElementwiseSumItemMulti"], [28, 1, 1, "", "StackFeatures"]], "transformers4rec.torch.tabular.aggregation.ConcatFeatures": [[28, 2, 1, "", "forward"], [28, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.tabular.aggregation.ElementwiseSum": [[28, 2, 1, "", "forward"], [28, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.tabular.aggregation.ElementwiseSumItemMulti": [[28, 6, 1, "", "REQUIRES_SCHEMA"], [28, 2, 1, "", "forward"], [28, 2, 1, "", "forward_output_size"], [28, 6, 1, "", "training"]], "transformers4rec.torch.tabular.aggregation.StackFeatures": [[28, 2, 1, "", "forward"], [28, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.tabular.transformations": [[28, 1, 1, "", "StochasticSwapNoise"], [28, 1, 1, "", "TabularDropout"], [28, 1, 1, "", "TabularLayerNorm"]], "transformers4rec.torch.tabular.transformations.StochasticSwapNoise": [[28, 2, 1, "", "augment"], [28, 2, 1, "", "forward"], [28, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.tabular.transformations.TabularDropout": [[28, 2, 1, "", "forward"], [28, 2, 1, "", "forward_output_size"]], "transformers4rec.torch.tabular.transformations.TabularLayerNorm": [[28, 2, 1, "", "build"], [28, 2, 1, "", "forward"], [28, 2, 1, "", "forward_output_size"], [28, 2, 1, "", "from_feature_config"]], "transformers4rec.torch.trainer": [[24, 1, 1, "", "DatasetMock"], [24, 1, 1, "", "IncrementalLoggingCallback"], [24, 1, 1, "", "Trainer"], [24, 5, 1, "", "process_metrics"]], "transformers4rec.torch.trainer.IncrementalLoggingCallback": [[24, 2, 1, "", "on_epoch_end"], [24, 2, 1, "", "on_train_begin"], [24, 2, 1, "", "on_train_end"]], "transformers4rec.torch.trainer.Trainer": [[24, 2, 1, "", "compute_loss"], [24, 2, 1, "", "create_scheduler"], [24, 2, 1, "", "evaluation_loop"], [24, 2, 1, "", "get_eval_dataloader"], [24, 2, 1, "", "get_scheduler"], [24, 2, 1, "", "get_test_dataloader"], [24, 2, 1, "", "get_train_dataloader"], [24, 2, 1, "", "load_model_trainer_states_from_checkpoint"], [24, 2, 1, "", "log"], [24, 3, 1, "", "log_predictions_callback"], [24, 2, 1, "", "num_examples"], [24, 2, 1, "", "prediction_step"], [24, 2, 1, "", "reset_lr_scheduler"]], "transformers4rec.torch.utils": [[29, 0, 0, "-", "data_utils"], [29, 0, 0, "-", "examples_utils"], [29, 0, 0, "-", "schema_utils"], [29, 0, 0, "-", "torch_utils"]], "transformers4rec.torch.utils.data_utils": [[29, 1, 1, "", "DLDataLoader"], [29, 1, 1, "", "MerlinDataLoader"], [29, 1, 1, "", "ParquetDataset"], [29, 1, 1, "", "PyarrowDataLoader"], [29, 1, 1, "", "ShuffleDataset"], [29, 1, 1, "", "T4RecDataLoader"], [29, 5, 1, "", "to_core_schema"]], "transformers4rec.torch.utils.data_utils.DLDataLoader": [[29, 6, 1, "", "batch_size"], [29, 6, 1, "", "dataset"], [29, 3, 1, "", "device"], [29, 6, 1, "", "drop_last"], [29, 6, 1, "", "num_workers"], [29, 6, 1, "", "pin_memory"], [29, 6, 1, "", "pin_memory_device"], [29, 6, 1, "", "prefetch_factor"], [29, 6, 1, "", "sampler"], [29, 6, 1, "", "timeout"]], "transformers4rec.torch.utils.data_utils.MerlinDataLoader": [[29, 6, 1, "", "batch_size"], [29, 6, 1, "", "dataset"], [29, 6, 1, "", "drop_last"], [29, 2, 1, "", "from_schema"], [29, 6, 1, "", "num_workers"], [29, 3, 1, "", "output_schema"], [29, 6, 1, "", "pin_memory"], [29, 6, 1, "", "pin_memory_device"], [29, 6, 1, "", "prefetch_factor"], [29, 6, 1, "", "sampler"], [29, 2, 1, "", "set_dataset"], [29, 6, 1, "", "timeout"]], "transformers4rec.torch.utils.data_utils.ParquetDataset": [[29, 2, 1, "", "pad_seq_column_if_needed"]], "transformers4rec.torch.utils.data_utils.PyarrowDataLoader": [[29, 6, 1, "", "batch_size"], [29, 6, 1, "", "dataset"], [29, 6, 1, "", "drop_last"], [29, 2, 1, "", "from_schema"], [29, 6, 1, "", "num_workers"], [29, 6, 1, "", "pin_memory"], [29, 6, 1, "", "pin_memory_device"], [29, 6, 1, "", "prefetch_factor"], [29, 6, 1, "", "sampler"], [29, 2, 1, "", "set_dataset"], [29, 6, 1, "", "timeout"]], "transformers4rec.torch.utils.data_utils.T4RecDataLoader": [[29, 2, 1, "", "from_schema"], [29, 2, 1, "", "parse"], [29, 2, 1, "", "set_dataset"]], "transformers4rec.torch.utils.examples_utils": [[29, 5, 1, "", "fit_and_evaluate"], [29, 5, 1, "", "list_files"], [29, 5, 1, "", "visualize_response"], [29, 5, 1, "", "wipe_memory"]], "transformers4rec.torch.utils.schema_utils": [[29, 5, 1, "", "random_data_from_schema"]], "transformers4rec.torch.utils.torch_utils": [[29, 1, 1, "", "LambdaModule"], [29, 1, 1, "", "LossMixin"], [29, 1, 1, "", "MappingTransformerMasking"], [29, 1, 1, "", "MetricsMixin"], [29, 1, 1, "", "OutputSizeMixin"], [29, 5, 1, "", "atleast_1d"], [29, 5, 1, "", "calculate_batch_size_from_input_size"], [29, 5, 1, "", "check_gpu"], [29, 5, 1, "", "check_inputs"], [29, 5, 1, "", "create_output_placeholder"], [29, 5, 1, "", "extract_topk"], [29, 5, 1, "", "get_output_sizes_from_schema"], [29, 5, 1, "", "nested_concat"], [29, 5, 1, "", "nested_detach"], [29, 5, 1, "", "nested_numpify"], [29, 5, 1, "", "nested_truncate"], [29, 5, 1, "", "numpy_pad_and_concatenate"], [29, 5, 1, "", "one_hot_1d"], [29, 5, 1, "", "requires_schema"], [29, 5, 1, "", "torch_pad_and_concatenate"], [29, 5, 1, "", "tranform_label_to_onehot"]], "transformers4rec.torch.utils.torch_utils.LambdaModule": [[29, 2, 1, "", "forward"], [29, 6, 1, "", "training"]], "transformers4rec.torch.utils.torch_utils.LossMixin": [[29, 2, 1, "", "compute_loss"]], "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking": [[29, 6, 1, "", "BertConfig"], [29, 1, 1, "", "CausalLanguageModeling"], [29, 6, 1, "", "ConvBertConfig"], [29, 6, 1, "", "DEFAULT_MASKING"], [29, 6, 1, "", "DebertaConfig"], [29, 6, 1, "", "DistilBertConfig"], [29, 6, 1, "", "GPT2Config"], [29, 6, 1, "", "LongformerConfig"], [29, 6, 1, "", "MPNetConfig"], [29, 1, 1, "", "MaskedLanguageModeling"], [29, 6, 1, "", "MegatronBertConfig"], [29, 1, 1, "", "PermutationLanguageModeling"], [29, 1, 1, "", "ReplacementLanguageModeling"], [29, 6, 1, "", "RoFormerConfig"], [29, 6, 1, "", "RobertaConfig"], [29, 6, 1, "", "TransfoXLConfig"], [29, 6, 1, "", "XLNetConfig"]], "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.CausalLanguageModeling": [[29, 2, 1, "", "apply_mask_to_inputs"]], "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.MaskedLanguageModeling": [[29, 2, 1, "", "apply_mask_to_inputs"]], "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.PermutationLanguageModeling": [[29, 2, 1, "", "compute_masked_targets"], [29, 2, 1, "", "transformer_required_arguments"]], "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.ReplacementLanguageModeling": [[29, 2, 1, "", "get_fake_tokens"], [29, 2, 1, "", "sample_from_softmax"]], "transformers4rec.torch.utils.torch_utils.MetricsMixin": [[29, 2, 1, "", "calculate_metrics"], [29, 2, 1, "", "compute_metrics"], [29, 2, 1, "", "reset_metrics"]], "transformers4rec.torch.utils.torch_utils.OutputSizeMixin": [[29, 2, 1, "", "build"], [29, 2, 1, "", "forward_output_size"], [29, 2, 1, "", "output_size"]], "transformers4rec.utils": [[30, 0, 0, "-", "dependencies"]], "transformers4rec.utils.dependencies": [[30, 5, 1, "", "is_gpu_dataloader_available"], [30, 5, 1, "", "is_merlin_dataloader_available"], [30, 5, 1, "", "is_pyarrow_available"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:data", "5": "py:function", "6": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "data", "Python data"], "5": ["py", "function", "Python function"], "6": ["py", "attribute", "Python attribute"]}, "titleterms": {"nvidia": [0, 45], "merlin": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 31, 32, 33, 40, 44, 45, 46, 47, 49, 54, 55, 56, 57, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 257, 258, 259, 260, 261], "benefit": 0, "compon": 0, "instal": 0, "exampl": [0, 34, 45, 54, 56], "notebook": [0, 34, 45, 54, 56], "tutori": 0, "i": 0, "built": 0, "On": 0, "feedback": 0, "support": [0, 53, 258, 259, 260, 261], "dag": [1, 2, 3, 4, 10, 207, 208, 209, 210, 211, 212, 213, 214], "baseoper": 1, "columnselector": 2, "graph": [3, 16, 33, 48, 55, 65, 66], "node": 4, "io": [5, 11], "dataset": [5, 35, 36, 37, 44, 45, 47, 50, 57, 58, 64, 65, 66], "schema": [6, 7, 8, 12, 14, 15, 19, 23], "columnschema": 6, "tag": [8, 19], "namespac": 9, "subpackag": [9, 17, 22, 24], "api": [13, 14, 15, 16, 21], "document": [13, 14, 15, 16, 21], "dataload": [13, 40, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "tensorflow": [13, 14, 41, 43, 61, 63, 70, 71, 212, 261], "constructor": [13, 14, 15, 16], "util": [13, 14, 20, 29, 30, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "function": [13, 14, 15, 16, 32, 33], "pytorch": [13, 40, 260], "jax": [13, 67], "base": [13, 15, 25, 26, 35, 36, 53, 255], "model": [14, 27, 32, 35, 36, 39, 41, 42, 43, 47, 48, 49, 51, 53, 54, 55, 57, 61, 63, 65, 66, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 255], "rank": [14, 32, 47, 48, 49, 51, 53, 54, 55, 255], "retriev": [14, 32, 33, 55, 57, 65, 66, 255], "input": [14, 48, 50, 53], "block": [14, 25], "build": [14, 32, 45, 55, 57], "predict": [14, 35, 36, 43, 62, 63], "task": [14, 35, 36, 47, 50, 51, 53], "output": [14, 38, 50, 53], "pipelin": [14, 38, 59], "evalu": [14, 35, 53, 61], "optim": 14, "transform": [14, 23, 25, 28, 35, 36, 57], "multi": [14, 33, 34, 45, 47, 51, 53], "data": [14, 36, 41, 47, 50, 59, 65, 66], "loader": [14, 67, 71, 76, 119], "custom": 14, "metric": 14, "sampl": [14, 53], "loss": [14, 53, 171, 172, 173, 174, 175, 176, 177, 178, 179], "tensor": 14, "miscellan": 14, "registri": [14, 17, 190, 191, 192, 193, 194, 195, 196], "workflow": [15, 36, 63, 214, 253, 254], "categor": [15, 53], "oper": [15, 16, 243], "continu": [15, 26, 88], "miss": 15, "valu": 15, "row": 15, "manipul": 15, "list": 15, "vector": 15, "user": [15, 32], "defin": [15, 38, 39, 40, 50, 53, 59], "class": [15, 53], "ensembl": [16, 33, 48, 55, 62, 63, 65, 66, 207], "convers": [16, 58], "triton": [16, 33, 35, 42, 43, 47, 48, 49, 55, 57, 62, 63, 65, 66, 215, 216], "infer": [16, 33, 35, 41, 43, 47, 48, 49, 55, 57, 62, 63, 65, 66], "server": [16, 33, 35, 42, 43, 47, 48, 49, 55, 57, 62, 63, 65, 66], "merlin_standard_lib": [17, 18, 19, 20], "packag": [17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30], "submodul": [17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30], "modul": [17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30], "content": [17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30], "proto": 18, "schema_bp": 18, "doc_util": 20, "embedding_util": 20, "misc_util": [20, 181, 182, 183, 184, 185, 186, 187, 188, 189], "proto_util": 20, "transformers4rec": [22, 23, 24, 25, 26, 27, 28, 29, 30], "type": [22, 24], "config": [23, 52], "trainer": [23, 24], "torch": [24, 25, 26, 27, 28, 29, 75, 76], "mask": 24, "ranking_metr": 24, "mlp": 25, "featur": [26, 32, 33, 39, 50, 53, 55], "embed": [26, 32, 36, 53, 103], "sequenc": 26, "tabular": [26, 28], "text": 26, "head": 27, "prediction_task": 27, "aggreg": 28, "data_util": 29, "examples_util": 29, "schema_util": [29, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "torch_util": 29, "depend": 30, "contain": [31, 47, 57, 217, 218, 219, 259, 260, 261], "structur": 31, "chang": 31, "begin": 31, "22": [31, 217, 218, 219, 259, 260, 261], "06": 31, "releas": 31, "intellig": 32, "recommend": [32, 33, 34, 42, 43, 55, 57, 65, 66, 255, 256], "system": [32, 33, 34, 49, 55, 65, 66, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 256], "overview": [32, 35, 36, 38, 39, 40, 41, 42, 59, 60, 61, 62, 63, 65, 66], "learn": [32, 35, 36, 38, 40, 41, 47, 49, 51, 53, 59, 60, 61, 62, 63, 65, 66], "object": [32, 33, 35, 36, 38, 40, 41, 49, 59, 60, 61, 62, 63, 65, 66], "import": [32, 33, 51, 55], "requir": [32, 33], "librari": [32, 33, 55], "set": [32, 33, 50, 53], "up": [32, 33, 57], "store": [32, 33], "feast": 32, "export": [32, 33, 55, 62], "item": [32, 35, 36], "engin": [32, 50, 55], "nvtabular": [32, 35, 38, 55, 59, 63, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254], "train": [32, 35, 36, 37, 39, 40, 41, 45, 47, 50, 53, 54, 55, 56, 57, 60, 61, 65, 66], "two": 32, "tower": 32, "queri": 32, "dlrm": [32, 53, 55, 61], "extract": 32, "save": [32, 41, 55, 61, 63], "creat": [32, 33, 36, 48, 52, 55, 57, 65, 66], "definit": [32, 41, 50], "next": [32, 35, 36, 38, 61, 62, 63], "step": [32, 38, 61, 62, 63], "deploi": [33, 34, 45, 48, 49, 54, 55, 59, 62, 63], "stage": [33, 34, 45, 53], "recsi": [33, 45, 53], "product": 33, "regist": [33, 57], "our": [33, 38, 39, 41, 59], "load": [33, 42, 43], "from": [33, 42, 43, 55, 57, 62, 63, 65, 66], "offlin": 33, "an": [33, 47, 65, 66], "onlin": 33, "faiss": 33, "index": 33, "client": [33, 52], "start": [33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 55, 62, 65, 66], "run": [34, 38, 45, 51, 54, 56], "architectur": [35, 36, 40, 53], "download": [35, 36, 37, 47, 58], "prepar": [35, 36, 41, 47, 65, 66], "preprocess": [35, 38, 47, 50, 59], "construct": [35, 36], "serv": [35, 36, 42, 43, 45, 56, 57, 65, 66], "us": [35, 39, 57], "summari": [35, 36, 49, 55, 61, 62, 63], "pretrain": 36, "clean": [36, 57], "gener": [36, 57], "synthet": 36, "get": [37, 38, 39, 40, 41, 42, 44, 45, 62, 63], "movielen": [37, 38, 39, 40, 41, 44, 45], "convert": [37, 58], "movielens25m": [37, 40, 41], "split": [37, 50], "valid": 37, "etl": [38, 59], "check": 38, "pre": 38, "process": [38, 51, 52], "hugectr": [39, 42, 60, 62, 259], "why": 39, "other": 39, "scale": [39, 45, 58, 59, 60, 61, 62, 63, 64], "acceler": 39, "let": 39, "": 39, "initi": 40, "neural": [40, 51], "network": 40, "specifi": 41, "hyperparamet": [41, 47, 51, 52], "launch": [43, 48], "inventori": 45, "larg": [45, 64], "criteo": [45, 58, 59, 60, 61, 62, 63, 64], "aw": [45, 56, 57], "sagemak": [45, 56, 57], "quick": [46, 47, 52], "setup": [47, 51, 52], "tenrec": 47, "docker": [47, 57], "mmoe": [47, 53], "tune": [47, 51, 52], "deploy": 47, "send": [48, 57], "request": [48, 57], "command": [48, 50, 53], "line": [48, 50, 53], "argument": [48, 50, 53], "script": [50, 53, 57, 58], "best": [50, 51, 53], "practic": [50, 53], "deal": [50, 53], "high": [50, 53], "cardin": [50, 53], "target": 50, "encod": [50, 104], "cast": 50, "filter": [50, 108, 232], "frequenc": [50, 59], "cap": 50, "eval": 50, "cuda": 50, "cluster": [50, 59], "option": 50, "benchmark": 51, "singl": 51, "stl": 51, "result": [51, 52], "most": 51, "mtl": [51, 53], "analysi": 51, "varianc": 51, "accuraci": 51, "its": 51, "improv": 51, "over": 51, "refin": 51, "search": 51, "space": [51, 53], "weight": [52, 53], "bias": 52, "sweep": 52, "1": [52, 57], "file": 52, "2": [52, 57], "environ": 52, "wandb": 52, "3": [52, 57], "test": 52, "4": 52, "5": 52, "hypertun": 52, "monitor": 52, "analys": 52, "baselin": 53, "size": 53, "regular": 53, "neg": 53, "dcn": 53, "v2": 53, "deepfm": 53, "wide": 53, "deep": 53, "cgc": 53, "ple": 53, "expert": 53, "log": [53, 58], "verif": 55, "artifact": [55, 57, 62], "part": 57, "imag": [57, 217, 218, 219, 259, 260, 261], "dockerfil": 57, "your": 57, "python": 57, "sdk": 57, "raw": 57, "termin": 57, "endpoint": 57, "1tb": 58, "click": 58, "csv": 58, "parquet": 58, "prep": 59, "distribut": 59, "dask": 59, "threshold": 59, "implicit": [65, 209], "tool": [65, 66], "prerequisit": [65, 66], "xgboost": 66, "loader_bas": [68, 69], "chunkqueu": 68, "loaderbas": 69, "kerassequencevalidat": 70, "tf_util": [72, 73, 74], "has_gpu": 72, "configure_tensorflow": 73, "get_dataset_schema_from_feature_column": 74, "dldataload": 75, "tf": [77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180], "astabular": 77, "averageembeddingsbyweightfeatur": 78, "avgprecisionat": 79, "binaryclassificationtask": 80, "binaryoutput": 81, "broadcasttosequ": 82, "cgcblock": 83, "categoricaloutput": 84, "categoryencod": 85, "paramet": [85, 110, 112], "columnbasedsampleweight": 86, "cond": 87, "continuousembed": 89, "continuousfeatur": 90, "continuousproject": 91, "contrastiveoutput": 92, "crossblock": 93, "dcnmodel": 94, "dlrmblock": 95, "dlrmmodel": 96, "deepfmmodel": 97, "denseresidualblock": 98, "dotproductinteract": 99, "dualencoderblock": 100, "embeddingencod": 101, "embeddingt": 102, "expanddim": 105, "fmblock": 106, "fmpairwiseinteract": 107, "hashedcross": [109, 235], "hashedcrossal": 110, "inbatchsampl": 111, "inputblock": 112, "inputblockv2": 113, "itemretrievalscor": 114, "itemretrievaltask": 115, "itemsampl": 116, "l2norm": 117, "lazyadam": 118, "mlpblock": 120, "mmoeblock": 121, "mrrat": 122, "mapvalu": 123, "matrixfactorizationblock": 124, "matrixfactorizationmodel": 125, "matrixfactorizationmodelv2": 126, "modeloutput": 127, "multiclassclassificationtask": 128, "multioptim": 129, "ndcgat": 130, "optimizerblock": 131, "outputblock": 132, "pleblock": 133, "parallelblock": 134, "parallelpredictionblock": 135, "popularitybasedsampl": 136, "precisionat": 137, "predictiontask": [138, 139], "preparefeatur": 140, "preparelistfeatur": 141, "recallat": 142, "regressionoutput": 143, "regressiontask": 144, "replacemaskedembed": 145, "residualblock": 146, "retrievalmodelv2": 147, "sequenceembeddingfeatur": 148, "sequencemasklast": 149, "sequencemaskrandom": 150, "sequencepredictlast": 151, "sequencepredictnext": 152, "sequencepredictrandom": 153, "sequencetargetasinput": 154, "sequentialblock": 155, "stochasticswapnois": 156, "tabularblock": 157, "tensoriniti": 158, "todens": 159, "toonehot": 160, "tospars": 161, "totarget": 162, "topkencod": 163, "topkmetricsaggreg": 164, "twotowerblock": 165, "twotowermodel": 166, "twotowermodelv2": 167, "wideanddeepmodel": 168, "youtubednnretrievalmodel": 169, "youtubednnretrievalmodelv2": 170, "bprloss": 171, "bprmaxloss": 172, "categoricalcrossentropi": 173, "hingeloss": 174, "logisticloss": 175, "sparsecategoricalcrossentropi": 176, "top1loss": 177, "top1maxloss": 178, "top1v2loss": 179, "split_embeddings_on_s": 180, "time": 181, "filter_kwarg": 182, "get_filenam": 183, "get_label_feature_nam": 184, "get_object_s": 185, "get_parquet_files_nam": 186, "get_timestamp_feature_nam": 187, "safe_json": 188, "validate_dataset": 189, "registrymixin": 191, "camelcase_to_snakecas": 192, "default_nam": 193, "default_object_nam": 194, "display_list_by_prefix": 195, "snakecase_to_camelcas": 196, "categorical_cardin": 197, "categorical_domain": 198, "create_categorical_column": 199, "create_continuous_column": 200, "filter_dict_by_schema": 201, "get_embedding_size_from_cardin": 202, "get_embedding_sizes_from_schema": 203, "schema_to_tensorflow_metadata_json": 204, "select_target": 205, "tensorflow_metadata_json_to_schema": 206, "op": [208, 209, 210, 211, 212, 213, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252], "fil": 208, "predictforest": 208, "predictimplicit": 209, "session_filt": 210, "filtercandid": 210, "softmax_sampl": 211, "softmaxsampl": 211, "predicttensorflow": 212, "unroll_featur": 213, "unrollfeatur": 213, "transformworkflow": 214, "convert_df_to_triton_input": 215, "convert_triton_output_to_df": 216, "23": [217, 218, 219, 259, 260, 261], "xx": [217, 218, 219, 259, 260, 261], "addmetadata": 220, "addproperti": 221, "addtag": 222, "bucket": 223, "categorifi": 224, "clip": 225, "columnsimilar": 226, "differencelag": 227, "droplowcardin": 228, "dropna": 229, "fillmedian": 230, "fillmiss": 231, "groupbi": 233, "hashbucket": 234, "joinextern": 236, "joingroupbi": 237, "lambdaop": 238, "listslic": 239, "logop": 240, "normal": 241, "normalizeminmax": 242, "reducedtypes": 244, "renam": 245, "statoper": 246, "tagasitemfeatur": 247, "tagasitemid": 248, "tagasuserfeatur": 249, "tagasuserid": 250, "targetencod": 251, "valuecount": 252, "workflownod": 254, "resourc": [255, 257], "sequenti": 255, "session": 255, "guid": 256, "relat": 257, "matrix": [258, 259, 260, 261]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"NVIDIA Merlin": [[0, "nvidia-merlin"]], "Benefits": [[0, "benefits"]], "Components of NVIDIA Merlin": [[0, "components-of-nvidia-merlin"]], "Installation": [[0, "installation"]], "Example Notebooks and Tutorials": [[0, "example-notebooks-and-tutorials"]], "Merlin Is Built On": [[0, "merlin-is-built-on"]], "Feedback and Support": [[0, "feedback-and-support"]], "merlin.dag.BaseOperator": [[1, "merlin-dag-baseoperator"]], "merlin.dag.ColumnSelector": [[2, "merlin-dag-columnselector"]], "merlin.dag.Graph": [[3, "merlin-dag-graph"]], "merlin.dag.Node": [[4, "merlin-dag-node"]], "merlin.io.Dataset": [[5, "merlin-io-dataset"]], "merlin.schema.ColumnSchema": [[6, "merlin-schema-columnschema"]], "merlin.schema.Schema": [[7, "merlin-schema-schema"]], "merlin.schema.Tags": [[8, "merlin-schema-tags"]], "merlin namespace": [[9, "module-merlin"]], "Subpackages": [[9, "subpackages"], [17, "subpackages"], [22, "subpackages"], [24, "subpackages"]], "Merlin DAG": [[10, "merlin-dag"]], "Merlin IO": [[11, "merlin-io"]], "Merlin Schema": [[12, "merlin-schema"]], "API Documentation": [[13, "api-documentation"], [14, "api-documentation"], [15, "api-documentation"], [16, "api-documentation"], [21, "api-documentation"]], "Merlin Dataloader for TensorFlow Constructors": [[13, "merlin-dataloader-for-tensorflow-constructors"]], "Merlin Dataloader for TensorFlow Utility Functions": [[13, "merlin-dataloader-for-tensorflow-utility-functions"]], "Merlin Dataloader for PyTorch Constructors": [[13, "merlin-dataloader-for-pytorch-constructors"]], "Merlin Dataloader for JAX Constructors": [[13, "merlin-dataloader-for-jax-constructors"]], "Merlin Dataloader Base Constructors": [[13, "merlin-dataloader-base-constructors"]], "TensorFlow Models": [[14, "tensorflow-models"]], "Ranking Model Constructors": [[14, "ranking-model-constructors"]], "Retrieval Model Constructors": [[14, "retrieval-model-constructors"]], "Input Block Constructors": [[14, "input-block-constructors"]], "Model Building Block Constructors": [[14, "model-building-block-constructors"]], "Modeling Prediction Task Constructors": [[14, "modeling-prediction-task-constructors"]], "Modeling Prediction Output Constructors": [[14, "modeling-prediction-output-constructors"]], "Model Pipeline Constructors": [[14, "model-pipeline-constructors"]], "Model Evaluation Constructors": [[14, "model-evaluation-constructors"]], "Model Optimizer Constructors": [[14, "model-optimizer-constructors"]], "Transformation Block Constructors": [[14, "transformation-block-constructors"]], "Multi-Task Block Constructors": [[14, "multi-task-block-constructors"]], "Data Loader Customization Constructor": [[14, "data-loader-customization-constructor"]], "Metrics": [[14, "metrics"]], "Sampling": [[14, "sampling"]], "Losses": [[14, "losses"]], "Schema Functions": [[14, "schema-functions"]], "Utilities": [[14, "utilities"]], "Tensor Utilities": [[14, "tensor-utilities"]], "Miscellaneous Utility Functions": [[14, "miscellaneous-utility-functions"]], "Registry Functions": [[14, "registry-functions"]], "Workflow Constructors": [[15, "workflow-constructors"]], "Categorical Operators": [[15, "categorical-operators"]], "Continuous Operators": [[15, "continuous-operators"]], "Missing Value Operators": [[15, "missing-value-operators"]], "Row Manipulation Operators": [[15, "row-manipulation-operators"]], "Schema Operators": [[15, "schema-operators"]], "List Operators": [[15, "list-operators"]], "Vector Operators": [[15, "vector-operators"]], "User-Defined Function Operators": [[15, "user-defined-function-operators"]], "Operator Base Classes": [[15, "operator-base-classes"]], "Ensemble Graph Constructors": [[16, "ensemble-graph-constructors"]], "Ensemble Operator Constructors": [[16, "ensemble-operator-constructors"]], "Conversion Functions for Triton Inference Server": [[16, "conversion-functions-for-triton-inference-server"]], "merlin_standard_lib package": [[17, "merlin-standard-lib-package"]], "Submodules": [[17, "submodules"], [18, "submodules"], [19, "submodules"], [20, "submodules"], [22, "submodules"], [23, "submodules"], [24, "submodules"], [25, "submodules"], [26, "submodules"], [27, "submodules"], [28, "submodules"], [29, "submodules"], [30, "submodules"]], "merlin_standard_lib.registry module": [[17, "merlin-standard-lib-registry-module"]], "Module contents": [[17, "module-merlin_standard_lib"], [18, "module-merlin_standard_lib.proto"], [19, "module-merlin_standard_lib.schema"], [20, "module-merlin_standard_lib.utils"], [22, "module-transformers4rec"], [23, "module-transformers4rec.config"], [24, "module-transformers4rec.torch"], [25, "module-transformers4rec.torch.block"], [26, "module-transformers4rec.torch.features"], [27, "module-transformers4rec.torch.model"], [28, "module-transformers4rec.torch.tabular"], [29, "module-transformers4rec.torch.utils"], [30, "module-transformers4rec.utils"]], "merlin_standard_lib.proto package": [[18, "merlin-standard-lib-proto-package"]], "merlin_standard_lib.proto.schema_bp module": [[18, "module-merlin_standard_lib.proto.schema_bp"]], "merlin_standard_lib.schema package": [[19, "merlin-standard-lib-schema-package"]], "merlin_standard_lib.schema.schema module": [[19, "module-merlin_standard_lib.schema.schema"]], "merlin_standard_lib.schema.tag module": [[19, "module-merlin_standard_lib.schema.tag"]], "merlin_standard_lib.utils package": [[20, "merlin-standard-lib-utils-package"]], "merlin_standard_lib.utils.doc_utils module": [[20, "merlin-standard-lib-utils-doc-utils-module"]], "merlin_standard_lib.utils.embedding_utils module": [[20, "module-merlin_standard_lib.utils.embedding_utils"]], "merlin_standard_lib.utils.misc_utils module": [[20, "merlin-standard-lib-utils-misc-utils-module"]], "merlin_standard_lib.utils.proto_utils module": [[20, "merlin-standard-lib-utils-proto-utils-module"]], "transformers4rec package": [[22, "transformers4rec-package"]], "transformers4rec.types module": [[22, "module-transformers4rec.types"]], "transformers4rec.config package": [[23, "transformers4rec-config-package"]], "transformers4rec.config.schema module": [[23, "module-transformers4rec.config.schema"]], "transformers4rec.config.trainer module": [[23, "module-transformers4rec.config.trainer"]], "transformers4rec.config.transformer module": [[23, "module-transformers4rec.config.transformer"]], "transformers4rec.torch package": [[24, "transformers4rec-torch-package"]], "transformers4rec.torch.masking module": [[24, "module-transformers4rec.torch.masking"]], "transformers4rec.torch.ranking_metric module": [[24, "module-transformers4rec.torch.ranking_metric"]], "transformers4rec.torch.trainer module": [[24, "module-transformers4rec.torch.trainer"]], "transformers4rec.torch.typing module": [[24, "module-transformers4rec.torch.typing"]], "transformers4rec.torch.block package": [[25, "transformers4rec-torch-block-package"]], "transformers4rec.torch.block.base module": [[25, "module-transformers4rec.torch.block.base"]], "transformers4rec.torch.block.mlp module": [[25, "module-transformers4rec.torch.block.mlp"]], "transformers4rec.torch.block.transformer module": [[25, "module-transformers4rec.torch.block.transformer"]], "transformers4rec.torch.features package": [[26, "transformers4rec-torch-features-package"]], "transformers4rec.torch.features.base module": [[26, "module-transformers4rec.torch.features.base"]], "transformers4rec.torch.features.continuous module": [[26, "module-transformers4rec.torch.features.continuous"]], "transformers4rec.torch.features.embedding module": [[26, "module-transformers4rec.torch.features.embedding"]], "transformers4rec.torch.features.sequence module": [[26, "module-transformers4rec.torch.features.sequence"]], "transformers4rec.torch.features.tabular module": [[26, "module-transformers4rec.torch.features.tabular"]], "transformers4rec.torch.features.text module": [[26, "module-transformers4rec.torch.features.text"]], "transformers4rec.torch.model package": [[27, "transformers4rec-torch-model-package"]], "transformers4rec.torch.model.head module": [[27, "transformers4rec-torch-model-head-module"]], "transformers4rec.torch.model.model module": [[27, "transformers4rec-torch-model-model-module"]], "transformers4rec.torch.model.prediction_task module": [[27, "module-transformers4rec.torch.model.prediction_task"]], "transformers4rec.torch.tabular package": [[28, "transformers4rec-torch-tabular-package"]], "transformers4rec.torch.tabular.aggregation module": [[28, "module-transformers4rec.torch.tabular.aggregation"]], "transformers4rec.torch.tabular.tabular module": [[28, "transformers4rec-torch-tabular-tabular-module"]], "transformers4rec.torch.tabular.transformations module": [[28, "module-transformers4rec.torch.tabular.transformations"]], "transformers4rec.torch.utils package": [[29, "transformers4rec-torch-utils-package"]], "transformers4rec.torch.utils.data_utils module": [[29, "module-transformers4rec.torch.utils.data_utils"]], "transformers4rec.torch.utils.examples_utils module": [[29, "module-transformers4rec.torch.utils.examples_utils"]], "transformers4rec.torch.utils.schema_utils module": [[29, "module-transformers4rec.torch.utils.schema_utils"]], "transformers4rec.torch.utils.torch_utils module": [[29, "module-transformers4rec.torch.utils.torch_utils"]], "transformers4rec.utils package": [[30, "transformers4rec-utils-package"]], "transformers4rec.utils.dependencies module": [[30, "module-transformers4rec.utils.dependencies"]], "Merlin Containers": [[31, "merlin-containers"]], "Structural Changes Beginning with the 22.06 Releases": [[31, "structural-changes-beginning-with-the-22-06-releases"]], "Building Intelligent Recommender Systems with Merlin": [[32, "building-intelligent-recommender-systems-with-merlin"]], "Overview": [[32, "overview"], [35, "overview"], [36, "overview"], [38, "overview"], [39, "overview"], [40, "overview"], [41, "overview"], [42, "overview"], [59, "overview"], [60, "overview"], [61, "overview"], [62, "overview"], [63, "overview"], [65, "overview"], [66, "overview"]], "Learning objectives": [[32, "learning-objectives"], [35, "learning-objectives"], [36, "learning-objectives"], [38, "learning-objectives"], [40, "learning-objectives"], [41, "learning-objectives"], [59, "learning-objectives"], [60, "learning-objectives"], [61, "learning-objectives"], [62, "learning-objectives"], [63, "learning-objectives"], [65, "learning-objectives"], [66, "learning-objectives"]], "Import required libraries and functions": [[32, "import-required-libraries-and-functions"], [33, "import-required-libraries-and-functions"]], "Set up a feature store with Feast": [[32, "set-up-a-feature-store-with-feast"]], "Exporting user and item features": [[32, "exporting-user-and-item-features"]], "Feature Engineering with NVTabular": [[32, "feature-engineering-with-nvtabular"], [32, "id1"], [55, "feature-engineering-with-nvtabular"]], "Training a Retrieval Model with Two-Tower Model": [[32, "training-a-retrieval-model-with-two-tower-model"]], "Exporting query (user) model": [[32, "exporting-query-user-model"]], "Training a Ranking Model with DLRM": [[32, "training-a-ranking-model-with-dlrm"]], "Extract and save Item embeddings": [[32, "extract-and-save-item-embeddings"]], "Create feature definitions": [[32, "create-feature-definitions"]], "Next Steps": [[32, "next-steps"], [38, "next-steps"]], "Deploying a Multi-Stage RecSys into Production with Merlin Systems and Triton Inference Server": [[33, "deploying-a-multi-stage-recsys-into-production-with-merlin-systems-and-triton-inference-server"]], "Register our features on feature store": [[33, "register-our-features-on-feature-store"]], "Loading features from offline store into an online store": [[33, "loading-features-from-offline-store-into-an-online-store"]], "Set up Faiss index, create feature store client and objects for the Triton ensemble": [[33, "set-up-faiss-index-create-feature-store-client-and-objects-for-the-triton-ensemble"]], "Export Graph as Ensemble": [[33, "export-graph-as-ensemble"], [55, "export-graph-as-ensemble"]], "Starting Triton Server": [[33, "starting-triton-server"], [55, "starting-triton-server"]], "Retrieving Recommendations from Triton": [[33, "retrieving-recommendations-from-triton"]], "Deploying a Multi-Stage Recommender System": [[34, "deploying-a-multi-stage-recommender-system"]], "Running the Example Notebooks": [[34, "running-the-example-notebooks"], [45, "running-the-example-notebooks"], [54, "running-the-example-notebooks"]], "Transformer-based architecture for next-item prediction task": [[35, "transformer-based-architecture-for-next-item-prediction-task"]], "Downloading and preparing the dataset": [[35, "downloading-and-preparing-the-dataset"], [36, "downloading-and-preparing-the-dataset"]], "Preprocessing with NVTabular": [[35, "preprocessing-with-nvtabular"]], "Constructing the model": [[35, "constructing-the-model"]], "Model training": [[35, "model-training"]], "Model evaluation": [[35, "model-evaluation"]], "Serving predictions using the Triton Inference Server": [[35, "serving-predictions-using-the-triton-inference-server"]], "Summary": [[35, "summary"], [36, "summary"], [49, "summary"], [55, "summary"], [61, "summary"], [62, "summary"], [63, "summary"]], "Transformer-based architecture for next-item prediction task with pretrained embeddings": [[36, "transformer-based-architecture-for-next-item-prediction-task-with-pretrained-embeddings"]], "Clean downloaded data": [[36, "clean-downloaded-data"]], "Generate synthetic data": [[36, "generate-synthetic-data"]], "Constructing a workflow": [[36, "constructing-a-workflow"]], "Creating and training the model": [[36, "creating-and-training-the-model"]], "Serving predictions": [[36, "serving-predictions"]], "Getting Started MovieLens: Download and Convert": [[37, "getting-started-movielens-download-and-convert"]], "MovieLens25M": [[37, "movielens25m"], [40, "movielens25m"], [41, "movielens25m"]], "Download the dataset": [[37, "download-the-dataset"]], "Convert the dataset": [[37, "convert-the-dataset"]], "Splitting into train and validation dataset": [[37, "splitting-into-train-and-validation-dataset"]], "Getting Started MovieLens: ETL with NVTabular": [[38, "getting-started-movielens-etl-with-nvtabular"]], "ETL with NVTabular": [[38, "etl-with-nvtabular"], [59, "etl-with-nvtabular"]], "Defining our Preprocessing Pipeline": [[38, "defining-our-preprocessing-pipeline"], [59, "defining-our-preprocessing-pipeline"]], "Running the pipeline": [[38, "running-the-pipeline"]], "Checking the pre-processing outputs": [[38, "checking-the-pre-processing-outputs"]], "Getting Started MovieLens: Training with HugeCTR": [[39, "getting-started-movielens-training-with-hugectr"]], "Why use HugeCTR?": [[39, "why-use-hugectr"]], "Other Features of HugeCTR": [[39, "other-features-of-hugectr"]], "Getting Started": [[39, "getting-started"], [42, "getting-started"]], "Scaling Accelerated training with HugeCTR": [[39, "scaling-accelerated-training-with-hugectr"]], "Let\u2019s define our model": [[39, "let-s-define-our-model"]], "Getting Started MovieLens: Training with PyTorch": [[40, "getting-started-movielens-training-with-pytorch"]], "Initializing the Merlin Dataloader for PyTorch": [[40, "initializing-the-merlin-dataloader-for-pytorch"]], "Defining Neural Network Architecture": [[40, "defining-neural-network-architecture"]], "Getting Started MovieLens: Training with TensorFlow": [[41, "getting-started-movielens-training-with-tensorflow"]], "Data Preparation": [[41, "data-preparation"]], "Training our model": [[41, "training-our-model"], [41, "id1"]], "Model definition": [[41, "model-definition"]], "Specifying Hyperparameters": [[41, "specifying-hyperparameters"]], "Saving the model for inference": [[41, "saving-the-model-for-inference"]], "Serve Recommendations from the HugeCTR Model": [[42, "serve-recommendations-from-the-hugectr-model"]], "Load Models on Triton Server": [[42, "load-models-on-triton-server"]], "Serve Recommendations from the TensorFlow Model": [[43, "serve-recommendations-from-the-tensorflow-model"]], "Launching and Starting the Triton Server": [[43, "launching-and-starting-the-triton-server"]], "Loading the Tensorflow Model with Triton Inference Server": [[43, "loading-the-tensorflow-model-with-triton-inference-server"]], "Predicting": [[43, "predicting"]], "Getting Started with Merlin and the MovieLens Dataset": [[44, "getting-started-with-merlin-and-the-movielens-dataset"]], "NVIDIA Merlin Example Notebooks": [[45, "nvidia-merlin-example-notebooks"]], "Inventory": [[45, "inventory"]], "Building and Deploying a multi-stage RecSys": [[45, "building-and-deploying-a-multi-stage-recsys"]], "Getting Started with MovieLens": [[45, "getting-started-with-movielens"]], "Scaling Large Datasets with Criteo": [[45, "scaling-large-datasets-with-criteo"], [64, "scaling-large-datasets-with-criteo"]], "Training and Serving with Merlin on AWS SageMaker": [[45, "training-and-serving-with-merlin-on-aws-sagemaker"]], "Quick-start for Merlin": [[46, "quick-start-for-merlin"]], "Quick-start for ranking models with Merlin": [[47, "quick-start-for-ranking-models-with-merlin"]], "Setup": [[47, "setup"]], "Download the TenRec dataset": [[47, "download-the-tenrec-dataset"]], "Preparing the data": [[47, "preparing-the-data"]], "Start Docker container": [[47, "start-docker-container"]], "Preprocessing": [[47, "preprocessing"]], "Training a ranking model": [[47, "training-a-ranking-model"]], "Training a ranking model with multi-task learning": [[47, "training-a-ranking-model-with-multi-task-learning"]], "Training an MMOE model": [[47, "training-an-mmoe-model"]], "Hyperparameter tuning": [[47, "hyperparameter-tuning"]], "Model Deployment on Triton Inference Server": [[47, "model-deployment-on-triton-inference-server"]], "Deploying a Ranking model on Triton Inference Server": [[48, "deploying-a-ranking-model-on-triton-inference-server"]], "Creating the Ensemble Graph": [[48, "creating-the-ensemble-graph"]], "Launching Triton Inference Server": [[48, "launching-triton-inference-server"]], "Sending request to Triton": [[48, "sending-request-to-triton"]], "Command line arguments": [[48, "command-line-arguments"], [50, "command-line-arguments"], [53, "command-line-arguments"]], "Inputs": [[48, "inputs"], [50, "inputs"], [53, "inputs"]], "Deploying Ranking Models with Merlin Systems": [[49, "deploying-ranking-models-with-merlin-systems"]], "Learning Objectives": [[49, "learning-objectives"]], "Starting Triton Inference Server": [[49, "starting-triton-inference-server"]], "Deploy models on Triton Inference Server": [[49, "deploy-models-on-triton-inference-server"]], "Preprocessing script": [[50, "preprocessing-script"]], "Best practices": [[50, "best-practices"], [53, "best-practices"]], "Dataset": [[50, "dataset"], [65, "dataset"], [66, "dataset"]], "Defining the task": [[50, "defining-the-task"]], "Preprocessing features": [[50, "preprocessing-features"]], "Dealing with high-cardinality data": [[50, "dealing-with-high-cardinality-data"]], "Feature Engineering": [[50, "feature-engineering"]], "Data set splitting": [[50, "data-set-splitting"]], "Outputs": [[50, "outputs"], [53, "outputs"]], "Features and targets definition": [[50, "features-and-targets-definition"]], "Target encoding features": [[50, "target-encoding-features"]], "Data casting and filtering": [[50, "data-casting-and-filtering"]], "Filtering and frequency capping": [[50, "filtering-and-frequency-capping"]], "Dataset splitting (train and eval sets)": [[50, "dataset-splitting-train-and-eval-sets"]], "CUDA cluster options": [[50, "cuda-cluster-options"]], "Benchmark of ranking models": [[51, "benchmark-of-ranking-models"]], "Neural ranking models.": [[51, "neural-ranking-models"]], "Hyperparameter tuning setup": [[51, "hyperparameter-tuning-setup"]], "Single-task learning": [[51, "single-task-learning"]], "STL Benchmark results": [[51, "stl-benchmark-results"]], "Most important hyperparameters": [[51, "most-important-hyperparameters"], [51, "id1"]], "Best runs hyperparameters": [[51, "best-runs-hyperparameters"], [51, "id2"]], "Multi-task learning": [[51, "multi-task-learning"], [53, "multi-task-learning"]], "MTL Benchmark results": [[51, "mtl-benchmark-results"]], "Analysis of the hyperparameter tuning process": [[51, "analysis-of-the-hyperparameter-tuning-process"]], "Variance of accuracy and its improvement over runs": [[51, "variance-of-accuracy-and-its-improvement-over-runs"]], "Refine the search space": [[51, "refine-the-search-space"]], "Hyperparameter tuning with Quick-start and Weights&Biases Sweeps": [[52, "hyperparameter-tuning-with-quick-start-and-weights-biases-sweeps"]], "1. Creating the Sweeps config file": [[52, "creating-the-sweeps-config-file"]], "2. Environment setup": [[52, "environment-setup"]], "2.1 Setup wandb client": [[52, "setup-wandb-client"]], "3. Testing the environment": [[52, "testing-the-environment"]], "4. Creating the Sweep at Weights&Biases": [[52, "creating-the-sweep-at-weights-biases"]], "5. Starting the hypertuning process": [[52, "starting-the-hypertuning-process"]], "5. Monitoring the hypertuning process & analysing results": [[52, "monitoring-the-hypertuning-process-analysing-results"]], "Ranking script": [[53, "ranking-script"]], "Ranking in multi-stage RecSys": [[53, "ranking-in-multi-stage-recsys"]], "Multi-task learning for ranking models": [[53, "multi-task-learning-for-ranking-models"]], "Supported models": [[53, "supported-models"]], "Baseline ranking architectures": [[53, "baseline-ranking-architectures"]], "Multi-task learning architectures": [[53, "multi-task-learning-architectures"]], "Modeling inputs features": [[53, "modeling-inputs-features"]], "Dealing with high-cardinality categorical features": [[53, "dealing-with-high-cardinality-categorical-features"]], "Defining the embedding size": [[53, "defining-the-embedding-size"]], "Regularization": [[53, "regularization"]], "Classes weights": [[53, "classes-weights"]], "Negative sampling": [[53, "negative-sampling"], [53, "id1"]], "Losses weights": [[53, "losses-weights"]], "Setting tasks sample space": [[53, "setting-tasks-sample-space"]], "Tasks": [[53, "tasks"]], "Model": [[53, "model"]], "DCN-v2": [[53, "dcn-v2"]], "DLRM and DeepFM": [[53, "dlrm-and-deepfm"]], "Wide&Deep": [[53, "wide-deep"]], "Wide&Deep and DeepFM": [[53, "wide-deep-and-deepfm"]], "MMOE": [[53, "mmoe"]], "CGC and PLE": [[53, "cgc-and-ple"]], "Expert-based MTL models": [[53, "expert-based-mtl-models"]], "Multi-task learning models": [[53, "multi-task-learning-models"]], "Training and evaluation": [[53, "training-and-evaluation"]], "Logging": [[53, "logging"]], "Training and Deploying Ranking models with Merlin": [[54, "training-and-deploying-ranking-models-with-merlin"]], "Exporting Ranking Models": [[55, "exporting-ranking-models"]], "Importing Libraries": [[55, "importing-libraries"]], "Build and Train a DLRM model": [[55, "build-and-train-a-dlrm-model"]], "Save model": [[55, "save-model"]], "Deploying the model with Merlin Systems": [[55, "deploying-the-model-with-merlin-systems"]], "Create the Ensemble Graph": [[55, "create-the-ensemble-graph"], [65, "create-the-ensemble-graph"], [66, "create-the-ensemble-graph"]], "Verification of Ensemble Artifacts": [[55, "verification-of-ensemble-artifacts"]], "Retrieving Recommendations from Triton Inference Server": [[55, "retrieving-recommendations-from-triton-inference-server"], [65, "retrieving-recommendations-from-triton-inference-server"], [66, "retrieving-recommendations-from-triton-inference-server"]], "Training and Serving Merlin on AWS SageMaker": [[56, "training-and-serving-merlin-on-aws-sagemaker"], [57, "training-and-serving-merlin-on-aws-sagemaker"]], "Running the Example Notebook": [[56, "running-the-example-notebook"]], "Part 1: Generating Dataset and Docker image": [[57, "part-1-generating-dataset-and-docker-image"]], "Generating Dataset": [[57, "generating-dataset"]], "Training Script": [[57, "training-script"]], "Create the Dockerfile": [[57, "create-the-dockerfile"]], "Building and registering the container": [[57, "building-and-registering-the-container"]], "Part 2: Training your Merlin model on Sagemaker": [[57, "part-2-training-your-merlin-model-on-sagemaker"]], "Training on Sagemaker using the Python SDK": [[57, "training-on-sagemaker-using-the-python-sdk"]], "Part 3: Retrieving Recommendations from Triton Inference Server": [[57, "part-3-retrieving-recommendations-from-triton-inference-server"]], "Send a Request to Triton Inference Server to Transform a Raw Dataset": [[57, "send-a-request-to-triton-inference-server-to-transform-a-raw-dataset"]], "Terminate endpoint and clean up artifacts": [[57, "terminate-endpoint-and-clean-up-artifacts"]], "Scaling Criteo: Download and Convert": [[58, "scaling-criteo-download-and-convert"]], "Criteo 1TB Click Logs dataset": [[58, "criteo-1tb-click-logs-dataset"]], "Conversion Script for Criteo Dataset (CSV-to-Parquet)": [[58, "conversion-script-for-criteo-dataset-csv-to-parquet"]], "Scaling Criteo: ETL with NVTabular": [[59, "scaling-criteo-etl-with-nvtabular"]], "Data Prep": [[59, "data-prep"]], "Deploy a Distributed-Dask Cluster": [[59, "deploy-a-distributed-dask-cluster"]], "Frequency Thresholding": [[59, "frequency-thresholding"]], "Scaling Criteo: Training with HugeCTR": [[60, "scaling-criteo-training-with-hugectr"]], "Training with HugeCTR": [[60, "training-with-hugectr"]], "Scaling Criteo: Training with Merlin Models TensorFlow": [[61, "scaling-criteo-training-with-merlin-models-tensorflow"]], "Training a DLRM model": [[61, "training-a-dlrm-model"]], "Evaluate the model": [[61, "evaluate-the-model"]], "Save the model": [[61, "save-the-model"]], "Next steps": [[61, "next-steps"], [62, "next-steps"], [63, "next-steps"]], "Scaling Criteo: Triton Inference with HugeCTR": [[62, "scaling-criteo-triton-inference-with-hugectr"]], "Deploying Ensemble to Triton Inference Server": [[62, "deploying-ensemble-to-triton-inference-server"], [63, "deploying-ensemble-to-triton-inference-server"]], "Export artifacts": [[62, "export-artifacts"]], "Start Triton Inference Server": [[62, "start-triton-inference-server"]], "Get prediction from Triton Inference Server": [[62, "get-prediction-from-triton-inference-server"], [63, "get-prediction-from-triton-inference-server"]], "Scaling Criteo: Triton Inference with Merlin Models TensorFlow": [[63, "scaling-criteo-triton-inference-with-merlin-models-tensorflow"]], "Saved NVTabular workflow and Merlin Models": [[63, "saved-nvtabular-workflow-and-merlin-models"]], "Serving an Implicit Model with Merlin Systems": [[65, "serving-an-implicit-model-with-merlin-systems"]], "Tools": [[65, "tools"], [66, "tools"]], "Prerequisite: Preparing the data and Training Implicit": [[65, "prerequisite-preparing-the-data-and-training-implicit"]], "Starting the Triton Inference Server": [[65, "starting-the-triton-inference-server"], [66, "starting-the-triton-inference-server"]], "Serving an XGBoost Model with Merlin Systems": [[66, "serving-an-xgboost-model-with-merlin-systems"]], "Prerequisite: Preparing the data and Training XGBoost": [[66, "prerequisite-preparing-the-data-and-training-xgboost"]], "merlin.dataloader.jax.Loader": [[67, "merlin-dataloader-jax-loader"]], "merlin.dataloader.loader_base.ChunkQueue": [[68, "merlin-dataloader-loader-base-chunkqueue"]], "merlin.dataloader.loader_base.LoaderBase": [[69, "merlin-dataloader-loader-base-loaderbase"]], "merlin.dataloader.tensorflow.KerasSequenceValidater": [[70, "merlin-dataloader-tensorflow-kerassequencevalidater"]], "merlin.dataloader.tensorflow.Loader": [[71, "merlin-dataloader-tensorflow-loader"]], "merlin.dataloader.tf_utils.HAS_GPU": [[72, "merlin-dataloader-tf-utils-has-gpu"]], "merlin.dataloader.tf_utils.configure_tensorflow": [[73, "merlin-dataloader-tf-utils-configure-tensorflow"]], "merlin.dataloader.tf_utils.get_dataset_schema_from_feature_columns": [[74, "merlin-dataloader-tf-utils-get-dataset-schema-from-feature-columns"]], "merlin.dataloader.torch.DLDataLoader": [[75, "merlin-dataloader-torch-dldataloader"]], "merlin.dataloader.torch.Loader": [[76, "merlin-dataloader-torch-loader"]], "merlin.models.tf.AsTabular": [[77, "merlin-models-tf-astabular"]], "merlin.models.tf.AverageEmbeddingsByWeightFeature": [[78, "merlin-models-tf-averageembeddingsbyweightfeature"]], "merlin.models.tf.AvgPrecisionAt": [[79, "merlin-models-tf-avgprecisionat"]], "merlin.models.tf.BinaryClassificationTask": [[80, "merlin-models-tf-binaryclassificationtask"]], "merlin.models.tf.BinaryOutput": [[81, "merlin-models-tf-binaryoutput"]], "merlin.models.tf.BroadcastToSequence": [[82, "merlin-models-tf-broadcasttosequence"]], "merlin.models.tf.CGCBlock": [[83, "merlin-models-tf-cgcblock"]], "merlin.models.tf.CategoricalOutput": [[84, "merlin-models-tf-categoricaloutput"]], "merlin.models.tf.CategoryEncoding": [[85, "merlin-models-tf-categoryencoding"]], "Parameters:": [[85, "parameters"], [110, "parameters"], [112, "parameters"]], "merlin.models.tf.ColumnBasedSampleWeight": [[86, "merlin-models-tf-columnbasedsampleweight"]], "merlin.models.tf.Cond": [[87, "merlin-models-tf-cond"]], "merlin.models.tf.Continuous": [[88, "merlin-models-tf-continuous"]], "merlin.models.tf.ContinuousEmbedding": [[89, "merlin-models-tf-continuousembedding"]], "merlin.models.tf.ContinuousFeatures": [[90, "merlin-models-tf-continuousfeatures"]], "merlin.models.tf.ContinuousProjection": [[91, "merlin-models-tf-continuousprojection"]], "merlin.models.tf.ContrastiveOutput": [[92, "merlin-models-tf-contrastiveoutput"]], "merlin.models.tf.CrossBlock": [[93, "merlin-models-tf-crossblock"]], "merlin.models.tf.DCNModel": [[94, "merlin-models-tf-dcnmodel"]], "merlin.models.tf.DLRMBlock": [[95, "merlin-models-tf-dlrmblock"]], "merlin.models.tf.DLRMModel": [[96, "merlin-models-tf-dlrmmodel"]], "merlin.models.tf.DeepFMModel": [[97, "merlin-models-tf-deepfmmodel"]], "merlin.models.tf.DenseResidualBlock": [[98, "merlin-models-tf-denseresidualblock"]], "merlin.models.tf.DotProductInteraction": [[99, "merlin-models-tf-dotproductinteraction"]], "merlin.models.tf.DualEncoderBlock": [[100, "merlin-models-tf-dualencoderblock"]], "merlin.models.tf.EmbeddingEncoder": [[101, "merlin-models-tf-embeddingencoder"]], "merlin.models.tf.EmbeddingTable": [[102, "merlin-models-tf-embeddingtable"]], "merlin.models.tf.Embeddings": [[103, "merlin-models-tf-embeddings"]], "merlin.models.tf.Encoder": [[104, "merlin-models-tf-encoder"]], "merlin.models.tf.ExpandDims": [[105, "merlin-models-tf-expanddims"]], "merlin.models.tf.FMBlock": [[106, "merlin-models-tf-fmblock"]], "merlin.models.tf.FMPairwiseInteraction": [[107, "merlin-models-tf-fmpairwiseinteraction"]], "merlin.models.tf.Filter": [[108, "merlin-models-tf-filter"]], "merlin.models.tf.HashedCross": [[109, "merlin-models-tf-hashedcross"]], "merlin.models.tf.HashedCrossAll": [[110, "merlin-models-tf-hashedcrossall"]], "merlin.models.tf.InBatchSampler": [[111, "merlin-models-tf-inbatchsampler"]], "merlin.models.tf.InputBlock": [[112, "merlin-models-tf-inputblock"]], "merlin.models.tf.InputBlockV2": [[113, "merlin-models-tf-inputblockv2"]], "merlin.models.tf.ItemRetrievalScorer": [[114, "merlin-models-tf-itemretrievalscorer"]], "merlin.models.tf.ItemRetrievalTask": [[115, "merlin-models-tf-itemretrievaltask"]], "merlin.models.tf.ItemSampler": [[116, "merlin-models-tf-itemsampler"]], "merlin.models.tf.L2Norm": [[117, "merlin-models-tf-l2norm"]], "merlin.models.tf.LazyAdam": [[118, "merlin-models-tf-lazyadam"]], "merlin.models.tf.Loader": [[119, "merlin-models-tf-loader"]], "merlin.models.tf.MLPBlock": [[120, "merlin-models-tf-mlpblock"]], "merlin.models.tf.MMOEBlock": [[121, "merlin-models-tf-mmoeblock"]], "merlin.models.tf.MRRAt": [[122, "merlin-models-tf-mrrat"]], "merlin.models.tf.MapValues": [[123, "merlin-models-tf-mapvalues"]], "merlin.models.tf.MatrixFactorizationBlock": [[124, "merlin-models-tf-matrixfactorizationblock"]], "merlin.models.tf.MatrixFactorizationModel": [[125, "merlin-models-tf-matrixfactorizationmodel"]], "merlin.models.tf.MatrixFactorizationModelV2": [[126, "merlin-models-tf-matrixfactorizationmodelv2"]], "merlin.models.tf.ModelOutput": [[127, "merlin-models-tf-modeloutput"]], "merlin.models.tf.MultiClassClassificationTask": [[128, "merlin-models-tf-multiclassclassificationtask"]], "merlin.models.tf.MultiOptimizer": [[129, "merlin-models-tf-multioptimizer"]], "merlin.models.tf.NDCGAt": [[130, "merlin-models-tf-ndcgat"]], "merlin.models.tf.OptimizerBlocks": [[131, "merlin-models-tf-optimizerblocks"]], "merlin.models.tf.OutputBlock": [[132, "merlin-models-tf-outputblock"]], "merlin.models.tf.PLEBlock": [[133, "merlin-models-tf-pleblock"]], "merlin.models.tf.ParallelBlock": [[134, "merlin-models-tf-parallelblock"]], "merlin.models.tf.ParallelPredictionBlock": [[135, "merlin-models-tf-parallelpredictionblock"]], "merlin.models.tf.PopularityBasedSampler": [[136, "merlin-models-tf-popularitybasedsampler"]], "merlin.models.tf.PrecisionAt": [[137, "merlin-models-tf-precisionat"]], "merlin.models.tf.PredictionTask": [[138, "merlin-models-tf-predictiontask"]], "merlin.models.tf.PredictionTasks": [[139, "merlin-models-tf-predictiontasks"]], "merlin.models.tf.PrepareFeatures": [[140, "merlin-models-tf-preparefeatures"]], "merlin.models.tf.PrepareListFeatures": [[141, "merlin-models-tf-preparelistfeatures"]], "merlin.models.tf.RecallAt": [[142, "merlin-models-tf-recallat"]], "merlin.models.tf.RegressionOutput": [[143, "merlin-models-tf-regressionoutput"]], "merlin.models.tf.RegressionTask": [[144, "merlin-models-tf-regressiontask"]], "merlin.models.tf.ReplaceMaskedEmbeddings": [[145, "merlin-models-tf-replacemaskedembeddings"]], "merlin.models.tf.ResidualBlock": [[146, "merlin-models-tf-residualblock"]], "merlin.models.tf.RetrievalModelV2": [[147, "merlin-models-tf-retrievalmodelv2"]], "merlin.models.tf.SequenceEmbeddingFeatures": [[148, "merlin-models-tf-sequenceembeddingfeatures"]], "merlin.models.tf.SequenceMaskLast": [[149, "merlin-models-tf-sequencemasklast"]], "merlin.models.tf.SequenceMaskRandom": [[150, "merlin-models-tf-sequencemaskrandom"]], "merlin.models.tf.SequencePredictLast": [[151, "merlin-models-tf-sequencepredictlast"]], "merlin.models.tf.SequencePredictNext": [[152, "merlin-models-tf-sequencepredictnext"]], "merlin.models.tf.SequencePredictRandom": [[153, "merlin-models-tf-sequencepredictrandom"]], "merlin.models.tf.SequenceTargetAsInput": [[154, "merlin-models-tf-sequencetargetasinput"]], "merlin.models.tf.SequentialBlock": [[155, "merlin-models-tf-sequentialblock"]], "merlin.models.tf.StochasticSwapNoise": [[156, "merlin-models-tf-stochasticswapnoise"]], "merlin.models.tf.TabularBlock": [[157, "merlin-models-tf-tabularblock"]], "merlin.models.tf.TensorInitializer": [[158, "merlin-models-tf-tensorinitializer"]], "merlin.models.tf.ToDense": [[159, "merlin-models-tf-todense"]], "merlin.models.tf.ToOneHot": [[160, "merlin-models-tf-toonehot"]], "merlin.models.tf.ToSparse": [[161, "merlin-models-tf-tosparse"]], "merlin.models.tf.ToTarget": [[162, "merlin-models-tf-totarget"]], "merlin.models.tf.TopKEncoder": [[163, "merlin-models-tf-topkencoder"]], "merlin.models.tf.TopKMetricsAggregator": [[164, "merlin-models-tf-topkmetricsaggregator"]], "merlin.models.tf.TwoTowerBlock": [[165, "merlin-models-tf-twotowerblock"]], "merlin.models.tf.TwoTowerModel": [[166, "merlin-models-tf-twotowermodel"]], "merlin.models.tf.TwoTowerModelV2": [[167, "merlin-models-tf-twotowermodelv2"]], "merlin.models.tf.WideAndDeepModel": [[168, "merlin-models-tf-wideanddeepmodel"]], "merlin.models.tf.YoutubeDNNRetrievalModel": [[169, "merlin-models-tf-youtubednnretrievalmodel"]], "merlin.models.tf.YoutubeDNNRetrievalModelV2": [[170, "merlin-models-tf-youtubednnretrievalmodelv2"]], "merlin.models.tf.losses.BPRLoss": [[171, "merlin-models-tf-losses-bprloss"]], "merlin.models.tf.losses.BPRmaxLoss": [[172, "merlin-models-tf-losses-bprmaxloss"]], "merlin.models.tf.losses.CategoricalCrossEntropy": [[173, "merlin-models-tf-losses-categoricalcrossentropy"]], "merlin.models.tf.losses.HingeLoss": [[174, "merlin-models-tf-losses-hingeloss"]], "merlin.models.tf.losses.LogisticLoss": [[175, "merlin-models-tf-losses-logisticloss"]], "merlin.models.tf.losses.SparseCategoricalCrossEntropy": [[176, "merlin-models-tf-losses-sparsecategoricalcrossentropy"]], "merlin.models.tf.losses.TOP1Loss": [[177, "merlin-models-tf-losses-top1loss"]], "merlin.models.tf.losses.TOP1maxLoss": [[178, "merlin-models-tf-losses-top1maxloss"]], "merlin.models.tf.losses.TOP1v2Loss": [[179, "merlin-models-tf-losses-top1v2loss"]], "merlin.models.tf.split_embeddings_on_size": [[180, "merlin-models-tf-split-embeddings-on-size"]], "merlin.models.utils.misc_utils.Timing": [[181, "merlin-models-utils-misc-utils-timing"]], "merlin.models.utils.misc_utils.filter_kwargs": [[182, "merlin-models-utils-misc-utils-filter-kwargs"]], "merlin.models.utils.misc_utils.get_filenames": [[183, "merlin-models-utils-misc-utils-get-filenames"]], "merlin.models.utils.misc_utils.get_label_feature_name": [[184, "merlin-models-utils-misc-utils-get-label-feature-name"]], "merlin.models.utils.misc_utils.get_object_size": [[185, "merlin-models-utils-misc-utils-get-object-size"]], "merlin.models.utils.misc_utils.get_parquet_files_names": [[186, "merlin-models-utils-misc-utils-get-parquet-files-names"]], "merlin.models.utils.misc_utils.get_timestamp_feature_name": [[187, "merlin-models-utils-misc-utils-get-timestamp-feature-name"]], "merlin.models.utils.misc_utils.safe_json": [[188, "merlin-models-utils-misc-utils-safe-json"]], "merlin.models.utils.misc_utils.validate_dataset": [[189, "merlin-models-utils-misc-utils-validate-dataset"]], "merlin.models.utils.registry.Registry": [[190, "merlin-models-utils-registry-registry"]], "merlin.models.utils.registry.RegistryMixin": [[191, "merlin-models-utils-registry-registrymixin"]], "merlin.models.utils.registry.camelcase_to_snakecase": [[192, "merlin-models-utils-registry-camelcase-to-snakecase"]], "merlin.models.utils.registry.default_name": [[193, "merlin-models-utils-registry-default-name"]], "merlin.models.utils.registry.default_object_name": [[194, "merlin-models-utils-registry-default-object-name"]], "merlin.models.utils.registry.display_list_by_prefix": [[195, "merlin-models-utils-registry-display-list-by-prefix"]], "merlin.models.utils.registry.snakecase_to_camelcase": [[196, "merlin-models-utils-registry-snakecase-to-camelcase"]], "merlin.models.utils.schema_utils.categorical_cardinalities": [[197, "merlin-models-utils-schema-utils-categorical-cardinalities"]], "merlin.models.utils.schema_utils.categorical_domains": [[198, "merlin-models-utils-schema-utils-categorical-domains"]], "merlin.models.utils.schema_utils.create_categorical_column": [[199, "merlin-models-utils-schema-utils-create-categorical-column"]], "merlin.models.utils.schema_utils.create_continuous_column": [[200, "merlin-models-utils-schema-utils-create-continuous-column"]], "merlin.models.utils.schema_utils.filter_dict_by_schema": [[201, "merlin-models-utils-schema-utils-filter-dict-by-schema"]], "merlin.models.utils.schema_utils.get_embedding_size_from_cardinality": [[202, "merlin-models-utils-schema-utils-get-embedding-size-from-cardinality"]], "merlin.models.utils.schema_utils.get_embedding_sizes_from_schema": [[203, "merlin-models-utils-schema-utils-get-embedding-sizes-from-schema"]], "merlin.models.utils.schema_utils.schema_to_tensorflow_metadata_json": [[204, "merlin-models-utils-schema-utils-schema-to-tensorflow-metadata-json"]], "merlin.models.utils.schema_utils.select_targets": [[205, "merlin-models-utils-schema-utils-select-targets"]], "merlin.models.utils.schema_utils.tensorflow_metadata_json_to_schema": [[206, "merlin-models-utils-schema-utils-tensorflow-metadata-json-to-schema"]], "merlin.systems.dag.Ensemble": [[207, "merlin-systems-dag-ensemble"]], "merlin.systems.dag.ops.fil.PredictForest": [[208, "merlin-systems-dag-ops-fil-predictforest"]], "merlin.systems.dag.ops.implicit.PredictImplicit": [[209, "merlin-systems-dag-ops-implicit-predictimplicit"]], "merlin.systems.dag.ops.session_filter.FilterCandidates": [[210, "merlin-systems-dag-ops-session-filter-filtercandidates"]], "merlin.systems.dag.ops.softmax_sampling.SoftmaxSampling": [[211, "merlin-systems-dag-ops-softmax-sampling-softmaxsampling"]], "merlin.systems.dag.ops.tensorflow.PredictTensorflow": [[212, "merlin-systems-dag-ops-tensorflow-predicttensorflow"]], "merlin.systems.dag.ops.unroll_features.UnrollFeatures": [[213, "merlin-systems-dag-ops-unroll-features-unrollfeatures"]], "merlin.systems.dag.ops.workflow.TransformWorkflow": [[214, "merlin-systems-dag-ops-workflow-transformworkflow"]], "merlin.systems.triton.convert_df_to_triton_input": [[215, "merlin-systems-triton-convert-df-to-triton-input"]], "merlin.systems.triton.convert_triton_output_to_df": [[216, "merlin-systems-triton-convert-triton-output-to-df"]], "23.xx Container Images": [[217, "xx-container-images"], [218, "xx-container-images"], [219, "xx-container-images"], [259, "xx-container-images"], [260, "xx-container-images"], [261, "xx-container-images"]], "22.xx Container Images": [[217, "id13"], [218, "id13"], [219, "id13"], [259, "id13"], [260, "id13"], [261, "id13"]], "nvtabular.ops.AddMetadata": [[220, "nvtabular-ops-addmetadata"]], "nvtabular.ops.AddProperties": [[221, "nvtabular-ops-addproperties"]], "nvtabular.ops.AddTags": [[222, "nvtabular-ops-addtags"]], "nvtabular.ops.Bucketize": [[223, "nvtabular-ops-bucketize"]], "nvtabular.ops.Categorify": [[224, "nvtabular-ops-categorify"]], "nvtabular.ops.Clip": [[225, "nvtabular-ops-clip"]], "nvtabular.ops.ColumnSimilarity": [[226, "nvtabular-ops-columnsimilarity"]], "nvtabular.ops.DifferenceLag": [[227, "nvtabular-ops-differencelag"]], "nvtabular.ops.DropLowCardinality": [[228, "nvtabular-ops-droplowcardinality"]], "nvtabular.ops.Dropna": [[229, "nvtabular-ops-dropna"]], "nvtabular.ops.FillMedian": [[230, "nvtabular-ops-fillmedian"]], "nvtabular.ops.FillMissing": [[231, "nvtabular-ops-fillmissing"]], "nvtabular.ops.Filter": [[232, "nvtabular-ops-filter"]], "nvtabular.ops.Groupby": [[233, "nvtabular-ops-groupby"]], "nvtabular.ops.HashBucket": [[234, "nvtabular-ops-hashbucket"]], "nvtabular.ops.HashedCross": [[235, "nvtabular-ops-hashedcross"]], "nvtabular.ops.JoinExternal": [[236, "nvtabular-ops-joinexternal"]], "nvtabular.ops.JoinGroupby": [[237, "nvtabular-ops-joingroupby"]], "nvtabular.ops.LambdaOp": [[238, "nvtabular-ops-lambdaop"]], "nvtabular.ops.ListSlice": [[239, "nvtabular-ops-listslice"]], "nvtabular.ops.LogOp": [[240, "nvtabular-ops-logop"]], "nvtabular.ops.Normalize": [[241, "nvtabular-ops-normalize"]], "nvtabular.ops.NormalizeMinMax": [[242, "nvtabular-ops-normalizeminmax"]], "nvtabular.ops.Operator": [[243, "nvtabular-ops-operator"]], "nvtabular.ops.ReduceDtypeSize": [[244, "nvtabular-ops-reducedtypesize"]], "nvtabular.ops.Rename": [[245, "nvtabular-ops-rename"]], "nvtabular.ops.StatOperator": [[246, "nvtabular-ops-statoperator"]], "nvtabular.ops.TagAsItemFeatures": [[247, "nvtabular-ops-tagasitemfeatures"]], "nvtabular.ops.TagAsItemID": [[248, "nvtabular-ops-tagasitemid"]], "nvtabular.ops.TagAsUserFeatures": [[249, "nvtabular-ops-tagasuserfeatures"]], "nvtabular.ops.TagAsUserID": [[250, "nvtabular-ops-tagasuserid"]], "nvtabular.ops.TargetEncoding": [[251, "nvtabular-ops-targetencoding"]], "nvtabular.ops.ValueCount": [[252, "nvtabular-ops-valuecount"]], "nvtabular.workflow.workflow.Workflow": [[253, "nvtabular-workflow-workflow-workflow"]], "nvtabular.workflow.workflow.WorkflowNode": [[254, "nvtabular-workflow-workflow-workflownode"]], "Recommender Models": [[255, "recommender-models"]], "Ranking Models": [[255, "ranking-models"]], "Resources for Ranking Models:": [[255, "resources-for-ranking-models"]], "Retrieval Models": [[255, "retrieval-models"]], "Resources for Retrieval Models:": [[255, "resources-for-retrieval-models"]], "Sequential and Session-Based Models": [[255, "sequential-and-session-based-models"]], "Resources for Session-Based Models:": [[255, "resources-for-session-based-models"]], "Recommender Systems Guide": [[256, "recommender-systems-guide"]], "Merlin": [[257, "merlin"]], "Related Resources": [[257, "related-resources"]], "Merlin Support Matrix": [[258, "merlin-support-matrix"]], "Merlin HugeCTR Support Matrix": [[259, "merlin-hugectr-support-matrix"]], "Merlin PyTorch Support Matrix": [[260, "merlin-pytorch-support-matrix"]], "Merlin TensorFlow Support Matrix": [[261, "merlin-tensorflow-support-matrix"]]}, "indexentries": {"baseoperator (class in merlin.dag)": [[1, "merlin.dag.BaseOperator"]], "__init__() (merlin.dag.baseoperator method)": [[1, "merlin.dag.BaseOperator.__init__"]], "column_mapping() (merlin.dag.baseoperator method)": [[1, "merlin.dag.BaseOperator.column_mapping"]], "compute_column_schema() (merlin.dag.baseoperator method)": [[1, "merlin.dag.BaseOperator.compute_column_schema"]], "compute_input_schema() (merlin.dag.baseoperator method)": [[1, "merlin.dag.BaseOperator.compute_input_schema"]], "compute_output_schema() (merlin.dag.baseoperator method)": [[1, "merlin.dag.BaseOperator.compute_output_schema"]], "compute_selector() (merlin.dag.baseoperator method)": [[1, "merlin.dag.BaseOperator.compute_selector"]], "create_node() (merlin.dag.baseoperator method)": [[1, "merlin.dag.BaseOperator.create_node"]], "dependencies (merlin.dag.baseoperator property)": [[1, "merlin.dag.BaseOperator.dependencies"]], "dynamic_dtypes (merlin.dag.baseoperator property)": [[1, "merlin.dag.BaseOperator.dynamic_dtypes"]], "is_subgraph (merlin.dag.baseoperator property)": [[1, "merlin.dag.BaseOperator.is_subgraph"]], "label (merlin.dag.baseoperator property)": [[1, "merlin.dag.BaseOperator.label"]], "load_artifacts() (merlin.dag.baseoperator method)": [[1, "merlin.dag.BaseOperator.load_artifacts"]], "output_column_names() (merlin.dag.baseoperator method)": [[1, "merlin.dag.BaseOperator.output_column_names"]], "output_dtype (merlin.dag.baseoperator property)": [[1, "merlin.dag.BaseOperator.output_dtype"]], "output_properties (merlin.dag.baseoperator property)": [[1, "merlin.dag.BaseOperator.output_properties"]], "output_tags (merlin.dag.baseoperator property)": [[1, "merlin.dag.BaseOperator.output_tags"]], "save_artifacts() (merlin.dag.baseoperator method)": [[1, "merlin.dag.BaseOperator.save_artifacts"]], "supported_formats (merlin.dag.baseoperator property)": [[1, "merlin.dag.BaseOperator.supported_formats"]], "supports (merlin.dag.baseoperator property)": [[1, "merlin.dag.BaseOperator.supports"]], "transform() (merlin.dag.baseoperator method)": [[1, "merlin.dag.BaseOperator.transform"]], "validate_schemas() (merlin.dag.baseoperator method)": [[1, "merlin.dag.BaseOperator.validate_schemas"]], "columnselector (class in merlin.dag)": [[2, "merlin.dag.ColumnSelector"]], "__init__() (merlin.dag.columnselector method)": [[2, "merlin.dag.ColumnSelector.__init__"]], "all (merlin.dag.columnselector property)": [[2, "merlin.dag.ColumnSelector.all"]], "filter_columns() (merlin.dag.columnselector method)": [[2, "merlin.dag.ColumnSelector.filter_columns"]], "grouped_names (merlin.dag.columnselector property)": [[2, "merlin.dag.ColumnSelector.grouped_names"]], "names (merlin.dag.columnselector property)": [[2, "merlin.dag.ColumnSelector.names"]], "resolve() (merlin.dag.columnselector method)": [[2, "merlin.dag.ColumnSelector.resolve"]], "tags (merlin.dag.columnselector property)": [[2, "merlin.dag.ColumnSelector.tags"]], "graph (class in merlin.dag)": [[3, "merlin.dag.Graph"]], "__init__() (merlin.dag.graph method)": [[3, "merlin.dag.Graph.__init__"]], "clear_stats() (merlin.dag.graph method)": [[3, "merlin.dag.Graph.clear_stats"]], "column_mapping (merlin.dag.graph property)": [[3, "merlin.dag.Graph.column_mapping"]], "construct_schema() (merlin.dag.graph method)": [[3, "merlin.dag.Graph.construct_schema"]], "get_nodes_by_op_type() (merlin.dag.graph class method)": [[3, "merlin.dag.Graph.get_nodes_by_op_type"]], "input_dtypes (merlin.dag.graph property)": [[3, "merlin.dag.Graph.input_dtypes"]], "input_schema (merlin.dag.graph property)": [[3, "merlin.dag.Graph.input_schema"]], "leaf_nodes (merlin.dag.graph property)": [[3, "merlin.dag.Graph.leaf_nodes"]], "output_dtypes (merlin.dag.graph property)": [[3, "merlin.dag.Graph.output_dtypes"]], "output_schema (merlin.dag.graph property)": [[3, "merlin.dag.Graph.output_schema"]], "remove_inputs() (merlin.dag.graph method)": [[3, "merlin.dag.Graph.remove_inputs"]], "subgraph() (merlin.dag.graph method)": [[3, "merlin.dag.Graph.subgraph"]], "node (class in merlin.dag)": [[4, "merlin.dag.Node"]], "__init__() (merlin.dag.node method)": [[4, "merlin.dag.Node.__init__"]], "add_child() (merlin.dag.node method)": [[4, "merlin.dag.Node.add_child"]], "add_dependency() (merlin.dag.node method)": [[4, "merlin.dag.Node.add_dependency"]], "add_parent() (merlin.dag.node method)": [[4, "merlin.dag.Node.add_parent"]], "column_mapping (merlin.dag.node property)": [[4, "merlin.dag.Node.column_mapping"]], "compute_schemas() (merlin.dag.node method)": [[4, "merlin.dag.Node.compute_schemas"]], "construct_from() (merlin.dag.node class method)": [[4, "merlin.dag.Node.construct_from"]], "dependency_columns (merlin.dag.node property)": [[4, "merlin.dag.Node.dependency_columns"]], "exportable() (merlin.dag.node method)": [[4, "merlin.dag.Node.exportable"]], "graph (merlin.dag.node property)": [[4, "merlin.dag.Node.graph"]], "grouped_parents_with_dependencies (merlin.dag.node property)": [[4, "merlin.dag.Node.grouped_parents_with_dependencies"]], "input_columns (merlin.dag.node property)": [[4, "merlin.dag.Node.input_columns"]], "label (merlin.dag.node property)": [[4, "merlin.dag.Node.label"]], "output_columns (merlin.dag.node property)": [[4, "merlin.dag.Node.output_columns"]], "parents_with_dependencies (merlin.dag.node property)": [[4, "merlin.dag.Node.parents_with_dependencies"]], "remove_child() (merlin.dag.node method)": [[4, "merlin.dag.Node.remove_child"]], "remove_inputs() (merlin.dag.node method)": [[4, "merlin.dag.Node.remove_inputs"]], "selector (merlin.dag.node property)": [[4, "merlin.dag.Node.selector"]], "validate_schemas() (merlin.dag.node method)": [[4, "merlin.dag.Node.validate_schemas"]], "dataset (class in merlin.io)": [[5, "merlin.io.Dataset"]], "__init__() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.__init__"]], "compute() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.compute"]], "file_partition_map (merlin.io.dataset property)": [[5, "merlin.io.Dataset.file_partition_map"]], "head() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.head"]], "infer_schema() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.infer_schema"]], "merge() (merlin.io.dataset class method)": [[5, "merlin.io.Dataset.merge"]], "npartitions (merlin.io.dataset property)": [[5, "merlin.io.Dataset.npartitions"]], "num_rows (merlin.io.dataset property)": [[5, "merlin.io.Dataset.num_rows"]], "partition_lens (merlin.io.dataset property)": [[5, "merlin.io.Dataset.partition_lens"]], "persist() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.persist"]], "regenerate_dataset() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.regenerate_dataset"]], "repartition() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.repartition"]], "sample_dtypes() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.sample_dtypes"]], "shuffle_by_keys() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.shuffle_by_keys"]], "tail() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.tail"]], "to_cpu() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.to_cpu"]], "to_ddf() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.to_ddf"]], "to_gpu() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.to_gpu"]], "to_hugectr() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.to_hugectr"]], "to_iter() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.to_iter"]], "to_npy() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.to_npy"]], "to_parquet() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.to_parquet"]], "validate_dataset() (merlin.io.dataset method)": [[5, "merlin.io.Dataset.validate_dataset"]], "columnschema (class in merlin.schema)": [[6, "merlin.schema.ColumnSchema"]], "__init__() (merlin.schema.columnschema method)": [[6, "merlin.schema.ColumnSchema.__init__"]], "dims (merlin.schema.columnschema attribute)": [[6, "merlin.schema.ColumnSchema.dims"]], "dtype (merlin.schema.columnschema attribute)": [[6, "merlin.schema.ColumnSchema.dtype"]], "float_domain (merlin.schema.columnschema property)": [[6, "merlin.schema.ColumnSchema.float_domain"]], "int_domain (merlin.schema.columnschema property)": [[6, "merlin.schema.ColumnSchema.int_domain"]], "is_list (merlin.schema.columnschema attribute)": [[6, "merlin.schema.ColumnSchema.is_list"]], "is_ragged (merlin.schema.columnschema attribute)": [[6, "merlin.schema.ColumnSchema.is_ragged"]], "name (merlin.schema.columnschema attribute)": [[6, "merlin.schema.ColumnSchema.name"]], "properties (merlin.schema.columnschema attribute)": [[6, "merlin.schema.ColumnSchema.properties"]], "shape (merlin.schema.columnschema property)": [[6, "merlin.schema.ColumnSchema.shape"]], "tags (merlin.schema.columnschema attribute)": [[6, "merlin.schema.ColumnSchema.tags"]], "value_count (merlin.schema.columnschema property)": [[6, "merlin.schema.ColumnSchema.value_count"]], "with_dtype() (merlin.schema.columnschema method)": [[6, "merlin.schema.ColumnSchema.with_dtype"]], "with_name() (merlin.schema.columnschema method)": [[6, "merlin.schema.ColumnSchema.with_name"]], "with_properties() (merlin.schema.columnschema method)": [[6, "merlin.schema.ColumnSchema.with_properties"]], "with_shape() (merlin.schema.columnschema method)": [[6, "merlin.schema.ColumnSchema.with_shape"]], "with_tags() (merlin.schema.columnschema method)": [[6, "merlin.schema.ColumnSchema.with_tags"]], "schema (class in merlin.schema)": [[7, "merlin.schema.Schema"]], "__init__() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.__init__"]], "apply() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.apply"]], "apply_inverse() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.apply_inverse"]], "column_names (merlin.schema.schema property)": [[7, "merlin.schema.Schema.column_names"]], "copy() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.copy"]], "excluding() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.excluding"]], "excluding_by_name() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.excluding_by_name"]], "excluding_by_tag() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.excluding_by_tag"]], "first (merlin.schema.schema property)": [[7, "merlin.schema.Schema.first"]], "get() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.get"]], "remove_by_tag() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.remove_by_tag"]], "remove_col() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.remove_col"]], "select() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.select"]], "select_by_name() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.select_by_name"]], "select_by_tag() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.select_by_tag"]], "to_pandas() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.to_pandas"]], "without() (merlin.schema.schema method)": [[7, "merlin.schema.Schema.without"]], "binary (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.BINARY"]], "binary_classification (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.BINARY_CLASSIFICATION"]], "categorical (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.CATEGORICAL"]], "classification (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.CLASSIFICATION"]], "context (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.CONTEXT"]], "continuous (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.CONTINUOUS"]], "embedding (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.EMBEDDING"]], "id (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.ID"]], "item (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.ITEM"]], "item_id (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.ITEM_ID"]], "list (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.LIST"]], "multi_class (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.MULTI_CLASS"]], "multi_class_classification (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.MULTI_CLASS_CLASSIFICATION"]], "regression (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.REGRESSION"]], "sequence (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.SEQUENCE"]], "session (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.SESSION"]], "session_id (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.SESSION_ID"]], "target (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.TARGET"]], "text (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.TEXT"]], "text_tokenized (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.TEXT_TOKENIZED"]], "time (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.TIME"]], "tokenized (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.TOKENIZED"]], "tags (class in merlin.schema)": [[8, "merlin.schema.Tags"]], "user (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.USER"]], "user_id (merlin.schema.tags attribute)": [[8, "merlin.schema.Tags.USER_ID"]], "__init__() (merlin.schema.tags method)": [[8, "merlin.schema.Tags.__init__"]], "merlin": [[9, "module-merlin"]], "module": [[9, "module-merlin"], [17, "module-merlin_standard_lib"], [18, "module-merlin_standard_lib.proto"], [18, "module-merlin_standard_lib.proto.schema_bp"], [19, "module-merlin_standard_lib.schema"], [19, "module-merlin_standard_lib.schema.schema"], [19, "module-merlin_standard_lib.schema.tag"], [20, "module-merlin_standard_lib.utils"], [20, "module-merlin_standard_lib.utils.embedding_utils"], [22, "module-transformers4rec"], [22, "module-transformers4rec.types"], [23, "module-transformers4rec.config"], [23, "module-transformers4rec.config.schema"], [23, "module-transformers4rec.config.trainer"], [23, "module-transformers4rec.config.transformer"], [24, "module-transformers4rec.torch"], [24, "module-transformers4rec.torch.masking"], [24, "module-transformers4rec.torch.ranking_metric"], [24, "module-transformers4rec.torch.trainer"], [24, "module-transformers4rec.torch.typing"], [25, "module-transformers4rec.torch.block"], [25, "module-transformers4rec.torch.block.base"], [25, "module-transformers4rec.torch.block.mlp"], [25, "module-transformers4rec.torch.block.transformer"], [26, "module-transformers4rec.torch.features"], [26, "module-transformers4rec.torch.features.base"], [26, "module-transformers4rec.torch.features.continuous"], [26, "module-transformers4rec.torch.features.embedding"], [26, "module-transformers4rec.torch.features.sequence"], [26, "module-transformers4rec.torch.features.tabular"], [26, "module-transformers4rec.torch.features.text"], [27, "module-transformers4rec.torch.model"], [27, "module-transformers4rec.torch.model.prediction_task"], [28, "module-transformers4rec.torch.tabular"], [28, "module-transformers4rec.torch.tabular.aggregation"], [28, "module-transformers4rec.torch.tabular.transformations"], [29, "module-transformers4rec.torch.utils"], [29, "module-transformers4rec.torch.utils.data_utils"], [29, "module-transformers4rec.torch.utils.examples_utils"], [29, "module-transformers4rec.torch.utils.schema_utils"], [29, "module-transformers4rec.torch.utils.torch_utils"], [30, "module-transformers4rec.utils"], [30, "module-transformers4rec.utils.dependencies"]], "columnschema (class in merlin_standard_lib)": [[17, "merlin_standard_lib.ColumnSchema"]], "schema (class in merlin_standard_lib)": [[17, "merlin_standard_lib.Schema"]], "add() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.add"]], "apply() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.apply"]], "apply_inverse() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.apply_inverse"]], "categorical_cardinalities() (in module merlin_standard_lib)": [[17, "merlin_standard_lib.categorical_cardinalities"]], "column_names (merlin_standard_lib.schema property)": [[17, "merlin_standard_lib.Schema.column_names"]], "column_schemas (merlin_standard_lib.schema property)": [[17, "merlin_standard_lib.Schema.column_schemas"]], "copy() (merlin_standard_lib.columnschema method)": [[17, "merlin_standard_lib.ColumnSchema.copy"]], "copy() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.copy"]], "create() (merlin_standard_lib.schema class method)": [[17, "merlin_standard_lib.Schema.create"]], "create_categorical() (merlin_standard_lib.columnschema class method)": [[17, "merlin_standard_lib.ColumnSchema.create_categorical"]], "create_continuous() (merlin_standard_lib.columnschema class method)": [[17, "merlin_standard_lib.ColumnSchema.create_continuous"]], "feature (merlin_standard_lib.schema attribute)": [[17, "merlin_standard_lib.Schema.feature"]], "filter_column_schemas() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.filter_column_schemas"]], "filter_columns_from_dict() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.filter_columns_from_dict"]], "from_json() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.from_json"]], "from_proto_text() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.from_proto_text"]], "item_id_column_name (merlin_standard_lib.schema property)": [[17, "merlin_standard_lib.Schema.item_id_column_name"]], "map_column_schemas() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.map_column_schemas"]], "merlin_standard_lib": [[17, "module-merlin_standard_lib"]], "properties (merlin_standard_lib.columnschema property)": [[17, "merlin_standard_lib.ColumnSchema.properties"]], "remove_by_name() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.remove_by_name"]], "remove_by_tag() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.remove_by_tag"]], "remove_by_type() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.remove_by_type"]], "select_by_name() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.select_by_name"]], "select_by_tag() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.select_by_tag"]], "select_by_type() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.select_by_type"]], "tags (merlin_standard_lib.columnschema property)": [[17, "merlin_standard_lib.ColumnSchema.tags"]], "to_proto_text() (merlin_standard_lib.columnschema method)": [[17, "merlin_standard_lib.ColumnSchema.to_proto_text"]], "to_proto_text() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.to_proto_text"]], "with_name() (merlin_standard_lib.columnschema method)": [[17, "merlin_standard_lib.ColumnSchema.with_name"]], "with_properties() (merlin_standard_lib.columnschema method)": [[17, "merlin_standard_lib.ColumnSchema.with_properties"]], "with_tags() (merlin_standard_lib.columnschema method)": [[17, "merlin_standard_lib.ColumnSchema.with_tags"]], "with_tags_based_on_properties() (merlin_standard_lib.columnschema method)": [[17, "merlin_standard_lib.ColumnSchema.with_tags_based_on_properties"]], "with_tags_based_on_properties() (merlin_standard_lib.schema method)": [[17, "merlin_standard_lib.Schema.with_tags_based_on_properties"]], "alpha (merlin_standard_lib.proto.schema_bp.lifecyclestage attribute)": [[18, "merlin_standard_lib.proto.schema_bp.LifecycleStage.ALPHA"]], "annotation (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.Annotation"]], "beta (merlin_standard_lib.proto.schema_bp.lifecyclestage attribute)": [[18, "merlin_standard_lib.proto.schema_bp.LifecycleStage.BETA"]], "bytes (merlin_standard_lib.proto.schema_bp.featuretype attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureType.BYTES"]], "booldomain (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.BoolDomain"]], "debug_only (merlin_standard_lib.proto.schema_bp.lifecyclestage attribute)": [[18, "merlin_standard_lib.proto.schema_bp.LifecycleStage.DEBUG_ONLY"]], "deprecated (merlin_standard_lib.proto.schema_bp.lifecyclestage attribute)": [[18, "merlin_standard_lib.proto.schema_bp.LifecycleStage.DEPRECATED"]], "disabled (merlin_standard_lib.proto.schema_bp.lifecyclestage attribute)": [[18, "merlin_standard_lib.proto.schema_bp.LifecycleStage.DISABLED"]], "datasetconstraints (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.DatasetConstraints"]], "distributionconstraints (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.DistributionConstraints"]], "float (merlin_standard_lib.proto.schema_bp.featuretype attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureType.FLOAT"]], "format_unknown (merlin_standard_lib.proto.schema_bp.timedomainintegertimeformat attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TimeDomainIntegerTimeFormat.FORMAT_UNKNOWN"]], "format_unknown (merlin_standard_lib.proto.schema_bp.timeofdaydomainintegertimeofdayformat attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TimeOfDayDomainIntegerTimeOfDayFormat.FORMAT_UNKNOWN"]], "feature (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.Feature"]], "featurecomparator (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureComparator"]], "featurecoverageconstraints (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureCoverageConstraints"]], "featurepresence (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.FeaturePresence"]], "featurepresencewithingroup (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.FeaturePresenceWithinGroup"]], "featuretype (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureType"]], "fixedshape (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.FixedShape"]], "fixedshapedim (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.FixedShapeDim"]], "floatdomain (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.FloatDomain"]], "int (merlin_standard_lib.proto.schema_bp.featuretype attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureType.INT"]], "int32 (merlin_standard_lib.proto.schema_bp.tensorrepresentationrowpartitiondtype attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationRowPartitionDType.INT32"]], "int64 (merlin_standard_lib.proto.schema_bp.tensorrepresentationrowpartitiondtype attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationRowPartitionDType.INT64"]], "imagedomain (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.ImageDomain"]], "infinitynorm (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.InfinityNorm"]], "intdomain (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.IntDomain"]], "jensenshannondivergence (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.JensenShannonDivergence"]], "lifecyclestage (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.LifecycleStage"]], "middomain (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.MIDDomain"]], "naturallanguagedomain (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.NaturalLanguageDomain"]], "numericvaluecomparator (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.NumericValueComparator"]], "packed_64_nanos (merlin_standard_lib.proto.schema_bp.timeofdaydomainintegertimeofdayformat attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TimeOfDayDomainIntegerTimeOfDayFormat.PACKED_64_NANOS"]], "planned (merlin_standard_lib.proto.schema_bp.lifecyclestage attribute)": [[18, "merlin_standard_lib.proto.schema_bp.LifecycleStage.PLANNED"]], "production (merlin_standard_lib.proto.schema_bp.lifecyclestage attribute)": [[18, "merlin_standard_lib.proto.schema_bp.LifecycleStage.PRODUCTION"]], "path (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.Path"]], "struct (merlin_standard_lib.proto.schema_bp.featuretype attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureType.STRUCT"]], "sequencelengthconstraints (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.SequenceLengthConstraints"]], "sequencevalueconstraints (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.SequenceValueConstraints"]], "sparsefeature (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeature"]], "sparsefeatureindexfeature (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeatureIndexFeature"]], "sparsefeaturevaluefeature (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeatureValueFeature"]], "stringdomain (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.StringDomain"]], "structdomain (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.StructDomain"]], "type_unknown (merlin_standard_lib.proto.schema_bp.featuretype attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureType.TYPE_UNKNOWN"]], "tensorrepresentation (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentation"]], "tensorrepresentationdefaultvalue (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationDefaultValue"]], "tensorrepresentationdensetensor (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationDenseTensor"]], "tensorrepresentationgroup (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationGroup"]], "tensorrepresentationraggedtensor (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationRaggedTensor"]], "tensorrepresentationraggedtensorpartition (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationRaggedTensorPartition"]], "tensorrepresentationrowpartitiondtype (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationRowPartitionDType"]], "tensorrepresentationsparsetensor (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationSparseTensor"]], "tensorrepresentationvarlensparsetensor (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationVarLenSparseTensor"]], "timedomain (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.TimeDomain"]], "timedomainintegertimeformat (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.TimeDomainIntegerTimeFormat"]], "timeofdaydomain (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.TimeOfDayDomain"]], "timeofdaydomainintegertimeofdayformat (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.TimeOfDayDomainIntegerTimeOfDayFormat"]], "unix_days (merlin_standard_lib.proto.schema_bp.timedomainintegertimeformat attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TimeDomainIntegerTimeFormat.UNIX_DAYS"]], "unix_microseconds (merlin_standard_lib.proto.schema_bp.timedomainintegertimeformat attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TimeDomainIntegerTimeFormat.UNIX_MICROSECONDS"]], "unix_milliseconds (merlin_standard_lib.proto.schema_bp.timedomainintegertimeformat attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TimeDomainIntegerTimeFormat.UNIX_MILLISECONDS"]], "unix_nanoseconds (merlin_standard_lib.proto.schema_bp.timedomainintegertimeformat attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TimeDomainIntegerTimeFormat.UNIX_NANOSECONDS"]], "unix_seconds (merlin_standard_lib.proto.schema_bp.timedomainintegertimeformat attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TimeDomainIntegerTimeFormat.UNIX_SECONDS"]], "unknown_stage (merlin_standard_lib.proto.schema_bp.lifecyclestage attribute)": [[18, "merlin_standard_lib.proto.schema_bp.LifecycleStage.UNKNOWN_STAGE"]], "unspecified (merlin_standard_lib.proto.schema_bp.tensorrepresentationrowpartitiondtype attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationRowPartitionDType.UNSPECIFIED"]], "urldomain (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.URLDomain"]], "uniqueconstraints (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.UniqueConstraints"]], "valuecount (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.ValueCount"]], "valuecountlist (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.ValueCountList"]], "weightedfeature (class in merlin_standard_lib.proto.schema_bp)": [[18, "merlin_standard_lib.proto.schema_bp.WeightedFeature"]], "annotation (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.annotation"]], "bool_domain (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.bool_domain"]], "bytes_value (merlin_standard_lib.proto.schema_bp.tensorrepresentationdefaultvalue attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationDefaultValue.bytes_value"]], "column_name (merlin_standard_lib.proto.schema_bp.tensorrepresentationdensetensor attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationDenseTensor.column_name"]], "column_name (merlin_standard_lib.proto.schema_bp.tensorrepresentationvarlensparsetensor attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationVarLenSparseTensor.column_name"]], "comment (merlin_standard_lib.proto.schema_bp.annotation attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Annotation.comment"]], "coverage (merlin_standard_lib.proto.schema_bp.naturallanguagedomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.NaturalLanguageDomain.coverage"]], "default_value (merlin_standard_lib.proto.schema_bp.tensorrepresentationdensetensor attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationDenseTensor.default_value"]], "dense_shape (merlin_standard_lib.proto.schema_bp.sparsefeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeature.dense_shape"]], "dense_shape (merlin_standard_lib.proto.schema_bp.tensorrepresentationsparsetensor attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationSparseTensor.dense_shape"]], "dense_tensor (merlin_standard_lib.proto.schema_bp.tensorrepresentation attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentation.dense_tensor"]], "deprecated (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.deprecated"]], "deprecated (merlin_standard_lib.proto.schema_bp.sparsefeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeature.deprecated"]], "dim (merlin_standard_lib.proto.schema_bp.fixedshape attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FixedShape.dim"]], "disallow_inf (merlin_standard_lib.proto.schema_bp.floatdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FloatDomain.disallow_inf"]], "disallow_nan (merlin_standard_lib.proto.schema_bp.floatdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FloatDomain.disallow_nan"]], "distribution_constraints (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.distribution_constraints"]], "domain (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.domain"]], "drift_comparator (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.drift_comparator"]], "excluded_int_tokens (merlin_standard_lib.proto.schema_bp.featurecoverageconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureCoverageConstraints.excluded_int_tokens"]], "excluded_int_value (merlin_standard_lib.proto.schema_bp.sequencelengthconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SequenceLengthConstraints.excluded_int_value"]], "excluded_string_tokens (merlin_standard_lib.proto.schema_bp.featurecoverageconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureCoverageConstraints.excluded_string_tokens"]], "excluded_string_value (merlin_standard_lib.proto.schema_bp.sequencelengthconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SequenceLengthConstraints.excluded_string_value"]], "extra_metadata (merlin_standard_lib.proto.schema_bp.annotation attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Annotation.extra_metadata"]], "false_value (merlin_standard_lib.proto.schema_bp.booldomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.BoolDomain.false_value"]], "feature (merlin_standard_lib.proto.schema_bp.structdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.StructDomain.feature"]], "feature (merlin_standard_lib.proto.schema_bp.weightedfeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.WeightedFeature.feature"]], "feature_path (merlin_standard_lib.proto.schema_bp.tensorrepresentationraggedtensor attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationRaggedTensor.feature_path"]], "float_domain (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.float_domain"]], "float_value (merlin_standard_lib.proto.schema_bp.tensorrepresentationdefaultvalue attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationDefaultValue.float_value"]], "group_presence (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.group_presence"]], "image_domain (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.image_domain"]], "in_environment (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.in_environment"]], "index_column_names (merlin_standard_lib.proto.schema_bp.tensorrepresentationsparsetensor attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationSparseTensor.index_column_names"]], "index_feature (merlin_standard_lib.proto.schema_bp.sparsefeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeature.index_feature"]], "infinity_norm (merlin_standard_lib.proto.schema_bp.featurecomparator attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureComparator.infinity_norm"]], "int_domain (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.int_domain"]], "int_value (merlin_standard_lib.proto.schema_bp.sequencevalueconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SequenceValueConstraints.int_value"]], "int_value (merlin_standard_lib.proto.schema_bp.tensorrepresentationdefaultvalue attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationDefaultValue.int_value"]], "integer_format (merlin_standard_lib.proto.schema_bp.timedomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TimeDomain.integer_format"]], "integer_format (merlin_standard_lib.proto.schema_bp.timeofdaydomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TimeOfDayDomain.integer_format"]], "is_categorical (merlin_standard_lib.proto.schema_bp.intdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.IntDomain.is_categorical"]], "is_embedding (merlin_standard_lib.proto.schema_bp.floatdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FloatDomain.is_embedding"]], "is_sorted (merlin_standard_lib.proto.schema_bp.sparsefeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeature.is_sorted"]], "jensen_shannon_divergence (merlin_standard_lib.proto.schema_bp.featurecomparator attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureComparator.jensen_shannon_divergence"]], "lifecycle_stage (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.lifecycle_stage"]], "lifecycle_stage (merlin_standard_lib.proto.schema_bp.sparsefeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeature.lifecycle_stage"]], "lifecycle_stage (merlin_standard_lib.proto.schema_bp.weightedfeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.WeightedFeature.lifecycle_stage"]], "location_constraint_regex (merlin_standard_lib.proto.schema_bp.naturallanguagedomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.NaturalLanguageDomain.location_constraint_regex"]], "max (merlin_standard_lib.proto.schema_bp.floatdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FloatDomain.max"]], "max (merlin_standard_lib.proto.schema_bp.intdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.IntDomain.max"]], "max (merlin_standard_lib.proto.schema_bp.uniqueconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.UniqueConstraints.max"]], "max (merlin_standard_lib.proto.schema_bp.valuecount attribute)": [[18, "merlin_standard_lib.proto.schema_bp.ValueCount.max"]], "max_examples_count (merlin_standard_lib.proto.schema_bp.datasetconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.DatasetConstraints.max_examples_count"]], "max_fraction_of_sequences (merlin_standard_lib.proto.schema_bp.sequencevalueconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SequenceValueConstraints.max_fraction_of_sequences"]], "max_fraction_threshold (merlin_standard_lib.proto.schema_bp.numericvaluecomparator attribute)": [[18, "merlin_standard_lib.proto.schema_bp.NumericValueComparator.max_fraction_threshold"]], "max_image_byte_size (merlin_standard_lib.proto.schema_bp.imagedomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.ImageDomain.max_image_byte_size"]], "max_per_sequence (merlin_standard_lib.proto.schema_bp.sequencevalueconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SequenceValueConstraints.max_per_sequence"]], "max_sequence_length (merlin_standard_lib.proto.schema_bp.sequencelengthconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SequenceLengthConstraints.max_sequence_length"]], "merlin_standard_lib.proto": [[18, "module-merlin_standard_lib.proto"]], "merlin_standard_lib.proto.schema_bp": [[18, "module-merlin_standard_lib.proto.schema_bp"]], "metadata (merlin_standard_lib.proto.schema_bp.annotation property)": [[18, "merlin_standard_lib.proto.schema_bp.Annotation.metadata"]], "mid_domain (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.mid_domain"]], "min (merlin_standard_lib.proto.schema_bp.floatdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FloatDomain.min"]], "min (merlin_standard_lib.proto.schema_bp.intdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.IntDomain.min"]], "min (merlin_standard_lib.proto.schema_bp.uniqueconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.UniqueConstraints.min"]], "min (merlin_standard_lib.proto.schema_bp.valuecount attribute)": [[18, "merlin_standard_lib.proto.schema_bp.ValueCount.min"]], "min_avg_token_length (merlin_standard_lib.proto.schema_bp.featurecoverageconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureCoverageConstraints.min_avg_token_length"]], "min_count (merlin_standard_lib.proto.schema_bp.featurepresence attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeaturePresence.min_count"]], "min_coverage (merlin_standard_lib.proto.schema_bp.featurecoverageconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureCoverageConstraints.min_coverage"]], "min_domain_mass (merlin_standard_lib.proto.schema_bp.distributionconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.DistributionConstraints.min_domain_mass"]], "min_examples_count (merlin_standard_lib.proto.schema_bp.datasetconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.DatasetConstraints.min_examples_count"]], "min_fraction (merlin_standard_lib.proto.schema_bp.featurepresence attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeaturePresence.min_fraction"]], "min_fraction_of_sequences (merlin_standard_lib.proto.schema_bp.sequencevalueconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SequenceValueConstraints.min_fraction_of_sequences"]], "min_fraction_threshold (merlin_standard_lib.proto.schema_bp.numericvaluecomparator attribute)": [[18, "merlin_standard_lib.proto.schema_bp.NumericValueComparator.min_fraction_threshold"]], "min_per_sequence (merlin_standard_lib.proto.schema_bp.sequencevalueconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SequenceValueConstraints.min_per_sequence"]], "min_sequence_length (merlin_standard_lib.proto.schema_bp.sequencelengthconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SequenceLengthConstraints.min_sequence_length"]], "minimum_supported_image_fraction (merlin_standard_lib.proto.schema_bp.imagedomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.ImageDomain.minimum_supported_image_fraction"]], "name (merlin_standard_lib.proto.schema_bp.booldomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.BoolDomain.name"]], "name (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.name"]], "name (merlin_standard_lib.proto.schema_bp.fixedshapedim attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FixedShapeDim.name"]], "name (merlin_standard_lib.proto.schema_bp.floatdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FloatDomain.name"]], "name (merlin_standard_lib.proto.schema_bp.intdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.IntDomain.name"]], "name (merlin_standard_lib.proto.schema_bp.sparsefeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeature.name"]], "name (merlin_standard_lib.proto.schema_bp.sparsefeatureindexfeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeatureIndexFeature.name"]], "name (merlin_standard_lib.proto.schema_bp.sparsefeaturevaluefeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeatureValueFeature.name"]], "name (merlin_standard_lib.proto.schema_bp.stringdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.StringDomain.name"]], "name (merlin_standard_lib.proto.schema_bp.weightedfeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.WeightedFeature.name"]], "natural_language_domain (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.natural_language_domain"]], "not_in_environment (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.not_in_environment"]], "num_examples_drift_comparator (merlin_standard_lib.proto.schema_bp.datasetconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.DatasetConstraints.num_examples_drift_comparator"]], "num_examples_version_comparator (merlin_standard_lib.proto.schema_bp.datasetconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.DatasetConstraints.num_examples_version_comparator"]], "oov_string_tokens (merlin_standard_lib.proto.schema_bp.featurecoverageconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeatureCoverageConstraints.oov_string_tokens"]], "partition (merlin_standard_lib.proto.schema_bp.tensorrepresentationraggedtensor attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationRaggedTensor.partition"]], "presence (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.presence"]], "presence (merlin_standard_lib.proto.schema_bp.sparsefeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeature.presence"]], "ragged_tensor (merlin_standard_lib.proto.schema_bp.tensorrepresentation attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentation.ragged_tensor"]], "required (merlin_standard_lib.proto.schema_bp.featurepresencewithingroup attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FeaturePresenceWithinGroup.required"]], "row_length (merlin_standard_lib.proto.schema_bp.tensorrepresentationraggedtensorpartition attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationRaggedTensorPartition.row_length"]], "row_partition_dtype (merlin_standard_lib.proto.schema_bp.tensorrepresentationraggedtensor attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationRaggedTensor.row_partition_dtype"]], "sequence_length_constraints (merlin_standard_lib.proto.schema_bp.naturallanguagedomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.NaturalLanguageDomain.sequence_length_constraints"]], "shape (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.shape"]], "shape (merlin_standard_lib.proto.schema_bp.tensorrepresentationdensetensor attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationDenseTensor.shape"]], "size (merlin_standard_lib.proto.schema_bp.fixedshapedim attribute)": [[18, "merlin_standard_lib.proto.schema_bp.FixedShapeDim.size"]], "skew_comparator (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.skew_comparator"]], "sparse_feature (merlin_standard_lib.proto.schema_bp.structdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.StructDomain.sparse_feature"]], "sparse_tensor (merlin_standard_lib.proto.schema_bp.tensorrepresentation attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentation.sparse_tensor"]], "step (merlin_standard_lib.proto.schema_bp.path attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Path.step"]], "string_domain (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.string_domain"]], "string_format (merlin_standard_lib.proto.schema_bp.timedomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TimeDomain.string_format"]], "string_format (merlin_standard_lib.proto.schema_bp.timeofdaydomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TimeOfDayDomain.string_format"]], "string_value (merlin_standard_lib.proto.schema_bp.sequencevalueconstraints attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SequenceValueConstraints.string_value"]], "struct_domain (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.struct_domain"]], "tag (merlin_standard_lib.proto.schema_bp.annotation attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Annotation.tag"]], "tensor_representation (merlin_standard_lib.proto.schema_bp.tensorrepresentationgroup attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationGroup.tensor_representation"]], "threshold (merlin_standard_lib.proto.schema_bp.infinitynorm attribute)": [[18, "merlin_standard_lib.proto.schema_bp.InfinityNorm.threshold"]], "threshold (merlin_standard_lib.proto.schema_bp.jensenshannondivergence attribute)": [[18, "merlin_standard_lib.proto.schema_bp.JensenShannonDivergence.threshold"]], "time_domain (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.time_domain"]], "time_of_day_domain (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.time_of_day_domain"]], "token_constraints (merlin_standard_lib.proto.schema_bp.naturallanguagedomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.NaturalLanguageDomain.token_constraints"]], "true_value (merlin_standard_lib.proto.schema_bp.booldomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.BoolDomain.true_value"]], "type (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.type"]], "type (merlin_standard_lib.proto.schema_bp.sparsefeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeature.type"]], "uint_value (merlin_standard_lib.proto.schema_bp.tensorrepresentationdefaultvalue attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationDefaultValue.uint_value"]], "uniform_row_length (merlin_standard_lib.proto.schema_bp.tensorrepresentationraggedtensorpartition attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationRaggedTensorPartition.uniform_row_length"]], "unique_constraints (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.unique_constraints"]], "url_domain (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.url_domain"]], "value (merlin_standard_lib.proto.schema_bp.stringdomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.StringDomain.value"]], "value_column_name (merlin_standard_lib.proto.schema_bp.tensorrepresentationsparsetensor attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentationSparseTensor.value_column_name"]], "value_count (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.value_count"]], "value_count (merlin_standard_lib.proto.schema_bp.valuecountlist attribute)": [[18, "merlin_standard_lib.proto.schema_bp.ValueCountList.value_count"]], "value_counts (merlin_standard_lib.proto.schema_bp.feature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.Feature.value_counts"]], "value_feature (merlin_standard_lib.proto.schema_bp.sparsefeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.SparseFeature.value_feature"]], "varlen_sparse_tensor (merlin_standard_lib.proto.schema_bp.tensorrepresentation attribute)": [[18, "merlin_standard_lib.proto.schema_bp.TensorRepresentation.varlen_sparse_tensor"]], "vocabulary (merlin_standard_lib.proto.schema_bp.naturallanguagedomain attribute)": [[18, "merlin_standard_lib.proto.schema_bp.NaturalLanguageDomain.vocabulary"]], "weight_feature (merlin_standard_lib.proto.schema_bp.weightedfeature attribute)": [[18, "merlin_standard_lib.proto.schema_bp.WeightedFeature.weight_feature"]], "columnschema (class in merlin_standard_lib.schema.schema)": [[19, "merlin_standard_lib.schema.schema.ColumnSchema"]], "schema (class in merlin_standard_lib.schema.schema)": [[19, "merlin_standard_lib.schema.schema.Schema"]], "tag (in module merlin_standard_lib.schema.tag)": [[19, "merlin_standard_lib.schema.tag.Tag"]], "add() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.add"]], "apply() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.apply"]], "apply_inverse() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.apply_inverse"]], "categorical_cardinalities() (in module merlin_standard_lib.schema.schema)": [[19, "merlin_standard_lib.schema.schema.categorical_cardinalities"]], "column_names (merlin_standard_lib.schema.schema.schema property)": [[19, "merlin_standard_lib.schema.schema.Schema.column_names"]], "column_schemas (merlin_standard_lib.schema.schema.schema property)": [[19, "merlin_standard_lib.schema.schema.Schema.column_schemas"]], "copy() (merlin_standard_lib.schema.schema.columnschema method)": [[19, "merlin_standard_lib.schema.schema.ColumnSchema.copy"]], "copy() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.copy"]], "create() (merlin_standard_lib.schema.schema.schema class method)": [[19, "merlin_standard_lib.schema.schema.Schema.create"]], "create_categorical() (merlin_standard_lib.schema.schema.columnschema class method)": [[19, "merlin_standard_lib.schema.schema.ColumnSchema.create_categorical"]], "create_continuous() (merlin_standard_lib.schema.schema.columnschema class method)": [[19, "merlin_standard_lib.schema.schema.ColumnSchema.create_continuous"]], "feature (merlin_standard_lib.schema.schema.schema attribute)": [[19, "merlin_standard_lib.schema.schema.Schema.feature"]], "filter_column_schemas() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.filter_column_schemas"]], "filter_columns_from_dict() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.filter_columns_from_dict"]], "from_json() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.from_json"]], "from_proto_text() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.from_proto_text"]], "item_id_column_name (merlin_standard_lib.schema.schema.schema property)": [[19, "merlin_standard_lib.schema.schema.Schema.item_id_column_name"]], "map_column_schemas() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.map_column_schemas"]], "merlin_standard_lib.schema": [[19, "module-merlin_standard_lib.schema"]], "merlin_standard_lib.schema.schema": [[19, "module-merlin_standard_lib.schema.schema"]], "merlin_standard_lib.schema.tag": [[19, "module-merlin_standard_lib.schema.tag"]], "properties (merlin_standard_lib.schema.schema.columnschema property)": [[19, "merlin_standard_lib.schema.schema.ColumnSchema.properties"]], "remove_by_name() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.remove_by_name"]], "remove_by_tag() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.remove_by_tag"]], "remove_by_type() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.remove_by_type"]], "select_by_name() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.select_by_name"]], "select_by_tag() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.select_by_tag"]], "select_by_type() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.select_by_type"]], "tags (merlin_standard_lib.schema.schema.columnschema property)": [[19, "merlin_standard_lib.schema.schema.ColumnSchema.tags"]], "to_proto_text() (merlin_standard_lib.schema.schema.columnschema method)": [[19, "merlin_standard_lib.schema.schema.ColumnSchema.to_proto_text"]], "to_proto_text() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.to_proto_text"]], "with_name() (merlin_standard_lib.schema.schema.columnschema method)": [[19, "merlin_standard_lib.schema.schema.ColumnSchema.with_name"]], "with_properties() (merlin_standard_lib.schema.schema.columnschema method)": [[19, "merlin_standard_lib.schema.schema.ColumnSchema.with_properties"]], "with_tags() (merlin_standard_lib.schema.schema.columnschema method)": [[19, "merlin_standard_lib.schema.schema.ColumnSchema.with_tags"]], "with_tags_based_on_properties() (merlin_standard_lib.schema.schema.columnschema method)": [[19, "merlin_standard_lib.schema.schema.ColumnSchema.with_tags_based_on_properties"]], "with_tags_based_on_properties() (merlin_standard_lib.schema.schema.schema method)": [[19, "merlin_standard_lib.schema.schema.Schema.with_tags_based_on_properties"]], "get_embedding_size_from_cardinality() (in module merlin_standard_lib.utils.embedding_utils)": [[20, "merlin_standard_lib.utils.embedding_utils.get_embedding_size_from_cardinality"]], "get_embedding_sizes_from_schema() (in module merlin_standard_lib.utils.embedding_utils)": [[20, "merlin_standard_lib.utils.embedding_utils.get_embedding_sizes_from_schema"]], "merlin_standard_lib.utils": [[20, "module-merlin_standard_lib.utils"]], "merlin_standard_lib.utils.embedding_utils": [[20, "module-merlin_standard_lib.utils.embedding_utils"]], "transformers4rec": [[22, "module-transformers4rec"]], "transformers4rec.types": [[22, "module-transformers4rec.types"]], "albertconfig (class in transformers4rec.config.transformer)": [[23, "transformers4rec.config.transformer.AlbertConfig"]], "bertconfig (class in transformers4rec.config.transformer)": [[23, "transformers4rec.config.transformer.BertConfig"]], "electraconfig (class in transformers4rec.config.transformer)": [[23, "transformers4rec.config.transformer.ElectraConfig"]], "gpt2config (class in transformers4rec.config.transformer)": [[23, "transformers4rec.config.transformer.GPT2Config"]], "longformerconfig (class in transformers4rec.config.transformer)": [[23, "transformers4rec.config.transformer.LongformerConfig"]], "requires_schema (transformers4rec.config.schema.schemamixin attribute)": [[23, "transformers4rec.config.schema.SchemaMixin.REQUIRES_SCHEMA"]], "reformerconfig (class in transformers4rec.config.transformer)": [[23, "transformers4rec.config.transformer.ReformerConfig"]], "robertaconfig (class in transformers4rec.config.transformer)": [[23, "transformers4rec.config.transformer.RobertaConfig"]], "schemamixin (class in transformers4rec.config.schema)": [[23, "transformers4rec.config.schema.SchemaMixin"]], "t4recconfig (class in transformers4rec.config.transformer)": [[23, "transformers4rec.config.transformer.T4RecConfig"]], "t4rectrainingarguments (class in transformers4rec.config.trainer)": [[23, "transformers4rec.config.trainer.T4RecTrainingArguments"]], "t4rectrainingargumentstf (class in transformers4rec.config.trainer)": [[23, "transformers4rec.config.trainer.T4RecTrainingArgumentsTF"]], "transfoxlconfig (class in transformers4rec.config.transformer)": [[23, "transformers4rec.config.transformer.TransfoXLConfig"]], "xlnetconfig (class in transformers4rec.config.transformer)": [[23, "transformers4rec.config.transformer.XLNetConfig"]], "build() (transformers4rec.config.transformer.albertconfig class method)": [[23, "transformers4rec.config.transformer.AlbertConfig.build"]], "build() (transformers4rec.config.transformer.bertconfig class method)": [[23, "transformers4rec.config.transformer.BertConfig.build"]], "build() (transformers4rec.config.transformer.electraconfig class method)": [[23, "transformers4rec.config.transformer.ElectraConfig.build"]], "build() (transformers4rec.config.transformer.gpt2config class method)": [[23, "transformers4rec.config.transformer.GPT2Config.build"]], "build() (transformers4rec.config.transformer.longformerconfig class method)": [[23, "transformers4rec.config.transformer.LongformerConfig.build"]], "build() (transformers4rec.config.transformer.reformerconfig class method)": [[23, "transformers4rec.config.transformer.ReformerConfig.build"]], "build() (transformers4rec.config.transformer.robertaconfig class method)": [[23, "transformers4rec.config.transformer.RobertaConfig.build"]], "build() (transformers4rec.config.transformer.t4recconfig class method)": [[23, "transformers4rec.config.transformer.T4RecConfig.build"]], "build() (transformers4rec.config.transformer.transfoxlconfig class method)": [[23, "transformers4rec.config.transformer.TransfoXLConfig.build"]], "build() (transformers4rec.config.transformer.xlnetconfig class method)": [[23, "transformers4rec.config.transformer.XLNetConfig.build"]], "check_schema() (transformers4rec.config.schema.schemamixin method)": [[23, "transformers4rec.config.schema.SchemaMixin.check_schema"]], "compute_metrics_each_n_steps (transformers4rec.config.trainer.t4rectrainingarguments attribute)": [[23, "transformers4rec.config.trainer.T4RecTrainingArguments.compute_metrics_each_n_steps"]], "data_loader_engine (transformers4rec.config.trainer.t4rectrainingarguments attribute)": [[23, "transformers4rec.config.trainer.T4RecTrainingArguments.data_loader_engine"]], "eval_on_test_set (transformers4rec.config.trainer.t4rectrainingarguments attribute)": [[23, "transformers4rec.config.trainer.T4RecTrainingArguments.eval_on_test_set"]], "eval_steps_on_train_set (transformers4rec.config.trainer.t4rectrainingarguments attribute)": [[23, "transformers4rec.config.trainer.T4RecTrainingArguments.eval_steps_on_train_set"]], "experiments_group (transformers4rec.config.trainer.t4rectrainingarguments attribute)": [[23, "transformers4rec.config.trainer.T4RecTrainingArguments.experiments_group"]], "get_item_ids_from_inputs() (transformers4rec.config.schema.schemamixin method)": [[23, "transformers4rec.config.schema.SchemaMixin.get_item_ids_from_inputs"]], "get_padding_mask_from_item_id() (transformers4rec.config.schema.schemamixin method)": [[23, "transformers4rec.config.schema.SchemaMixin.get_padding_mask_from_item_id"]], "learning_rate_num_cosine_cycles_by_epoch (transformers4rec.config.trainer.t4rectrainingarguments attribute)": [[23, "transformers4rec.config.trainer.T4RecTrainingArguments.learning_rate_num_cosine_cycles_by_epoch"]], "log_predictions (transformers4rec.config.trainer.t4rectrainingarguments attribute)": [[23, "transformers4rec.config.trainer.T4RecTrainingArguments.log_predictions"]], "max_sequence_length (transformers4rec.config.trainer.t4rectrainingarguments attribute)": [[23, "transformers4rec.config.trainer.T4RecTrainingArguments.max_sequence_length"]], "output_dir (transformers4rec.config.trainer.t4rectrainingargumentstf attribute)": [[23, "transformers4rec.config.trainer.T4RecTrainingArgumentsTF.output_dir"]], "place_model_on_device (transformers4rec.config.trainer.t4rectrainingarguments property)": [[23, "transformers4rec.config.trainer.T4RecTrainingArguments.place_model_on_device"]], "predict_top_k (transformers4rec.config.trainer.t4rectrainingarguments attribute)": [[23, "transformers4rec.config.trainer.T4RecTrainingArguments.predict_top_k"]], "requires_schema() (in module transformers4rec.config.schema)": [[23, "transformers4rec.config.schema.requires_schema"]], "schema (transformers4rec.config.schema.schemamixin property)": [[23, "transformers4rec.config.schema.SchemaMixin.schema"]], "set_schema() (transformers4rec.config.schema.schemamixin method)": [[23, "transformers4rec.config.schema.SchemaMixin.set_schema"]], "shuffle_buffer_size (transformers4rec.config.trainer.t4rectrainingarguments attribute)": [[23, "transformers4rec.config.trainer.T4RecTrainingArguments.shuffle_buffer_size"]], "to_huggingface_torch_model() (transformers4rec.config.transformer.t4recconfig method)": [[23, "transformers4rec.config.transformer.T4RecConfig.to_huggingface_torch_model"]], "to_torch_model() (transformers4rec.config.transformer.t4recconfig method)": [[23, "transformers4rec.config.transformer.T4RecConfig.to_torch_model"]], "transformers4rec.config": [[23, "module-transformers4rec.config"]], "transformers4rec.config.schema": [[23, "module-transformers4rec.config.schema"]], "transformers4rec.config.trainer": [[23, "module-transformers4rec.config.trainer"]], "transformers4rec.config.transformer": [[23, "module-transformers4rec.config.transformer"]], "transformers_config_cls (transformers4rec.config.transformer.t4recconfig property)": [[23, "transformers4rec.config.transformer.T4RecConfig.transformers_config_cls"]], "albertconfig (class in transformers4rec.torch)": [[24, "transformers4rec.torch.AlbertConfig"]], "astabular (class in transformers4rec.torch)": [[24, "transformers4rec.torch.AsTabular"]], "avgprecisionat (class in transformers4rec.torch.ranking_metric)": [[24, "transformers4rec.torch.ranking_metric.AvgPrecisionAt"]], "binaryclassificationtask (class in transformers4rec.torch)": [[24, "transformers4rec.torch.BinaryClassificationTask"]], "block (class in transformers4rec.torch)": [[24, "transformers4rec.torch.Block"]], "blockbase (class in transformers4rec.torch)": [[24, "transformers4rec.torch.BlockBase"]], "continuous_module_class (transformers4rec.torch.tabularfeatures attribute)": [[24, "transformers4rec.torch.TabularFeatures.CONTINUOUS_MODULE_CLASS"]], "causallanguagemodeling (class in transformers4rec.torch.masking)": [[24, "transformers4rec.torch.masking.CausalLanguageModeling"]], "concatfeatures (class in transformers4rec.torch)": [[24, "transformers4rec.torch.ConcatFeatures"]], "continuousfeatures (class in transformers4rec.torch)": [[24, "transformers4rec.torch.ContinuousFeatures"]], "dcgat (class in transformers4rec.torch.ranking_metric)": [[24, "transformers4rec.torch.ranking_metric.DCGAt"]], "default_loss (transformers4rec.torch.binaryclassificationtask attribute)": [[24, "transformers4rec.torch.BinaryClassificationTask.DEFAULT_LOSS"]], "default_loss (transformers4rec.torch.regressiontask attribute)": [[24, "transformers4rec.torch.RegressionTask.DEFAULT_LOSS"]], "default_metrics (transformers4rec.torch.binaryclassificationtask attribute)": [[24, "transformers4rec.torch.BinaryClassificationTask.DEFAULT_METRICS"]], "default_metrics (transformers4rec.torch.nextitempredictiontask attribute)": [[24, "transformers4rec.torch.NextItemPredictionTask.DEFAULT_METRICS"]], "default_metrics (transformers4rec.torch.regressiontask attribute)": [[24, "transformers4rec.torch.RegressionTask.DEFAULT_METRICS"]], "datasetmock (class in transformers4rec.torch.trainer)": [[24, "transformers4rec.torch.trainer.DatasetMock"]], "embedding_module_class (transformers4rec.torch.tabularfeatures attribute)": [[24, "transformers4rec.torch.TabularFeatures.EMBEDDING_MODULE_CLASS"]], "embedding_module_class (transformers4rec.torch.tabularsequencefeatures attribute)": [[24, "transformers4rec.torch.TabularSequenceFeatures.EMBEDDING_MODULE_CLASS"]], "electraconfig (class in transformers4rec.torch)": [[24, "transformers4rec.torch.ElectraConfig"]], "elementwisesum (class in transformers4rec.torch)": [[24, "transformers4rec.torch.ElementwiseSum"]], "elementwisesumitemmulti (class in transformers4rec.torch)": [[24, "transformers4rec.torch.ElementwiseSumItemMulti"]], "embeddingfeatures (class in transformers4rec.torch)": [[24, "transformers4rec.torch.EmbeddingFeatures"]], "featureconfig (class in transformers4rec.torch)": [[24, "transformers4rec.torch.FeatureConfig"]], "filterfeatures (class in transformers4rec.torch)": [[24, "transformers4rec.torch.FilterFeatures"]], "gpt2config (class in transformers4rec.torch)": [[24, "transformers4rec.torch.GPT2Config"]], "head (class in transformers4rec.torch)": [[24, "transformers4rec.torch.Head"]], "incrementalloggingcallback (class in transformers4rec.torch.trainer)": [[24, "transformers4rec.torch.trainer.IncrementalLoggingCallback"]], "labelsmoothcrossentropyloss() (in module transformers4rec.torch)": [[24, "transformers4rec.torch.LabelSmoothCrossEntropyLoss"]], "longformerconfig (class in transformers4rec.torch)": [[24, "transformers4rec.torch.LongformerConfig"]], "mlpblock (class in transformers4rec.torch)": [[24, "transformers4rec.torch.MLPBlock"]], "masksequence (class in transformers4rec.torch.masking)": [[24, "transformers4rec.torch.masking.MaskSequence"]], "maskedlanguagemodeling (class in transformers4rec.torch.masking)": [[24, "transformers4rec.torch.masking.MaskedLanguageModeling"]], "maskinginfo (class in transformers4rec.torch.masking)": [[24, "transformers4rec.torch.masking.MaskingInfo"]], "meanreciprocalrankat (class in transformers4rec.torch.ranking_metric)": [[24, "transformers4rec.torch.ranking_metric.MeanReciprocalRankAt"]], "mergetabular (class in transformers4rec.torch)": [[24, "transformers4rec.torch.MergeTabular"]], "model (class in transformers4rec.torch)": [[24, "transformers4rec.torch.Model"]], "ndcgat (class in transformers4rec.torch.ranking_metric)": [[24, "transformers4rec.torch.ranking_metric.NDCGAt"]], "nextitempredictiontask (class in transformers4rec.torch)": [[24, "transformers4rec.torch.NextItemPredictionTask"]], "pretrained_embedding_module_class (transformers4rec.torch.tabularfeatures attribute)": [[24, "transformers4rec.torch.TabularFeatures.PRETRAINED_EMBEDDING_MODULE_CLASS"]], "permutationlanguagemodeling (class in transformers4rec.torch.masking)": [[24, "transformers4rec.torch.masking.PermutationLanguageModeling"]], "precisionat (class in transformers4rec.torch.ranking_metric)": [[24, "transformers4rec.torch.ranking_metric.PrecisionAt"]], "predictiontask (class in transformers4rec.torch)": [[24, "transformers4rec.torch.PredictionTask"]], "pretrainedembeddingfeatures (class in transformers4rec.torch)": [[24, "transformers4rec.torch.PretrainedEmbeddingFeatures"]], "pretrainedembeddingsinitializer (class in transformers4rec.torch)": [[24, "transformers4rec.torch.PretrainedEmbeddingsInitializer"]], "requires_schema (transformers4rec.torch.elementwisesumitemmulti attribute)": [[24, "transformers4rec.torch.ElementwiseSumItemMulti.REQUIRES_SCHEMA"]], "rankingmetric (class in transformers4rec.torch.ranking_metric)": [[24, "transformers4rec.torch.ranking_metric.RankingMetric"]], "recallat (class in transformers4rec.torch.ranking_metric)": [[24, "transformers4rec.torch.ranking_metric.RecallAt"]], "reformerconfig (class in transformers4rec.torch)": [[24, "transformers4rec.torch.ReformerConfig"]], "regressiontask (class in transformers4rec.torch)": [[24, "transformers4rec.torch.RegressionTask"]], "replacementlanguagemodeling (class in transformers4rec.torch.masking)": [[24, "transformers4rec.torch.masking.ReplacementLanguageModeling"]], "soft_embedding_module_class (transformers4rec.torch.tabularfeatures attribute)": [[24, "transformers4rec.torch.TabularFeatures.SOFT_EMBEDDING_MODULE_CLASS"]], "schema (class in transformers4rec.torch)": [[24, "transformers4rec.torch.Schema"]], "sequenceembeddingfeatures (class in transformers4rec.torch)": [[24, "transformers4rec.torch.SequenceEmbeddingFeatures"]], "sequentialblock (class in transformers4rec.torch)": [[24, "transformers4rec.torch.SequentialBlock"]], "sequentialtabulartransformations (class in transformers4rec.torch)": [[24, "transformers4rec.torch.SequentialTabularTransformations"]], "softembedding (class in transformers4rec.torch)": [[24, "transformers4rec.torch.SoftEmbedding"]], "softembeddingfeatures (class in transformers4rec.torch)": [[24, "transformers4rec.torch.SoftEmbeddingFeatures"]], "stackfeatures (class in transformers4rec.torch)": [[24, "transformers4rec.torch.StackFeatures"]], "stochasticswapnoise (class in transformers4rec.torch)": [[24, "transformers4rec.torch.StochasticSwapNoise"]], "t4recconfig (class in transformers4rec.torch)": [[24, "transformers4rec.torch.T4RecConfig"]], "t4rectrainingarguments (class in transformers4rec.torch)": [[24, "transformers4rec.torch.T4RecTrainingArguments"]], "transformer_to_prepare (transformers4rec.torch.transformerblock attribute)": [[24, "transformers4rec.torch.TransformerBlock.TRANSFORMER_TO_PREPARE"]], "tableconfig (class in transformers4rec.torch)": [[24, "transformers4rec.torch.TableConfig"]], "tabularaggregation (class in transformers4rec.torch)": [[24, "transformers4rec.torch.TabularAggregation"]], "tabularblock (class in transformers4rec.torch)": [[24, "transformers4rec.torch.TabularBlock"]], "tabulardropout (class in transformers4rec.torch)": [[24, "transformers4rec.torch.TabularDropout"]], "tabularfeatures (class in transformers4rec.torch)": [[24, "transformers4rec.torch.TabularFeatures"]], "tabularlayernorm (class in transformers4rec.torch)": [[24, "transformers4rec.torch.TabularLayerNorm"]], "tabularmodule (class in transformers4rec.torch)": [[24, "transformers4rec.torch.TabularModule"]], "tabularsequencefeatures (class in transformers4rec.torch)": [[24, "transformers4rec.torch.TabularSequenceFeatures"]], "tabulartransformation (class in transformers4rec.torch)": [[24, "transformers4rec.torch.TabularTransformation"]], "trainer (class in transformers4rec.torch)": [[24, "transformers4rec.torch.Trainer"]], "trainer (class in transformers4rec.torch.trainer)": [[24, "transformers4rec.torch.trainer.Trainer"]], "transfoxlconfig (class in transformers4rec.torch)": [[24, "transformers4rec.torch.TransfoXLConfig"]], "transformerblock (class in transformers4rec.torch)": [[24, "transformers4rec.torch.TransformerBlock"]], "xlnetconfig (class in transformers4rec.torch)": [[24, "transformers4rec.torch.XLNetConfig"]], "add() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.add"]], "add_module() (transformers4rec.torch.sequentialblock method)": [[24, "transformers4rec.torch.SequentialBlock.add_module"]], "add_module_and_maybe_build() (transformers4rec.torch.sequentialblock method)": [[24, "transformers4rec.torch.SequentialBlock.add_module_and_maybe_build"]], "aggregation (transformers4rec.torch.tabularmodule property)": [[24, "transformers4rec.torch.TabularModule.aggregation"]], "append() (transformers4rec.torch.sequentialtabulartransformations method)": [[24, "transformers4rec.torch.SequentialTabularTransformations.append"]], "apply() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.apply"]], "apply_inverse() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.apply_inverse"]], "apply_mask_to_inputs() (transformers4rec.torch.masking.causallanguagemodeling method)": [[24, "transformers4rec.torch.masking.CausalLanguageModeling.apply_mask_to_inputs"]], "apply_mask_to_inputs() (transformers4rec.torch.masking.masksequence method)": [[24, "transformers4rec.torch.masking.MaskSequence.apply_mask_to_inputs"]], "apply_mask_to_inputs() (transformers4rec.torch.masking.maskedlanguagemodeling method)": [[24, "transformers4rec.torch.masking.MaskedLanguageModeling.apply_mask_to_inputs"]], "as_tabular() (transformers4rec.torch.blockbase method)": [[24, "transformers4rec.torch.BlockBase.as_tabular"]], "as_tabular() (transformers4rec.torch.sequentialblock method)": [[24, "transformers4rec.torch.SequentialBlock.as_tabular"]], "augment() (transformers4rec.torch.stochasticswapnoise method)": [[24, "transformers4rec.torch.StochasticSwapNoise.augment"]], "build() (transformers4rec.torch.albertconfig class method)": [[24, "transformers4rec.torch.AlbertConfig.build"]], "build() (transformers4rec.torch.electraconfig class method)": [[24, "transformers4rec.torch.ElectraConfig.build"]], "build() (transformers4rec.torch.gpt2config class method)": [[24, "transformers4rec.torch.GPT2Config.build"]], "build() (transformers4rec.torch.head method)": [[24, "transformers4rec.torch.Head.build"]], "build() (transformers4rec.torch.longformerconfig class method)": [[24, "transformers4rec.torch.LongformerConfig.build"]], "build() (transformers4rec.torch.mlpblock method)": [[24, "transformers4rec.torch.MLPBlock.build"]], "build() (transformers4rec.torch.mergetabular method)": [[24, "transformers4rec.torch.MergeTabular.build"]], "build() (transformers4rec.torch.nextitempredictiontask method)": [[24, "transformers4rec.torch.NextItemPredictionTask.build"]], "build() (transformers4rec.torch.predictiontask method)": [[24, "transformers4rec.torch.PredictionTask.build"]], "build() (transformers4rec.torch.pretrainedembeddingfeatures method)": [[24, "transformers4rec.torch.PretrainedEmbeddingFeatures.build"]], "build() (transformers4rec.torch.reformerconfig class method)": [[24, "transformers4rec.torch.ReformerConfig.build"]], "build() (transformers4rec.torch.sequentialblock method)": [[24, "transformers4rec.torch.SequentialBlock.build"]], "build() (transformers4rec.torch.t4recconfig class method)": [[24, "transformers4rec.torch.T4RecConfig.build"]], "build() (transformers4rec.torch.tabularblock method)": [[24, "transformers4rec.torch.TabularBlock.build"]], "build() (transformers4rec.torch.tabularlayernorm method)": [[24, "transformers4rec.torch.TabularLayerNorm.build"]], "build() (transformers4rec.torch.transfoxlconfig class method)": [[24, "transformers4rec.torch.TransfoXLConfig.build"]], "build() (transformers4rec.torch.xlnetconfig class method)": [[24, "transformers4rec.torch.XLNetConfig.build"]], "build_blocks() (in module transformers4rec.torch)": [[24, "transformers4rec.torch.build_blocks"]], "calculate_metrics() (transformers4rec.torch.head method)": [[24, "transformers4rec.torch.Head.calculate_metrics"]], "calculate_metrics() (transformers4rec.torch.model method)": [[24, "transformers4rec.torch.Model.calculate_metrics"]], "calculate_metrics() (transformers4rec.torch.nextitempredictiontask method)": [[24, "transformers4rec.torch.NextItemPredictionTask.calculate_metrics"]], "calculate_metrics() (transformers4rec.torch.predictiontask method)": [[24, "transformers4rec.torch.PredictionTask.calculate_metrics"]], "categorical_module (transformers4rec.torch.tabularfeatures property)": [[24, "transformers4rec.torch.TabularFeatures.categorical_module"]], "child_name() (transformers4rec.torch.predictiontask method)": [[24, "transformers4rec.torch.PredictionTask.child_name"]], "column_names (transformers4rec.torch.schema property)": [[24, "transformers4rec.torch.Schema.column_names"]], "column_schemas (transformers4rec.torch.schema property)": [[24, "transformers4rec.torch.Schema.column_schemas"]], "combiner (transformers4rec.torch.tableconfig attribute)": [[24, "transformers4rec.torch.TableConfig.combiner"]], "compute() (transformers4rec.torch.ranking_metric.rankingmetric method)": [[24, "transformers4rec.torch.ranking_metric.RankingMetric.compute"]], "compute_loss() (transformers4rec.torch.trainer method)": [[24, "transformers4rec.torch.Trainer.compute_loss"]], "compute_loss() (transformers4rec.torch.trainer.trainer method)": [[24, "transformers4rec.torch.trainer.Trainer.compute_loss"]], "compute_masked_targets() (transformers4rec.torch.masking.masksequence method)": [[24, "transformers4rec.torch.masking.MaskSequence.compute_masked_targets"]], "compute_masked_targets() (transformers4rec.torch.masking.permutationlanguagemodeling method)": [[24, "transformers4rec.torch.masking.PermutationLanguageModeling.compute_masked_targets"]], "compute_metrics() (transformers4rec.torch.head method)": [[24, "transformers4rec.torch.Head.compute_metrics"]], "compute_metrics() (transformers4rec.torch.model method)": [[24, "transformers4rec.torch.Model.compute_metrics"]], "compute_metrics() (transformers4rec.torch.nextitempredictiontask method)": [[24, "transformers4rec.torch.NextItemPredictionTask.compute_metrics"]], "compute_metrics() (transformers4rec.torch.predictiontask method)": [[24, "transformers4rec.torch.PredictionTask.compute_metrics"]], "compute_metrics_each_n_steps (transformers4rec.torch.t4rectrainingarguments attribute)": [[24, "transformers4rec.torch.T4RecTrainingArguments.compute_metrics_each_n_steps"]], "continuous_module (transformers4rec.torch.tabularfeatures property)": [[24, "transformers4rec.torch.TabularFeatures.continuous_module"]], "copy() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.copy"]], "create() (transformers4rec.torch.schema class method)": [[24, "transformers4rec.torch.Schema.create"]], "create_scheduler() (transformers4rec.torch.trainer method)": [[24, "transformers4rec.torch.Trainer.create_scheduler"]], "create_scheduler() (transformers4rec.torch.trainer.trainer method)": [[24, "transformers4rec.torch.trainer.Trainer.create_scheduler"]], "data_loader_engine (transformers4rec.torch.t4rectrainingarguments attribute)": [[24, "transformers4rec.torch.T4RecTrainingArguments.data_loader_engine"]], "dim (transformers4rec.torch.tableconfig attribute)": [[24, "transformers4rec.torch.TableConfig.dim"]], "eval_on_test_set (transformers4rec.torch.t4rectrainingarguments attribute)": [[24, "transformers4rec.torch.T4RecTrainingArguments.eval_on_test_set"]], "eval_steps_on_train_set (transformers4rec.torch.t4rectrainingarguments attribute)": [[24, "transformers4rec.torch.T4RecTrainingArguments.eval_steps_on_train_set"]], "evaluate() (transformers4rec.torch.model method)": [[24, "transformers4rec.torch.Model.evaluate"]], "evaluation_loop() (transformers4rec.torch.trainer method)": [[24, "transformers4rec.torch.Trainer.evaluation_loop"]], "evaluation_loop() (transformers4rec.torch.trainer.trainer method)": [[24, "transformers4rec.torch.trainer.Trainer.evaluation_loop"]], "experiments_group (transformers4rec.torch.t4rectrainingarguments attribute)": [[24, "transformers4rec.torch.T4RecTrainingArguments.experiments_group"]], "feature (transformers4rec.torch.schema attribute)": [[24, "transformers4rec.torch.Schema.feature"]], "filter_column_schemas() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.filter_column_schemas"]], "filter_columns_from_dict() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.filter_columns_from_dict"]], "fit() (transformers4rec.torch.model method)": [[24, "transformers4rec.torch.Model.fit"]], "forward() (transformers4rec.torch.astabular method)": [[24, "transformers4rec.torch.AsTabular.forward"]], "forward() (transformers4rec.torch.block method)": [[24, "transformers4rec.torch.Block.forward"]], "forward() (transformers4rec.torch.concatfeatures method)": [[24, "transformers4rec.torch.ConcatFeatures.forward"]], "forward() (transformers4rec.torch.continuousfeatures method)": [[24, "transformers4rec.torch.ContinuousFeatures.forward"]], "forward() (transformers4rec.torch.elementwisesum method)": [[24, "transformers4rec.torch.ElementwiseSum.forward"]], "forward() (transformers4rec.torch.elementwisesumitemmulti method)": [[24, "transformers4rec.torch.ElementwiseSumItemMulti.forward"]], "forward() (transformers4rec.torch.embeddingfeatures method)": [[24, "transformers4rec.torch.EmbeddingFeatures.forward"]], "forward() (transformers4rec.torch.filterfeatures method)": [[24, "transformers4rec.torch.FilterFeatures.forward"]], "forward() (transformers4rec.torch.head method)": [[24, "transformers4rec.torch.Head.forward"]], "forward() (transformers4rec.torch.mergetabular method)": [[24, "transformers4rec.torch.MergeTabular.forward"]], "forward() (transformers4rec.torch.model method)": [[24, "transformers4rec.torch.Model.forward"]], "forward() (transformers4rec.torch.nextitempredictiontask method)": [[24, "transformers4rec.torch.NextItemPredictionTask.forward"]], "forward() (transformers4rec.torch.predictiontask method)": [[24, "transformers4rec.torch.PredictionTask.forward"]], "forward() (transformers4rec.torch.pretrainedembeddingfeatures method)": [[24, "transformers4rec.torch.PretrainedEmbeddingFeatures.forward"]], "forward() (transformers4rec.torch.pretrainedembeddingsinitializer method)": [[24, "transformers4rec.torch.PretrainedEmbeddingsInitializer.forward"]], "forward() (transformers4rec.torch.sequentialblock method)": [[24, "transformers4rec.torch.SequentialBlock.forward"]], "forward() (transformers4rec.torch.softembedding method)": [[24, "transformers4rec.torch.SoftEmbedding.forward"]], "forward() (transformers4rec.torch.stackfeatures method)": [[24, "transformers4rec.torch.StackFeatures.forward"]], "forward() (transformers4rec.torch.stochasticswapnoise method)": [[24, "transformers4rec.torch.StochasticSwapNoise.forward"]], "forward() (transformers4rec.torch.tabularaggregation method)": [[24, "transformers4rec.torch.TabularAggregation.forward"]], "forward() (transformers4rec.torch.tabulardropout method)": [[24, "transformers4rec.torch.TabularDropout.forward"]], "forward() (transformers4rec.torch.tabularlayernorm method)": [[24, "transformers4rec.torch.TabularLayerNorm.forward"]], "forward() (transformers4rec.torch.tabularmodule method)": [[24, "transformers4rec.torch.TabularModule.forward"]], "forward() (transformers4rec.torch.tabularsequencefeatures method)": [[24, "transformers4rec.torch.TabularSequenceFeatures.forward"]], "forward() (transformers4rec.torch.tabulartransformation method)": [[24, "transformers4rec.torch.TabularTransformation.forward"]], "forward() (transformers4rec.torch.transformerblock method)": [[24, "transformers4rec.torch.TransformerBlock.forward"]], "forward() (transformers4rec.torch.masking.masksequence method)": [[24, "transformers4rec.torch.masking.MaskSequence.forward"]], "forward_output_size() (transformers4rec.torch.astabular method)": [[24, "transformers4rec.torch.AsTabular.forward_output_size"]], "forward_output_size() (transformers4rec.torch.block method)": [[24, "transformers4rec.torch.Block.forward_output_size"]], "forward_output_size() (transformers4rec.torch.concatfeatures method)": [[24, "transformers4rec.torch.ConcatFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.continuousfeatures method)": [[24, "transformers4rec.torch.ContinuousFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.elementwisesum method)": [[24, "transformers4rec.torch.ElementwiseSum.forward_output_size"]], "forward_output_size() (transformers4rec.torch.elementwisesumitemmulti method)": [[24, "transformers4rec.torch.ElementwiseSumItemMulti.forward_output_size"]], "forward_output_size() (transformers4rec.torch.embeddingfeatures method)": [[24, "transformers4rec.torch.EmbeddingFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.filterfeatures method)": [[24, "transformers4rec.torch.FilterFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.mergetabular method)": [[24, "transformers4rec.torch.MergeTabular.forward_output_size"]], "forward_output_size() (transformers4rec.torch.pretrainedembeddingfeatures method)": [[24, "transformers4rec.torch.PretrainedEmbeddingFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.sequenceembeddingfeatures method)": [[24, "transformers4rec.torch.SequenceEmbeddingFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.sequentialblock method)": [[24, "transformers4rec.torch.SequentialBlock.forward_output_size"]], "forward_output_size() (transformers4rec.torch.stackfeatures method)": [[24, "transformers4rec.torch.StackFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.stochasticswapnoise method)": [[24, "transformers4rec.torch.StochasticSwapNoise.forward_output_size"]], "forward_output_size() (transformers4rec.torch.tabulardropout method)": [[24, "transformers4rec.torch.TabularDropout.forward_output_size"]], "forward_output_size() (transformers4rec.torch.tabularfeatures method)": [[24, "transformers4rec.torch.TabularFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.tabularlayernorm method)": [[24, "transformers4rec.torch.TabularLayerNorm.forward_output_size"]], "forward_output_size() (transformers4rec.torch.tabularsequencefeatures method)": [[24, "transformers4rec.torch.TabularSequenceFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.transformerblock method)": [[24, "transformers4rec.torch.TransformerBlock.forward_output_size"]], "forward_output_size() (transformers4rec.torch.masking.masksequence method)": [[24, "transformers4rec.torch.masking.MaskSequence.forward_output_size"]], "from_feature_config() (transformers4rec.torch.tabularlayernorm class method)": [[24, "transformers4rec.torch.TabularLayerNorm.from_feature_config"]], "from_features() (transformers4rec.torch.continuousfeatures class method)": [[24, "transformers4rec.torch.ContinuousFeatures.from_features"]], "from_features() (transformers4rec.torch.tabularmodule class method)": [[24, "transformers4rec.torch.TabularModule.from_features"]], "from_json() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.from_json"]], "from_proto_text() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.from_proto_text"]], "from_registry() (transformers4rec.torch.transformerblock class method)": [[24, "transformers4rec.torch.TransformerBlock.from_registry"]], "from_schema() (transformers4rec.torch.embeddingfeatures class method)": [[24, "transformers4rec.torch.EmbeddingFeatures.from_schema"]], "from_schema() (transformers4rec.torch.head class method)": [[24, "transformers4rec.torch.Head.from_schema"]], "from_schema() (transformers4rec.torch.pretrainedembeddingfeatures class method)": [[24, "transformers4rec.torch.PretrainedEmbeddingFeatures.from_schema"]], "from_schema() (transformers4rec.torch.softembeddingfeatures class method)": [[24, "transformers4rec.torch.SoftEmbeddingFeatures.from_schema"]], "from_schema() (transformers4rec.torch.tabularfeatures class method)": [[24, "transformers4rec.torch.TabularFeatures.from_schema"]], "from_schema() (transformers4rec.torch.tabularmodule class method)": [[24, "transformers4rec.torch.TabularModule.from_schema"]], "from_schema() (transformers4rec.torch.tabularsequencefeatures class method)": [[24, "transformers4rec.torch.TabularSequenceFeatures.from_schema"]], "get_children_by_class_name() (transformers4rec.torch.sequentialblock static method)": [[24, "transformers4rec.torch.SequentialBlock.get_children_by_class_name"]], "get_eval_dataloader() (transformers4rec.torch.trainer method)": [[24, "transformers4rec.torch.Trainer.get_eval_dataloader"]], "get_eval_dataloader() (transformers4rec.torch.trainer.trainer method)": [[24, "transformers4rec.torch.trainer.Trainer.get_eval_dataloader"]], "get_fake_tokens() (transformers4rec.torch.masking.replacementlanguagemodeling method)": [[24, "transformers4rec.torch.masking.ReplacementLanguageModeling.get_fake_tokens"]], "get_scheduler() (transformers4rec.torch.trainer static method)": [[24, "transformers4rec.torch.Trainer.get_scheduler"]], "get_scheduler() (transformers4rec.torch.trainer.trainer static method)": [[24, "transformers4rec.torch.trainer.Trainer.get_scheduler"]], "get_test_dataloader() (transformers4rec.torch.trainer method)": [[24, "transformers4rec.torch.Trainer.get_test_dataloader"]], "get_test_dataloader() (transformers4rec.torch.trainer.trainer method)": [[24, "transformers4rec.torch.trainer.Trainer.get_test_dataloader"]], "get_train_dataloader() (transformers4rec.torch.trainer method)": [[24, "transformers4rec.torch.Trainer.get_train_dataloader"]], "get_train_dataloader() (transformers4rec.torch.trainer.trainer method)": [[24, "transformers4rec.torch.trainer.Trainer.get_train_dataloader"]], "initializer (transformers4rec.torch.tableconfig attribute)": [[24, "transformers4rec.torch.TableConfig.initializer"]], "input_schema (transformers4rec.torch.model property)": [[24, "transformers4rec.torch.Model.input_schema"]], "inputs (transformers4rec.torch.sequentialblock property)": [[24, "transformers4rec.torch.SequentialBlock.inputs"]], "item_embedding_table (transformers4rec.torch.embeddingfeatures property)": [[24, "transformers4rec.torch.EmbeddingFeatures.item_embedding_table"]], "item_embedding_table (transformers4rec.torch.tabularsequencefeatures property)": [[24, "transformers4rec.torch.TabularSequenceFeatures.item_embedding_table"]], "item_id (transformers4rec.torch.tabularsequencefeatures property)": [[24, "transformers4rec.torch.TabularSequenceFeatures.item_id"]], "item_id_column_name (transformers4rec.torch.schema property)": [[24, "transformers4rec.torch.Schema.item_id_column_name"]], "item_ids() (transformers4rec.torch.embeddingfeatures method)": [[24, "transformers4rec.torch.EmbeddingFeatures.item_ids"]], "learning_rate_num_cosine_cycles_by_epoch (transformers4rec.torch.t4rectrainingarguments attribute)": [[24, "transformers4rec.torch.T4RecTrainingArguments.learning_rate_num_cosine_cycles_by_epoch"]], "load() (transformers4rec.torch.model class method)": [[24, "transformers4rec.torch.Model.load"]], "load_model_trainer_states_from_checkpoint() (transformers4rec.torch.trainer method)": [[24, "transformers4rec.torch.Trainer.load_model_trainer_states_from_checkpoint"]], "load_model_trainer_states_from_checkpoint() (transformers4rec.torch.trainer.trainer method)": [[24, "transformers4rec.torch.trainer.Trainer.load_model_trainer_states_from_checkpoint"]], "log() (transformers4rec.torch.trainer method)": [[24, "transformers4rec.torch.Trainer.log"]], "log() (transformers4rec.torch.trainer.trainer method)": [[24, "transformers4rec.torch.trainer.Trainer.log"]], "log_predictions (transformers4rec.torch.t4rectrainingarguments attribute)": [[24, "transformers4rec.torch.T4RecTrainingArguments.log_predictions"]], "log_predictions_callback (transformers4rec.torch.trainer property)": [[24, "transformers4rec.torch.Trainer.log_predictions_callback"]], "log_predictions_callback (transformers4rec.torch.trainer.trainer property)": [[24, "transformers4rec.torch.trainer.Trainer.log_predictions_callback"]], "map_column_schemas() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.map_column_schemas"]], "masking (transformers4rec.torch.tabularsequencefeatures property)": [[24, "transformers4rec.torch.TabularSequenceFeatures.masking"]], "max_sequence_length (transformers4rec.torch.featureconfig attribute)": [[24, "transformers4rec.torch.FeatureConfig.max_sequence_length"]], "max_sequence_length (transformers4rec.torch.t4rectrainingarguments attribute)": [[24, "transformers4rec.torch.T4RecTrainingArguments.max_sequence_length"]], "merge() (transformers4rec.torch.tabularmodule method)": [[24, "transformers4rec.torch.TabularModule.merge"]], "merge_values (transformers4rec.torch.mergetabular property)": [[24, "transformers4rec.torch.MergeTabular.merge_values"]], "metric_name() (transformers4rec.torch.predictiontask method)": [[24, "transformers4rec.torch.PredictionTask.metric_name"]], "name (transformers4rec.torch.featureconfig attribute)": [[24, "transformers4rec.torch.FeatureConfig.name"]], "name (transformers4rec.torch.tableconfig attribute)": [[24, "transformers4rec.torch.TableConfig.name"]], "num_examples() (transformers4rec.torch.trainer method)": [[24, "transformers4rec.torch.Trainer.num_examples"]], "num_examples() (transformers4rec.torch.trainer.trainer method)": [[24, "transformers4rec.torch.trainer.Trainer.num_examples"]], "on_epoch_end() (transformers4rec.torch.trainer.incrementalloggingcallback method)": [[24, "transformers4rec.torch.trainer.IncrementalLoggingCallback.on_epoch_end"]], "on_train_begin() (transformers4rec.torch.trainer.incrementalloggingcallback method)": [[24, "transformers4rec.torch.trainer.IncrementalLoggingCallback.on_train_begin"]], "on_train_end() (transformers4rec.torch.trainer.incrementalloggingcallback method)": [[24, "transformers4rec.torch.trainer.IncrementalLoggingCallback.on_train_end"]], "output_dir (transformers4rec.torch.t4rectrainingarguments attribute)": [[24, "transformers4rec.torch.T4RecTrainingArguments.output_dir"]], "output_schema (transformers4rec.torch.model property)": [[24, "transformers4rec.torch.Model.output_schema"]], "output_size() (transformers4rec.torch.tabularblock method)": [[24, "transformers4rec.torch.TabularBlock.output_size"]], "parse() (transformers4rec.torch.tabularaggregation class method)": [[24, "transformers4rec.torch.TabularAggregation.parse"]], "parse() (transformers4rec.torch.tabulartransformation class method)": [[24, "transformers4rec.torch.TabularTransformation.parse"]], "parse_combiner() (transformers4rec.torch.pretrainedembeddingfeatures method)": [[24, "transformers4rec.torch.PretrainedEmbeddingFeatures.parse_combiner"]], "place_model_on_device (transformers4rec.torch.t4rectrainingarguments property)": [[24, "transformers4rec.torch.T4RecTrainingArguments.place_model_on_device"]], "pop_labels() (transformers4rec.torch.head method)": [[24, "transformers4rec.torch.Head.pop_labels"]], "post (transformers4rec.torch.tabularmodule property)": [[24, "transformers4rec.torch.TabularModule.post"]], "post_forward() (transformers4rec.torch.tabularmodule method)": [[24, "transformers4rec.torch.TabularModule.post_forward"]], "pre (transformers4rec.torch.tabularmodule property)": [[24, "transformers4rec.torch.TabularModule.pre"]], "pre_forward() (transformers4rec.torch.tabularmodule method)": [[24, "transformers4rec.torch.TabularModule.pre_forward"]], "predict_all() (transformers4rec.torch.masking.masksequence method)": [[24, "transformers4rec.torch.masking.MaskSequence.predict_all"]], "predict_top_k (transformers4rec.torch.t4rectrainingarguments attribute)": [[24, "transformers4rec.torch.T4RecTrainingArguments.predict_top_k"]], "prediction_step() (transformers4rec.torch.trainer method)": [[24, "transformers4rec.torch.Trainer.prediction_step"]], "prediction_step() (transformers4rec.torch.trainer.trainer method)": [[24, "transformers4rec.torch.trainer.Trainer.prediction_step"]], "prediction_tasks (transformers4rec.torch.model property)": [[24, "transformers4rec.torch.Model.prediction_tasks"]], "pretrained_module (transformers4rec.torch.tabularfeatures property)": [[24, "transformers4rec.torch.TabularFeatures.pretrained_module"]], "process_metrics() (in module transformers4rec.torch.trainer)": [[24, "transformers4rec.torch.trainer.process_metrics"]], "project_continuous_features() (transformers4rec.torch.tabularfeatures method)": [[24, "transformers4rec.torch.TabularFeatures.project_continuous_features"]], "project_continuous_features() (transformers4rec.torch.tabularsequencefeatures method)": [[24, "transformers4rec.torch.TabularSequenceFeatures.project_continuous_features"]], "remove_by_name() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.remove_by_name"]], "remove_by_tag() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.remove_by_tag"]], "remove_by_type() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.remove_by_type"]], "remove_pad_3d() (transformers4rec.torch.nextitempredictiontask method)": [[24, "transformers4rec.torch.NextItemPredictionTask.remove_pad_3d"]], "requires_schema() (in module transformers4rec.torch)": [[24, "transformers4rec.torch.requires_schema"]], "reset_lr_scheduler() (transformers4rec.torch.trainer method)": [[24, "transformers4rec.torch.Trainer.reset_lr_scheduler"]], "reset_lr_scheduler() (transformers4rec.torch.trainer.trainer method)": [[24, "transformers4rec.torch.trainer.Trainer.reset_lr_scheduler"]], "reset_metrics() (transformers4rec.torch.head method)": [[24, "transformers4rec.torch.Head.reset_metrics"]], "reset_metrics() (transformers4rec.torch.model method)": [[24, "transformers4rec.torch.Model.reset_metrics"]], "reset_metrics() (transformers4rec.torch.predictiontask method)": [[24, "transformers4rec.torch.PredictionTask.reset_metrics"]], "right_shift_block() (in module transformers4rec.torch)": [[24, "transformers4rec.torch.right_shift_block"]], "sample_from_softmax() (transformers4rec.torch.masking.replacementlanguagemodeling method)": [[24, "transformers4rec.torch.masking.ReplacementLanguageModeling.sample_from_softmax"]], "save() (transformers4rec.torch.model method)": [[24, "transformers4rec.torch.Model.save"]], "schema (transformers4rec.torch.masking.maskinginfo attribute)": [[24, "transformers4rec.torch.masking.MaskingInfo.schema"]], "select_by_name() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.select_by_name"]], "select_by_tag() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.select_by_tag"]], "select_by_type() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.select_by_type"]], "set_masking() (transformers4rec.torch.tabularsequencefeatures method)": [[24, "transformers4rec.torch.TabularSequenceFeatures.set_masking"]], "set_metrics() (transformers4rec.torch.predictiontask method)": [[24, "transformers4rec.torch.PredictionTask.set_metrics"]], "shuffle_buffer_size (transformers4rec.torch.t4rectrainingarguments attribute)": [[24, "transformers4rec.torch.T4RecTrainingArguments.shuffle_buffer_size"]], "table (transformers4rec.torch.featureconfig attribute)": [[24, "transformers4rec.torch.FeatureConfig.table"]], "table_to_embedding_module() (transformers4rec.torch.embeddingfeatures method)": [[24, "transformers4rec.torch.EmbeddingFeatures.table_to_embedding_module"]], "table_to_embedding_module() (transformers4rec.torch.sequenceembeddingfeatures method)": [[24, "transformers4rec.torch.SequenceEmbeddingFeatures.table_to_embedding_module"]], "table_to_embedding_module() (transformers4rec.torch.softembeddingfeatures method)": [[24, "transformers4rec.torch.SoftEmbeddingFeatures.table_to_embedding_module"]], "targets (transformers4rec.torch.masking.maskinginfo attribute)": [[24, "transformers4rec.torch.masking.MaskingInfo.targets"]], "task_blocks (transformers4rec.torch.head property)": [[24, "transformers4rec.torch.Head.task_blocks"]], "task_name (transformers4rec.torch.predictiontask property)": [[24, "transformers4rec.torch.PredictionTask.task_name"]], "to_head() (transformers4rec.torch.predictiontask method)": [[24, "transformers4rec.torch.PredictionTask.to_head"]], "to_huggingface_torch_model() (transformers4rec.torch.t4recconfig method)": [[24, "transformers4rec.torch.T4RecConfig.to_huggingface_torch_model"]], "to_lightning() (transformers4rec.torch.model method)": [[24, "transformers4rec.torch.Model.to_lightning"]], "to_model() (transformers4rec.torch.blockbase method)": [[24, "transformers4rec.torch.BlockBase.to_model"]], "to_model() (transformers4rec.torch.head method)": [[24, "transformers4rec.torch.Head.to_model"]], "to_model() (transformers4rec.torch.predictiontask method)": [[24, "transformers4rec.torch.PredictionTask.to_model"]], "to_module() (transformers4rec.torch.tabularblock method)": [[24, "transformers4rec.torch.TabularBlock.to_module"]], "to_proto_text() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.to_proto_text"]], "to_torch_model() (transformers4rec.torch.t4recconfig method)": [[24, "transformers4rec.torch.T4RecConfig.to_torch_model"]], "training (transformers4rec.torch.binaryclassificationtask attribute)": [[24, "transformers4rec.torch.BinaryClassificationTask.training"]], "training (transformers4rec.torch.head attribute)": [[24, "transformers4rec.torch.Head.training"]], "training (transformers4rec.torch.model attribute)": [[24, "transformers4rec.torch.Model.training"]], "training (transformers4rec.torch.nextitempredictiontask attribute)": [[24, "transformers4rec.torch.NextItemPredictionTask.training"]], "training (transformers4rec.torch.predictiontask attribute)": [[24, "transformers4rec.torch.PredictionTask.training"]], "training (transformers4rec.torch.pretrainedembeddingsinitializer attribute)": [[24, "transformers4rec.torch.PretrainedEmbeddingsInitializer.training"]], "training (transformers4rec.torch.regressiontask attribute)": [[24, "transformers4rec.torch.RegressionTask.training"]], "training (transformers4rec.torch.softembedding attribute)": [[24, "transformers4rec.torch.SoftEmbedding.training"]], "training (transformers4rec.torch.tabularmodule attribute)": [[24, "transformers4rec.torch.TabularModule.training"]], "transformer_arguments (transformers4rec.torch.masking.masksequence property)": [[24, "transformers4rec.torch.masking.MaskSequence.transformer_arguments"]], "transformer_optional_arguments() (transformers4rec.torch.masking.masksequence method)": [[24, "transformers4rec.torch.masking.MaskSequence.transformer_optional_arguments"]], "transformer_required_arguments() (transformers4rec.torch.masking.masksequence method)": [[24, "transformers4rec.torch.masking.MaskSequence.transformer_required_arguments"]], "transformer_required_arguments() (transformers4rec.torch.masking.permutationlanguagemodeling method)": [[24, "transformers4rec.torch.masking.PermutationLanguageModeling.transformer_required_arguments"]], "transformers4rec.torch": [[24, "module-transformers4rec.torch"]], "transformers4rec.torch.masking": [[24, "module-transformers4rec.torch.masking"]], "transformers4rec.torch.ranking_metric": [[24, "module-transformers4rec.torch.ranking_metric"]], "transformers4rec.torch.trainer": [[24, "module-transformers4rec.torch.trainer"]], "transformers4rec.torch.typing": [[24, "module-transformers4rec.torch.typing"]], "transformers_config_cls (transformers4rec.torch.t4recconfig property)": [[24, "transformers4rec.torch.T4RecConfig.transformers_config_cls"]], "update() (transformers4rec.torch.ranking_metric.rankingmetric method)": [[24, "transformers4rec.torch.ranking_metric.RankingMetric.update"]], "vocabulary_size (transformers4rec.torch.tableconfig attribute)": [[24, "transformers4rec.torch.TableConfig.vocabulary_size"]], "with_tags_based_on_properties() (transformers4rec.torch.schema method)": [[24, "transformers4rec.torch.Schema.with_tags_based_on_properties"]], "block (class in transformers4rec.torch.block.base)": [[25, "transformers4rec.torch.block.base.Block"]], "blockbase (class in transformers4rec.torch.block.base)": [[25, "transformers4rec.torch.block.base.BlockBase"]], "buildableblock (class in transformers4rec.torch.block.base)": [[25, "transformers4rec.torch.block.base.BuildableBlock"]], "denseblock (class in transformers4rec.torch.block.mlp)": [[25, "transformers4rec.torch.block.mlp.DenseBlock"]], "gpt2prepare (class in transformers4rec.torch.block.transformer)": [[25, "transformers4rec.torch.block.transformer.GPT2Prepare"]], "mlpblock (class in transformers4rec.torch.block.mlp)": [[25, "transformers4rec.torch.block.mlp.MLPBlock"]], "sequentialblock (class in transformers4rec.torch.block.base)": [[25, "transformers4rec.torch.block.base.SequentialBlock"]], "transformer_to_prepare (transformers4rec.torch.block.transformer.transformerblock attribute)": [[25, "transformers4rec.torch.block.transformer.TransformerBlock.TRANSFORMER_TO_PREPARE"]], "transformerblock (class in transformers4rec.torch.block.transformer)": [[25, "transformers4rec.torch.block.transformer.TransformerBlock"]], "transformerprepare (class in transformers4rec.torch.block.transformer)": [[25, "transformers4rec.torch.block.transformer.TransformerPrepare"]], "add_module() (transformers4rec.torch.block.base.sequentialblock method)": [[25, "transformers4rec.torch.block.base.SequentialBlock.add_module"]], "add_module_and_maybe_build() (transformers4rec.torch.block.base.sequentialblock method)": [[25, "transformers4rec.torch.block.base.SequentialBlock.add_module_and_maybe_build"]], "as_tabular() (transformers4rec.torch.block.base.blockbase method)": [[25, "transformers4rec.torch.block.base.BlockBase.as_tabular"]], "as_tabular() (transformers4rec.torch.block.base.sequentialblock method)": [[25, "transformers4rec.torch.block.base.SequentialBlock.as_tabular"]], "build() (transformers4rec.torch.block.base.buildableblock method)": [[25, "transformers4rec.torch.block.base.BuildableBlock.build"]], "build() (transformers4rec.torch.block.base.sequentialblock method)": [[25, "transformers4rec.torch.block.base.SequentialBlock.build"]], "build() (transformers4rec.torch.block.mlp.mlpblock method)": [[25, "transformers4rec.torch.block.mlp.MLPBlock.build"]], "build_blocks() (in module transformers4rec.torch.block.base)": [[25, "transformers4rec.torch.block.base.build_blocks"]], "forward() (transformers4rec.torch.block.base.block method)": [[25, "transformers4rec.torch.block.base.Block.forward"]], "forward() (transformers4rec.torch.block.base.sequentialblock method)": [[25, "transformers4rec.torch.block.base.SequentialBlock.forward"]], "forward() (transformers4rec.torch.block.transformer.gpt2prepare method)": [[25, "transformers4rec.torch.block.transformer.GPT2Prepare.forward"]], "forward() (transformers4rec.torch.block.transformer.transformerblock method)": [[25, "transformers4rec.torch.block.transformer.TransformerBlock.forward"]], "forward() (transformers4rec.torch.block.transformer.transformerprepare method)": [[25, "transformers4rec.torch.block.transformer.TransformerPrepare.forward"]], "forward_output_size() (transformers4rec.torch.block.base.block method)": [[25, "transformers4rec.torch.block.base.Block.forward_output_size"]], "forward_output_size() (transformers4rec.torch.block.base.sequentialblock method)": [[25, "transformers4rec.torch.block.base.SequentialBlock.forward_output_size"]], "forward_output_size() (transformers4rec.torch.block.mlp.denseblock method)": [[25, "transformers4rec.torch.block.mlp.DenseBlock.forward_output_size"]], "forward_output_size() (transformers4rec.torch.block.transformer.transformerblock method)": [[25, "transformers4rec.torch.block.transformer.TransformerBlock.forward_output_size"]], "from_registry() (transformers4rec.torch.block.transformer.transformerblock class method)": [[25, "transformers4rec.torch.block.transformer.TransformerBlock.from_registry"]], "get_children_by_class_name() (transformers4rec.torch.block.base.sequentialblock static method)": [[25, "transformers4rec.torch.block.base.SequentialBlock.get_children_by_class_name"]], "inputs (transformers4rec.torch.block.base.sequentialblock property)": [[25, "transformers4rec.torch.block.base.SequentialBlock.inputs"]], "prepare_module (transformers4rec.torch.block.transformer.transformerblock attribute)": [[25, "transformers4rec.torch.block.transformer.TransformerBlock.prepare_module"]], "right_shift_block() (in module transformers4rec.torch.block.base)": [[25, "transformers4rec.torch.block.base.right_shift_block"]], "to_model() (transformers4rec.torch.block.base.blockbase method)": [[25, "transformers4rec.torch.block.base.BlockBase.to_model"]], "to_module() (transformers4rec.torch.block.base.buildableblock method)": [[25, "transformers4rec.torch.block.base.BuildableBlock.to_module"]], "training (transformers4rec.torch.block.transformer.gpt2prepare attribute)": [[25, "transformers4rec.torch.block.transformer.GPT2Prepare.training"]], "training (transformers4rec.torch.block.transformer.transformerblock attribute)": [[25, "transformers4rec.torch.block.transformer.TransformerBlock.training"]], "training (transformers4rec.torch.block.transformer.transformerprepare attribute)": [[25, "transformers4rec.torch.block.transformer.TransformerPrepare.training"]], "transformer (transformers4rec.torch.block.transformer.transformerblock attribute)": [[25, "transformers4rec.torch.block.transformer.TransformerBlock.transformer"]], "transformers4rec.torch.block": [[25, "module-transformers4rec.torch.block"]], "transformers4rec.torch.block.base": [[25, "module-transformers4rec.torch.block.base"]], "transformers4rec.torch.block.mlp": [[25, "module-transformers4rec.torch.block.mlp"]], "transformers4rec.torch.block.transformer": [[25, "module-transformers4rec.torch.block.transformer"]], "continuous_module_class (transformers4rec.torch.features.tabular.tabularfeatures attribute)": [[26, "transformers4rec.torch.features.tabular.TabularFeatures.CONTINUOUS_MODULE_CLASS"]], "continuousfeatures (class in transformers4rec.torch.features.continuous)": [[26, "transformers4rec.torch.features.continuous.ContinuousFeatures"]], "embedding_module_class (transformers4rec.torch.features.sequence.tabularsequencefeatures attribute)": [[26, "transformers4rec.torch.features.sequence.TabularSequenceFeatures.EMBEDDING_MODULE_CLASS"]], "embedding_module_class (transformers4rec.torch.features.tabular.tabularfeatures attribute)": [[26, "transformers4rec.torch.features.tabular.TabularFeatures.EMBEDDING_MODULE_CLASS"]], "embeddingbagwrapper (class in transformers4rec.torch.features.embedding)": [[26, "transformers4rec.torch.features.embedding.EmbeddingBagWrapper"]], "embeddingfeatures (class in transformers4rec.torch.features.embedding)": [[26, "transformers4rec.torch.features.embedding.EmbeddingFeatures"]], "featureconfig (class in transformers4rec.torch.features.embedding)": [[26, "transformers4rec.torch.features.embedding.FeatureConfig"]], "inputblock (class in transformers4rec.torch.features.base)": [[26, "transformers4rec.torch.features.base.InputBlock"]], "pretrained_embedding_module_class (transformers4rec.torch.features.tabular.tabularfeatures attribute)": [[26, "transformers4rec.torch.features.tabular.TabularFeatures.PRETRAINED_EMBEDDING_MODULE_CLASS"]], "pretrainedembeddingfeatures (class in transformers4rec.torch.features.embedding)": [[26, "transformers4rec.torch.features.embedding.PretrainedEmbeddingFeatures"]], "pretrainedembeddingsinitializer (class in transformers4rec.torch.features.embedding)": [[26, "transformers4rec.torch.features.embedding.PretrainedEmbeddingsInitializer"]], "soft_embedding_module_class (transformers4rec.torch.features.tabular.tabularfeatures attribute)": [[26, "transformers4rec.torch.features.tabular.TabularFeatures.SOFT_EMBEDDING_MODULE_CLASS"]], "sequenceembeddingfeatures (class in transformers4rec.torch.features.sequence)": [[26, "transformers4rec.torch.features.sequence.SequenceEmbeddingFeatures"]], "softembedding (class in transformers4rec.torch.features.embedding)": [[26, "transformers4rec.torch.features.embedding.SoftEmbedding"]], "softembeddingfeatures (class in transformers4rec.torch.features.embedding)": [[26, "transformers4rec.torch.features.embedding.SoftEmbeddingFeatures"]], "tableconfig (class in transformers4rec.torch.features.embedding)": [[26, "transformers4rec.torch.features.embedding.TableConfig"]], "tabularfeatures (class in transformers4rec.torch.features.tabular)": [[26, "transformers4rec.torch.features.tabular.TabularFeatures"]], "tabularsequencefeatures (class in transformers4rec.torch.features.sequence)": [[26, "transformers4rec.torch.features.sequence.TabularSequenceFeatures"]], "build() (transformers4rec.torch.features.embedding.pretrainedembeddingfeatures method)": [[26, "transformers4rec.torch.features.embedding.PretrainedEmbeddingFeatures.build"]], "categorical_module (transformers4rec.torch.features.tabular.tabularfeatures property)": [[26, "transformers4rec.torch.features.tabular.TabularFeatures.categorical_module"]], "combiner (transformers4rec.torch.features.embedding.tableconfig attribute)": [[26, "transformers4rec.torch.features.embedding.TableConfig.combiner"]], "continuous_module (transformers4rec.torch.features.tabular.tabularfeatures property)": [[26, "transformers4rec.torch.features.tabular.TabularFeatures.continuous_module"]], "dim (transformers4rec.torch.features.embedding.tableconfig attribute)": [[26, "transformers4rec.torch.features.embedding.TableConfig.dim"]], "embedding_dim (transformers4rec.torch.features.embedding.embeddingbagwrapper attribute)": [[26, "transformers4rec.torch.features.embedding.EmbeddingBagWrapper.embedding_dim"]], "forward() (transformers4rec.torch.features.continuous.continuousfeatures method)": [[26, "transformers4rec.torch.features.continuous.ContinuousFeatures.forward"]], "forward() (transformers4rec.torch.features.embedding.embeddingbagwrapper method)": [[26, "transformers4rec.torch.features.embedding.EmbeddingBagWrapper.forward"]], "forward() (transformers4rec.torch.features.embedding.embeddingfeatures method)": [[26, "transformers4rec.torch.features.embedding.EmbeddingFeatures.forward"]], "forward() (transformers4rec.torch.features.embedding.pretrainedembeddingfeatures method)": [[26, "transformers4rec.torch.features.embedding.PretrainedEmbeddingFeatures.forward"]], "forward() (transformers4rec.torch.features.embedding.pretrainedembeddingsinitializer method)": [[26, "transformers4rec.torch.features.embedding.PretrainedEmbeddingsInitializer.forward"]], "forward() (transformers4rec.torch.features.embedding.softembedding method)": [[26, "transformers4rec.torch.features.embedding.SoftEmbedding.forward"]], "forward() (transformers4rec.torch.features.sequence.tabularsequencefeatures method)": [[26, "transformers4rec.torch.features.sequence.TabularSequenceFeatures.forward"]], "forward_output_size() (transformers4rec.torch.features.continuous.continuousfeatures method)": [[26, "transformers4rec.torch.features.continuous.ContinuousFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.features.embedding.embeddingfeatures method)": [[26, "transformers4rec.torch.features.embedding.EmbeddingFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.features.embedding.pretrainedembeddingfeatures method)": [[26, "transformers4rec.torch.features.embedding.PretrainedEmbeddingFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.features.sequence.sequenceembeddingfeatures method)": [[26, "transformers4rec.torch.features.sequence.SequenceEmbeddingFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.features.sequence.tabularsequencefeatures method)": [[26, "transformers4rec.torch.features.sequence.TabularSequenceFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.features.tabular.tabularfeatures method)": [[26, "transformers4rec.torch.features.tabular.TabularFeatures.forward_output_size"]], "from_features() (transformers4rec.torch.features.continuous.continuousfeatures class method)": [[26, "transformers4rec.torch.features.continuous.ContinuousFeatures.from_features"]], "from_schema() (transformers4rec.torch.features.embedding.embeddingfeatures class method)": [[26, "transformers4rec.torch.features.embedding.EmbeddingFeatures.from_schema"]], "from_schema() (transformers4rec.torch.features.embedding.pretrainedembeddingfeatures class method)": [[26, "transformers4rec.torch.features.embedding.PretrainedEmbeddingFeatures.from_schema"]], "from_schema() (transformers4rec.torch.features.embedding.softembeddingfeatures class method)": [[26, "transformers4rec.torch.features.embedding.SoftEmbeddingFeatures.from_schema"]], "from_schema() (transformers4rec.torch.features.sequence.tabularsequencefeatures class method)": [[26, "transformers4rec.torch.features.sequence.TabularSequenceFeatures.from_schema"]], "from_schema() (transformers4rec.torch.features.tabular.tabularfeatures class method)": [[26, "transformers4rec.torch.features.tabular.TabularFeatures.from_schema"]], "include_last_offset (transformers4rec.torch.features.embedding.embeddingbagwrapper attribute)": [[26, "transformers4rec.torch.features.embedding.EmbeddingBagWrapper.include_last_offset"]], "initializer (transformers4rec.torch.features.embedding.tableconfig attribute)": [[26, "transformers4rec.torch.features.embedding.TableConfig.initializer"]], "item_embedding_table (transformers4rec.torch.features.embedding.embeddingfeatures property)": [[26, "transformers4rec.torch.features.embedding.EmbeddingFeatures.item_embedding_table"]], "item_embedding_table (transformers4rec.torch.features.sequence.tabularsequencefeatures property)": [[26, "transformers4rec.torch.features.sequence.TabularSequenceFeatures.item_embedding_table"]], "item_id (transformers4rec.torch.features.sequence.tabularsequencefeatures property)": [[26, "transformers4rec.torch.features.sequence.TabularSequenceFeatures.item_id"]], "item_ids() (transformers4rec.torch.features.embedding.embeddingfeatures method)": [[26, "transformers4rec.torch.features.embedding.EmbeddingFeatures.item_ids"]], "masking (transformers4rec.torch.features.sequence.tabularsequencefeatures property)": [[26, "transformers4rec.torch.features.sequence.TabularSequenceFeatures.masking"]], "max_norm (transformers4rec.torch.features.embedding.embeddingbagwrapper attribute)": [[26, "transformers4rec.torch.features.embedding.EmbeddingBagWrapper.max_norm"]], "max_sequence_length (transformers4rec.torch.features.embedding.featureconfig attribute)": [[26, "transformers4rec.torch.features.embedding.FeatureConfig.max_sequence_length"]], "mode (transformers4rec.torch.features.embedding.embeddingbagwrapper attribute)": [[26, "transformers4rec.torch.features.embedding.EmbeddingBagWrapper.mode"]], "name (transformers4rec.torch.features.embedding.featureconfig attribute)": [[26, "transformers4rec.torch.features.embedding.FeatureConfig.name"]], "name (transformers4rec.torch.features.embedding.tableconfig attribute)": [[26, "transformers4rec.torch.features.embedding.TableConfig.name"]], "norm_type (transformers4rec.torch.features.embedding.embeddingbagwrapper attribute)": [[26, "transformers4rec.torch.features.embedding.EmbeddingBagWrapper.norm_type"]], "num_embeddings (transformers4rec.torch.features.embedding.embeddingbagwrapper attribute)": [[26, "transformers4rec.torch.features.embedding.EmbeddingBagWrapper.num_embeddings"]], "padding_idx (transformers4rec.torch.features.embedding.embeddingbagwrapper attribute)": [[26, "transformers4rec.torch.features.embedding.EmbeddingBagWrapper.padding_idx"]], "parse_combiner() (transformers4rec.torch.features.embedding.pretrainedembeddingfeatures method)": [[26, "transformers4rec.torch.features.embedding.PretrainedEmbeddingFeatures.parse_combiner"]], "pretrained_module (transformers4rec.torch.features.tabular.tabularfeatures property)": [[26, "transformers4rec.torch.features.tabular.TabularFeatures.pretrained_module"]], "project_continuous_features() (transformers4rec.torch.features.sequence.tabularsequencefeatures method)": [[26, "transformers4rec.torch.features.sequence.TabularSequenceFeatures.project_continuous_features"]], "project_continuous_features() (transformers4rec.torch.features.tabular.tabularfeatures method)": [[26, "transformers4rec.torch.features.tabular.TabularFeatures.project_continuous_features"]], "scale_grad_by_freq (transformers4rec.torch.features.embedding.embeddingbagwrapper attribute)": [[26, "transformers4rec.torch.features.embedding.EmbeddingBagWrapper.scale_grad_by_freq"]], "set_masking() (transformers4rec.torch.features.sequence.tabularsequencefeatures method)": [[26, "transformers4rec.torch.features.sequence.TabularSequenceFeatures.set_masking"]], "sparse (transformers4rec.torch.features.embedding.embeddingbagwrapper attribute)": [[26, "transformers4rec.torch.features.embedding.EmbeddingBagWrapper.sparse"]], "table (transformers4rec.torch.features.embedding.featureconfig attribute)": [[26, "transformers4rec.torch.features.embedding.FeatureConfig.table"]], "table_to_embedding_module() (transformers4rec.torch.features.embedding.embeddingfeatures method)": [[26, "transformers4rec.torch.features.embedding.EmbeddingFeatures.table_to_embedding_module"]], "table_to_embedding_module() (transformers4rec.torch.features.embedding.softembeddingfeatures method)": [[26, "transformers4rec.torch.features.embedding.SoftEmbeddingFeatures.table_to_embedding_module"]], "table_to_embedding_module() (transformers4rec.torch.features.sequence.sequenceembeddingfeatures method)": [[26, "transformers4rec.torch.features.sequence.SequenceEmbeddingFeatures.table_to_embedding_module"]], "training (transformers4rec.torch.features.embedding.pretrainedembeddingsinitializer attribute)": [[26, "transformers4rec.torch.features.embedding.PretrainedEmbeddingsInitializer.training"]], "training (transformers4rec.torch.features.embedding.softembedding attribute)": [[26, "transformers4rec.torch.features.embedding.SoftEmbedding.training"]], "transformers4rec.torch.features": [[26, "module-transformers4rec.torch.features"]], "transformers4rec.torch.features.base": [[26, "module-transformers4rec.torch.features.base"]], "transformers4rec.torch.features.continuous": [[26, "module-transformers4rec.torch.features.continuous"]], "transformers4rec.torch.features.embedding": [[26, "module-transformers4rec.torch.features.embedding"]], "transformers4rec.torch.features.sequence": [[26, "module-transformers4rec.torch.features.sequence"]], "transformers4rec.torch.features.tabular": [[26, "module-transformers4rec.torch.features.tabular"]], "transformers4rec.torch.features.text": [[26, "module-transformers4rec.torch.features.text"]], "vocabulary_size (transformers4rec.torch.features.embedding.tableconfig attribute)": [[26, "transformers4rec.torch.features.embedding.TableConfig.vocabulary_size"]], "weight (transformers4rec.torch.features.embedding.embeddingbagwrapper attribute)": [[26, "transformers4rec.torch.features.embedding.EmbeddingBagWrapper.weight"]], "binaryclassificationprepareblock (class in transformers4rec.torch.model.prediction_task)": [[27, "transformers4rec.torch.model.prediction_task.BinaryClassificationPrepareBlock"]], "binaryclassificationtask (class in transformers4rec.torch.model.prediction_task)": [[27, "transformers4rec.torch.model.prediction_task.BinaryClassificationTask"]], "default_loss (transformers4rec.torch.model.prediction_task.binaryclassificationtask attribute)": [[27, "transformers4rec.torch.model.prediction_task.BinaryClassificationTask.DEFAULT_LOSS"]], "default_loss (transformers4rec.torch.model.prediction_task.regressiontask attribute)": [[27, "transformers4rec.torch.model.prediction_task.RegressionTask.DEFAULT_LOSS"]], "default_metrics (transformers4rec.torch.model.prediction_task.binaryclassificationtask attribute)": [[27, "transformers4rec.torch.model.prediction_task.BinaryClassificationTask.DEFAULT_METRICS"]], "default_metrics (transformers4rec.torch.model.prediction_task.nextitempredictiontask attribute)": [[27, "transformers4rec.torch.model.prediction_task.NextItemPredictionTask.DEFAULT_METRICS"]], "default_metrics (transformers4rec.torch.model.prediction_task.regressiontask attribute)": [[27, "transformers4rec.torch.model.prediction_task.RegressionTask.DEFAULT_METRICS"]], "loguniformsampler (class in transformers4rec.torch.model.prediction_task)": [[27, "transformers4rec.torch.model.prediction_task.LogUniformSampler"]], "nextitempredictionprepareblock (class in transformers4rec.torch.model.prediction_task)": [[27, "transformers4rec.torch.model.prediction_task.NextItemPredictionPrepareBlock"]], "nextitempredictiontask (class in transformers4rec.torch.model.prediction_task)": [[27, "transformers4rec.torch.model.prediction_task.NextItemPredictionTask"]], "regressionprepareblock (class in transformers4rec.torch.model.prediction_task)": [[27, "transformers4rec.torch.model.prediction_task.RegressionPrepareBlock"]], "regressiontask (class in transformers4rec.torch.model.prediction_task)": [[27, "transformers4rec.torch.model.prediction_task.RegressionTask"]], "build() (transformers4rec.torch.model.prediction_task.binaryclassificationprepareblock method)": [[27, "transformers4rec.torch.model.prediction_task.BinaryClassificationPrepareBlock.build"]], "build() (transformers4rec.torch.model.prediction_task.nextitempredictionprepareblock method)": [[27, "transformers4rec.torch.model.prediction_task.NextItemPredictionPrepareBlock.build"]], "build() (transformers4rec.torch.model.prediction_task.nextitempredictiontask method)": [[27, "transformers4rec.torch.model.prediction_task.NextItemPredictionTask.build"]], "build() (transformers4rec.torch.model.prediction_task.regressionprepareblock method)": [[27, "transformers4rec.torch.model.prediction_task.RegressionPrepareBlock.build"]], "calculate_metrics() (transformers4rec.torch.model.prediction_task.nextitempredictiontask method)": [[27, "transformers4rec.torch.model.prediction_task.NextItemPredictionTask.calculate_metrics"]], "compute_metrics() (transformers4rec.torch.model.prediction_task.nextitempredictiontask method)": [[27, "transformers4rec.torch.model.prediction_task.NextItemPredictionTask.compute_metrics"]], "forward() (transformers4rec.torch.model.prediction_task.loguniformsampler method)": [[27, "transformers4rec.torch.model.prediction_task.LogUniformSampler.forward"]], "forward() (transformers4rec.torch.model.prediction_task.nextitempredictiontask method)": [[27, "transformers4rec.torch.model.prediction_task.NextItemPredictionTask.forward"]], "get_log_uniform_distr() (transformers4rec.torch.model.prediction_task.loguniformsampler method)": [[27, "transformers4rec.torch.model.prediction_task.LogUniformSampler.get_log_uniform_distr"]], "get_unique_sampling_distr() (transformers4rec.torch.model.prediction_task.loguniformsampler method)": [[27, "transformers4rec.torch.model.prediction_task.LogUniformSampler.get_unique_sampling_distr"]], "remove_pad_3d() (transformers4rec.torch.model.prediction_task.nextitempredictiontask method)": [[27, "transformers4rec.torch.model.prediction_task.NextItemPredictionTask.remove_pad_3d"]], "sample() (transformers4rec.torch.model.prediction_task.loguniformsampler method)": [[27, "transformers4rec.torch.model.prediction_task.LogUniformSampler.sample"]], "training (transformers4rec.torch.model.prediction_task.binaryclassificationtask attribute)": [[27, "transformers4rec.torch.model.prediction_task.BinaryClassificationTask.training"]], "training (transformers4rec.torch.model.prediction_task.loguniformsampler attribute)": [[27, "transformers4rec.torch.model.prediction_task.LogUniformSampler.training"]], "training (transformers4rec.torch.model.prediction_task.nextitempredictiontask attribute)": [[27, "transformers4rec.torch.model.prediction_task.NextItemPredictionTask.training"]], "training (transformers4rec.torch.model.prediction_task.regressiontask attribute)": [[27, "transformers4rec.torch.model.prediction_task.RegressionTask.training"]], "transformers4rec.torch.model": [[27, "module-transformers4rec.torch.model"]], "transformers4rec.torch.model.prediction_task": [[27, "module-transformers4rec.torch.model.prediction_task"]], "concatfeatures (class in transformers4rec.torch.tabular.aggregation)": [[28, "transformers4rec.torch.tabular.aggregation.ConcatFeatures"]], "elementwisefeatureaggregation (class in transformers4rec.torch.tabular.aggregation)": [[28, "transformers4rec.torch.tabular.aggregation.ElementwiseFeatureAggregation"]], "elementwisesum (class in transformers4rec.torch.tabular.aggregation)": [[28, "transformers4rec.torch.tabular.aggregation.ElementwiseSum"]], "elementwisesumitemmulti (class in transformers4rec.torch.tabular.aggregation)": [[28, "transformers4rec.torch.tabular.aggregation.ElementwiseSumItemMulti"]], "requires_schema (transformers4rec.torch.tabular.aggregation.elementwisesumitemmulti attribute)": [[28, "transformers4rec.torch.tabular.aggregation.ElementwiseSumItemMulti.REQUIRES_SCHEMA"]], "stackfeatures (class in transformers4rec.torch.tabular.aggregation)": [[28, "transformers4rec.torch.tabular.aggregation.StackFeatures"]], "stochasticswapnoise (class in transformers4rec.torch.tabular.transformations)": [[28, "transformers4rec.torch.tabular.transformations.StochasticSwapNoise"]], "tabulardropout (class in transformers4rec.torch.tabular.transformations)": [[28, "transformers4rec.torch.tabular.transformations.TabularDropout"]], "tabularlayernorm (class in transformers4rec.torch.tabular.transformations)": [[28, "transformers4rec.torch.tabular.transformations.TabularLayerNorm"]], "augment() (transformers4rec.torch.tabular.transformations.stochasticswapnoise method)": [[28, "transformers4rec.torch.tabular.transformations.StochasticSwapNoise.augment"]], "build() (transformers4rec.torch.tabular.transformations.tabularlayernorm method)": [[28, "transformers4rec.torch.tabular.transformations.TabularLayerNorm.build"]], "forward() (transformers4rec.torch.tabular.aggregation.concatfeatures method)": [[28, "transformers4rec.torch.tabular.aggregation.ConcatFeatures.forward"]], "forward() (transformers4rec.torch.tabular.aggregation.elementwisesum method)": [[28, "transformers4rec.torch.tabular.aggregation.ElementwiseSum.forward"]], "forward() (transformers4rec.torch.tabular.aggregation.elementwisesumitemmulti method)": [[28, "transformers4rec.torch.tabular.aggregation.ElementwiseSumItemMulti.forward"]], "forward() (transformers4rec.torch.tabular.aggregation.stackfeatures method)": [[28, "transformers4rec.torch.tabular.aggregation.StackFeatures.forward"]], "forward() (transformers4rec.torch.tabular.transformations.stochasticswapnoise method)": [[28, "transformers4rec.torch.tabular.transformations.StochasticSwapNoise.forward"]], "forward() (transformers4rec.torch.tabular.transformations.tabulardropout method)": [[28, "transformers4rec.torch.tabular.transformations.TabularDropout.forward"]], "forward() (transformers4rec.torch.tabular.transformations.tabularlayernorm method)": [[28, "transformers4rec.torch.tabular.transformations.TabularLayerNorm.forward"]], "forward_output_size() (transformers4rec.torch.tabular.aggregation.concatfeatures method)": [[28, "transformers4rec.torch.tabular.aggregation.ConcatFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.tabular.aggregation.elementwisesum method)": [[28, "transformers4rec.torch.tabular.aggregation.ElementwiseSum.forward_output_size"]], "forward_output_size() (transformers4rec.torch.tabular.aggregation.elementwisesumitemmulti method)": [[28, "transformers4rec.torch.tabular.aggregation.ElementwiseSumItemMulti.forward_output_size"]], "forward_output_size() (transformers4rec.torch.tabular.aggregation.stackfeatures method)": [[28, "transformers4rec.torch.tabular.aggregation.StackFeatures.forward_output_size"]], "forward_output_size() (transformers4rec.torch.tabular.transformations.stochasticswapnoise method)": [[28, "transformers4rec.torch.tabular.transformations.StochasticSwapNoise.forward_output_size"]], "forward_output_size() (transformers4rec.torch.tabular.transformations.tabulardropout method)": [[28, "transformers4rec.torch.tabular.transformations.TabularDropout.forward_output_size"]], "forward_output_size() (transformers4rec.torch.tabular.transformations.tabularlayernorm method)": [[28, "transformers4rec.torch.tabular.transformations.TabularLayerNorm.forward_output_size"]], "from_feature_config() (transformers4rec.torch.tabular.transformations.tabularlayernorm class method)": [[28, "transformers4rec.torch.tabular.transformations.TabularLayerNorm.from_feature_config"]], "training (transformers4rec.torch.tabular.aggregation.elementwisesumitemmulti attribute)": [[28, "transformers4rec.torch.tabular.aggregation.ElementwiseSumItemMulti.training"]], "transformers4rec.torch.tabular": [[28, "module-transformers4rec.torch.tabular"]], "transformers4rec.torch.tabular.aggregation": [[28, "module-transformers4rec.torch.tabular.aggregation"]], "transformers4rec.torch.tabular.transformations": [[28, "module-transformers4rec.torch.tabular.transformations"]], "bertconfig (transformers4rec.torch.utils.torch_utils.mappingtransformermasking attribute)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.BertConfig"]], "convbertconfig (transformers4rec.torch.utils.torch_utils.mappingtransformermasking attribute)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.ConvBertConfig"]], "default_masking (transformers4rec.torch.utils.torch_utils.mappingtransformermasking attribute)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.DEFAULT_MASKING"]], "dldataloader (class in transformers4rec.torch.utils.data_utils)": [[29, "transformers4rec.torch.utils.data_utils.DLDataLoader"]], "debertaconfig (transformers4rec.torch.utils.torch_utils.mappingtransformermasking attribute)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.DebertaConfig"]], "distilbertconfig (transformers4rec.torch.utils.torch_utils.mappingtransformermasking attribute)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.DistilBertConfig"]], "gpt2config (transformers4rec.torch.utils.torch_utils.mappingtransformermasking attribute)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.GPT2Config"]], "lambdamodule (class in transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.LambdaModule"]], "longformerconfig (transformers4rec.torch.utils.torch_utils.mappingtransformermasking attribute)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.LongformerConfig"]], "lossmixin (class in transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.LossMixin"]], "mpnetconfig (transformers4rec.torch.utils.torch_utils.mappingtransformermasking attribute)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.MPNetConfig"]], "mappingtransformermasking (class in transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking"]], "mappingtransformermasking.causallanguagemodeling (class in transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.CausalLanguageModeling"]], "mappingtransformermasking.maskedlanguagemodeling (class in transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.MaskedLanguageModeling"]], "mappingtransformermasking.permutationlanguagemodeling (class in transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.PermutationLanguageModeling"]], "mappingtransformermasking.replacementlanguagemodeling (class in transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.ReplacementLanguageModeling"]], "megatronbertconfig (transformers4rec.torch.utils.torch_utils.mappingtransformermasking attribute)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.MegatronBertConfig"]], "merlindataloader (class in transformers4rec.torch.utils.data_utils)": [[29, "transformers4rec.torch.utils.data_utils.MerlinDataLoader"]], "metricsmixin (class in transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.MetricsMixin"]], "outputsizemixin (class in transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.OutputSizeMixin"]], "parquetdataset (class in transformers4rec.torch.utils.data_utils)": [[29, "transformers4rec.torch.utils.data_utils.ParquetDataset"]], "pyarrowdataloader (class in transformers4rec.torch.utils.data_utils)": [[29, "transformers4rec.torch.utils.data_utils.PyarrowDataLoader"]], "roformerconfig (transformers4rec.torch.utils.torch_utils.mappingtransformermasking attribute)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.RoFormerConfig"]], "robertaconfig (transformers4rec.torch.utils.torch_utils.mappingtransformermasking attribute)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.RobertaConfig"]], "shuffledataset (class in transformers4rec.torch.utils.data_utils)": [[29, "transformers4rec.torch.utils.data_utils.ShuffleDataset"]], "t4recdataloader (class in transformers4rec.torch.utils.data_utils)": [[29, "transformers4rec.torch.utils.data_utils.T4RecDataLoader"]], "transfoxlconfig (transformers4rec.torch.utils.torch_utils.mappingtransformermasking attribute)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.TransfoXLConfig"]], "xlnetconfig (transformers4rec.torch.utils.torch_utils.mappingtransformermasking attribute)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.XLNetConfig"]], "apply_mask_to_inputs() (transformers4rec.torch.utils.torch_utils.mappingtransformermasking.causallanguagemodeling method)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.CausalLanguageModeling.apply_mask_to_inputs"]], "apply_mask_to_inputs() (transformers4rec.torch.utils.torch_utils.mappingtransformermasking.maskedlanguagemodeling method)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.MaskedLanguageModeling.apply_mask_to_inputs"]], "atleast_1d() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.atleast_1d"]], "batch_size (transformers4rec.torch.utils.data_utils.dldataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.DLDataLoader.batch_size"]], "batch_size (transformers4rec.torch.utils.data_utils.merlindataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.MerlinDataLoader.batch_size"]], "batch_size (transformers4rec.torch.utils.data_utils.pyarrowdataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.PyarrowDataLoader.batch_size"]], "build() (transformers4rec.torch.utils.torch_utils.outputsizemixin method)": [[29, "transformers4rec.torch.utils.torch_utils.OutputSizeMixin.build"]], "calculate_batch_size_from_input_size() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.calculate_batch_size_from_input_size"]], "calculate_metrics() (transformers4rec.torch.utils.torch_utils.metricsmixin method)": [[29, "transformers4rec.torch.utils.torch_utils.MetricsMixin.calculate_metrics"]], "check_gpu() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.check_gpu"]], "check_inputs() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.check_inputs"]], "compute_loss() (transformers4rec.torch.utils.torch_utils.lossmixin method)": [[29, "transformers4rec.torch.utils.torch_utils.LossMixin.compute_loss"]], "compute_masked_targets() (transformers4rec.torch.utils.torch_utils.mappingtransformermasking.permutationlanguagemodeling method)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.PermutationLanguageModeling.compute_masked_targets"]], "compute_metrics() (transformers4rec.torch.utils.torch_utils.metricsmixin method)": [[29, "transformers4rec.torch.utils.torch_utils.MetricsMixin.compute_metrics"]], "create_output_placeholder() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.create_output_placeholder"]], "dataset (transformers4rec.torch.utils.data_utils.dldataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.DLDataLoader.dataset"]], "dataset (transformers4rec.torch.utils.data_utils.merlindataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.MerlinDataLoader.dataset"]], "dataset (transformers4rec.torch.utils.data_utils.pyarrowdataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.PyarrowDataLoader.dataset"]], "device (transformers4rec.torch.utils.data_utils.dldataloader property)": [[29, "transformers4rec.torch.utils.data_utils.DLDataLoader.device"]], "drop_last (transformers4rec.torch.utils.data_utils.dldataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.DLDataLoader.drop_last"]], "drop_last (transformers4rec.torch.utils.data_utils.merlindataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.MerlinDataLoader.drop_last"]], "drop_last (transformers4rec.torch.utils.data_utils.pyarrowdataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.PyarrowDataLoader.drop_last"]], "extract_topk() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.extract_topk"]], "fit_and_evaluate() (in module transformers4rec.torch.utils.examples_utils)": [[29, "transformers4rec.torch.utils.examples_utils.fit_and_evaluate"]], "forward() (transformers4rec.torch.utils.torch_utils.lambdamodule method)": [[29, "transformers4rec.torch.utils.torch_utils.LambdaModule.forward"]], "forward_output_size() (transformers4rec.torch.utils.torch_utils.outputsizemixin method)": [[29, "transformers4rec.torch.utils.torch_utils.OutputSizeMixin.forward_output_size"]], "from_schema() (transformers4rec.torch.utils.data_utils.merlindataloader class method)": [[29, "transformers4rec.torch.utils.data_utils.MerlinDataLoader.from_schema"]], "from_schema() (transformers4rec.torch.utils.data_utils.pyarrowdataloader class method)": [[29, "transformers4rec.torch.utils.data_utils.PyarrowDataLoader.from_schema"]], "from_schema() (transformers4rec.torch.utils.data_utils.t4recdataloader class method)": [[29, "transformers4rec.torch.utils.data_utils.T4RecDataLoader.from_schema"]], "get_fake_tokens() (transformers4rec.torch.utils.torch_utils.mappingtransformermasking.replacementlanguagemodeling method)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.ReplacementLanguageModeling.get_fake_tokens"]], "get_output_sizes_from_schema() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.get_output_sizes_from_schema"]], "list_files() (in module transformers4rec.torch.utils.examples_utils)": [[29, "transformers4rec.torch.utils.examples_utils.list_files"]], "nested_concat() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.nested_concat"]], "nested_detach() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.nested_detach"]], "nested_numpify() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.nested_numpify"]], "nested_truncate() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.nested_truncate"]], "num_workers (transformers4rec.torch.utils.data_utils.dldataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.DLDataLoader.num_workers"]], "num_workers (transformers4rec.torch.utils.data_utils.merlindataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.MerlinDataLoader.num_workers"]], "num_workers (transformers4rec.torch.utils.data_utils.pyarrowdataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.PyarrowDataLoader.num_workers"]], "numpy_pad_and_concatenate() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.numpy_pad_and_concatenate"]], "one_hot_1d() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.one_hot_1d"]], "output_schema (transformers4rec.torch.utils.data_utils.merlindataloader property)": [[29, "transformers4rec.torch.utils.data_utils.MerlinDataLoader.output_schema"]], "output_size() (transformers4rec.torch.utils.torch_utils.outputsizemixin method)": [[29, "transformers4rec.torch.utils.torch_utils.OutputSizeMixin.output_size"]], "pad_seq_column_if_needed() (transformers4rec.torch.utils.data_utils.parquetdataset method)": [[29, "transformers4rec.torch.utils.data_utils.ParquetDataset.pad_seq_column_if_needed"]], "parse() (transformers4rec.torch.utils.data_utils.t4recdataloader class method)": [[29, "transformers4rec.torch.utils.data_utils.T4RecDataLoader.parse"]], "pin_memory (transformers4rec.torch.utils.data_utils.dldataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.DLDataLoader.pin_memory"]], "pin_memory (transformers4rec.torch.utils.data_utils.merlindataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.MerlinDataLoader.pin_memory"]], "pin_memory (transformers4rec.torch.utils.data_utils.pyarrowdataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.PyarrowDataLoader.pin_memory"]], "pin_memory_device (transformers4rec.torch.utils.data_utils.dldataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.DLDataLoader.pin_memory_device"]], "pin_memory_device (transformers4rec.torch.utils.data_utils.merlindataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.MerlinDataLoader.pin_memory_device"]], "pin_memory_device (transformers4rec.torch.utils.data_utils.pyarrowdataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.PyarrowDataLoader.pin_memory_device"]], "prefetch_factor (transformers4rec.torch.utils.data_utils.dldataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.DLDataLoader.prefetch_factor"]], "prefetch_factor (transformers4rec.torch.utils.data_utils.merlindataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.MerlinDataLoader.prefetch_factor"]], "prefetch_factor (transformers4rec.torch.utils.data_utils.pyarrowdataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.PyarrowDataLoader.prefetch_factor"]], "random_data_from_schema() (in module transformers4rec.torch.utils.schema_utils)": [[29, "transformers4rec.torch.utils.schema_utils.random_data_from_schema"]], "requires_schema() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.requires_schema"]], "reset_metrics() (transformers4rec.torch.utils.torch_utils.metricsmixin method)": [[29, "transformers4rec.torch.utils.torch_utils.MetricsMixin.reset_metrics"]], "sample_from_softmax() (transformers4rec.torch.utils.torch_utils.mappingtransformermasking.replacementlanguagemodeling method)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.ReplacementLanguageModeling.sample_from_softmax"]], "sampler (transformers4rec.torch.utils.data_utils.dldataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.DLDataLoader.sampler"]], "sampler (transformers4rec.torch.utils.data_utils.merlindataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.MerlinDataLoader.sampler"]], "sampler (transformers4rec.torch.utils.data_utils.pyarrowdataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.PyarrowDataLoader.sampler"]], "set_dataset() (transformers4rec.torch.utils.data_utils.merlindataloader method)": [[29, "transformers4rec.torch.utils.data_utils.MerlinDataLoader.set_dataset"]], "set_dataset() (transformers4rec.torch.utils.data_utils.pyarrowdataloader method)": [[29, "transformers4rec.torch.utils.data_utils.PyarrowDataLoader.set_dataset"]], "set_dataset() (transformers4rec.torch.utils.data_utils.t4recdataloader method)": [[29, "transformers4rec.torch.utils.data_utils.T4RecDataLoader.set_dataset"]], "timeout (transformers4rec.torch.utils.data_utils.dldataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.DLDataLoader.timeout"]], "timeout (transformers4rec.torch.utils.data_utils.merlindataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.MerlinDataLoader.timeout"]], "timeout (transformers4rec.torch.utils.data_utils.pyarrowdataloader attribute)": [[29, "transformers4rec.torch.utils.data_utils.PyarrowDataLoader.timeout"]], "to_core_schema() (in module transformers4rec.torch.utils.data_utils)": [[29, "transformers4rec.torch.utils.data_utils.to_core_schema"]], "torch_pad_and_concatenate() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.torch_pad_and_concatenate"]], "training (transformers4rec.torch.utils.torch_utils.lambdamodule attribute)": [[29, "transformers4rec.torch.utils.torch_utils.LambdaModule.training"]], "tranform_label_to_onehot() (in module transformers4rec.torch.utils.torch_utils)": [[29, "transformers4rec.torch.utils.torch_utils.tranform_label_to_onehot"]], "transformer_required_arguments() (transformers4rec.torch.utils.torch_utils.mappingtransformermasking.permutationlanguagemodeling method)": [[29, "transformers4rec.torch.utils.torch_utils.MappingTransformerMasking.PermutationLanguageModeling.transformer_required_arguments"]], "transformers4rec.torch.utils": [[29, "module-transformers4rec.torch.utils"]], "transformers4rec.torch.utils.data_utils": [[29, "module-transformers4rec.torch.utils.data_utils"]], "transformers4rec.torch.utils.examples_utils": [[29, "module-transformers4rec.torch.utils.examples_utils"]], "transformers4rec.torch.utils.schema_utils": [[29, "module-transformers4rec.torch.utils.schema_utils"]], "transformers4rec.torch.utils.torch_utils": [[29, "module-transformers4rec.torch.utils.torch_utils"]], "visualize_response() (in module transformers4rec.torch.utils.examples_utils)": [[29, "transformers4rec.torch.utils.examples_utils.visualize_response"]], "wipe_memory() (in module transformers4rec.torch.utils.examples_utils)": [[29, "transformers4rec.torch.utils.examples_utils.wipe_memory"]], "is_gpu_dataloader_available() (in module transformers4rec.utils.dependencies)": [[30, "transformers4rec.utils.dependencies.is_gpu_dataloader_available"]], "is_merlin_dataloader_available() (in module transformers4rec.utils.dependencies)": [[30, "transformers4rec.utils.dependencies.is_merlin_dataloader_available"]], "is_pyarrow_available() (in module transformers4rec.utils.dependencies)": [[30, "transformers4rec.utils.dependencies.is_pyarrow_available"]], "transformers4rec.utils": [[30, "module-transformers4rec.utils"]], "transformers4rec.utils.dependencies": [[30, "module-transformers4rec.utils.dependencies"]], "loader (class in merlin.dataloader.jax)": [[67, "merlin.dataloader.jax.Loader"]], "__init__() (merlin.dataloader.jax.loader method)": [[67, "merlin.dataloader.jax.Loader.__init__"]], "chunkqueue (class in merlin.dataloader.loader_base)": [[68, "merlin.dataloader.loader_base.ChunkQueue"]], "__init__() (merlin.dataloader.loader_base.chunkqueue method)": [[68, "merlin.dataloader.loader_base.ChunkQueue.__init__"]], "batch() (merlin.dataloader.loader_base.chunkqueue method)": [[68, "merlin.dataloader.loader_base.ChunkQueue.batch"]], "chunk_logic() (merlin.dataloader.loader_base.chunkqueue method)": [[68, "merlin.dataloader.loader_base.ChunkQueue.chunk_logic"]], "empty (merlin.dataloader.loader_base.chunkqueue property)": [[68, "merlin.dataloader.loader_base.ChunkQueue.empty"]], "get() (merlin.dataloader.loader_base.chunkqueue method)": [[68, "merlin.dataloader.loader_base.ChunkQueue.get"]], "get_batch_div_chunk() (merlin.dataloader.loader_base.chunkqueue method)": [[68, "merlin.dataloader.loader_base.ChunkQueue.get_batch_div_chunk"]], "load_chunks() (merlin.dataloader.loader_base.chunkqueue method)": [[68, "merlin.dataloader.loader_base.ChunkQueue.load_chunks"]], "put() (merlin.dataloader.loader_base.chunkqueue method)": [[68, "merlin.dataloader.loader_base.ChunkQueue.put"]], "start() (merlin.dataloader.loader_base.chunkqueue method)": [[68, "merlin.dataloader.loader_base.ChunkQueue.start"]], "stop() (merlin.dataloader.loader_base.chunkqueue method)": [[68, "merlin.dataloader.loader_base.ChunkQueue.stop"]], "stopped (merlin.dataloader.loader_base.chunkqueue property)": [[68, "merlin.dataloader.loader_base.ChunkQueue.stopped"]], "loaderbase (class in merlin.dataloader.loader_base)": [[69, "merlin.dataloader.loader_base.LoaderBase"]], "__init__() (merlin.dataloader.loader_base.loaderbase method)": [[69, "merlin.dataloader.loader_base.LoaderBase.__init__"]], "array_lib() (merlin.dataloader.loader_base.loaderbase method)": [[69, "merlin.dataloader.loader_base.LoaderBase.array_lib"]], "epochs() (merlin.dataloader.loader_base.loaderbase method)": [[69, "merlin.dataloader.loader_base.LoaderBase.epochs"]], "input_schema (merlin.dataloader.loader_base.loaderbase property)": [[69, "merlin.dataloader.loader_base.LoaderBase.input_schema"]], "make_tensors() (merlin.dataloader.loader_base.loaderbase method)": [[69, "merlin.dataloader.loader_base.LoaderBase.make_tensors"]], "output_schema (merlin.dataloader.loader_base.loaderbase property)": [[69, "merlin.dataloader.loader_base.LoaderBase.output_schema"]], "peek() (merlin.dataloader.loader_base.loaderbase method)": [[69, "merlin.dataloader.loader_base.LoaderBase.peek"]], "schema (merlin.dataloader.loader_base.loaderbase property)": [[69, "merlin.dataloader.loader_base.LoaderBase.schema"]], "stop() (merlin.dataloader.loader_base.loaderbase method)": [[69, "merlin.dataloader.loader_base.LoaderBase.stop"]], "transforms (merlin.dataloader.loader_base.loaderbase property)": [[69, "merlin.dataloader.loader_base.LoaderBase.transforms"]], "kerassequencevalidater (class in merlin.dataloader.tensorflow)": [[70, "merlin.dataloader.tensorflow.KerasSequenceValidater"]], "__init__() (merlin.dataloader.tensorflow.kerassequencevalidater method)": [[70, "merlin.dataloader.tensorflow.KerasSequenceValidater.__init__"]], "on_epoch_end() (merlin.dataloader.tensorflow.kerassequencevalidater method)": [[70, "merlin.dataloader.tensorflow.KerasSequenceValidater.on_epoch_end"]], "loader (class in merlin.dataloader.tensorflow)": [[71, "merlin.dataloader.tensorflow.Loader"]], "__init__() (merlin.dataloader.tensorflow.loader method)": [[71, "merlin.dataloader.tensorflow.Loader.__init__"]], "convert_batch() (merlin.dataloader.tensorflow.loader method)": [[71, "merlin.dataloader.tensorflow.Loader.convert_batch"]], "map() (merlin.dataloader.tensorflow.loader method)": [[71, "merlin.dataloader.tensorflow.Loader.map"]], "on_epoch_end() (merlin.dataloader.tensorflow.loader method)": [[71, "merlin.dataloader.tensorflow.Loader.on_epoch_end"]], "peek() (merlin.dataloader.tensorflow.loader method)": [[71, "merlin.dataloader.tensorflow.Loader.peek"]], "has_gpu (in module merlin.dataloader.tf_utils)": [[72, "merlin.dataloader.tf_utils.HAS_GPU"]], "configure_tensorflow() (in module merlin.dataloader.tf_utils)": [[73, "merlin.dataloader.tf_utils.configure_tensorflow"]], "get_dataset_schema_from_feature_columns() (in module merlin.dataloader.tf_utils)": [[74, "merlin.dataloader.tf_utils.get_dataset_schema_from_feature_columns"]], "dldataloader (class in merlin.dataloader.torch)": [[75, "merlin.dataloader.torch.DLDataLoader"]], "__init__() (merlin.dataloader.torch.dldataloader method)": [[75, "merlin.dataloader.torch.DLDataLoader.__init__"]], "batch_size (merlin.dataloader.torch.dldataloader attribute)": [[75, "merlin.dataloader.torch.DLDataLoader.batch_size"]], "dataset (merlin.dataloader.torch.dldataloader attribute)": [[75, "merlin.dataloader.torch.DLDataLoader.dataset"]], "device (merlin.dataloader.torch.dldataloader property)": [[75, "merlin.dataloader.torch.DLDataLoader.device"]], "drop_last (merlin.dataloader.torch.dldataloader attribute)": [[75, "merlin.dataloader.torch.DLDataLoader.drop_last"]], "num_workers (merlin.dataloader.torch.dldataloader attribute)": [[75, "merlin.dataloader.torch.DLDataLoader.num_workers"]], "pin_memory (merlin.dataloader.torch.dldataloader attribute)": [[75, "merlin.dataloader.torch.DLDataLoader.pin_memory"]], "pin_memory_device (merlin.dataloader.torch.dldataloader attribute)": [[75, "merlin.dataloader.torch.DLDataLoader.pin_memory_device"]], "prefetch_factor (merlin.dataloader.torch.dldataloader attribute)": [[75, "merlin.dataloader.torch.DLDataLoader.prefetch_factor"]], "sampler (merlin.dataloader.torch.dldataloader attribute)": [[75, "merlin.dataloader.torch.DLDataLoader.sampler"]], "timeout (merlin.dataloader.torch.dldataloader attribute)": [[75, "merlin.dataloader.torch.DLDataLoader.timeout"]], "loader (class in merlin.dataloader.torch)": [[76, "merlin.dataloader.torch.Loader"]], "__init__() (merlin.dataloader.torch.loader method)": [[76, "merlin.dataloader.torch.Loader.__init__"]], "convert_batch() (merlin.dataloader.torch.loader method)": [[76, "merlin.dataloader.torch.Loader.convert_batch"]], "map() (merlin.dataloader.torch.loader method)": [[76, "merlin.dataloader.torch.Loader.map"]], "peek() (merlin.dataloader.torch.loader method)": [[76, "merlin.dataloader.torch.Loader.peek"]], "astabular (class in merlin.models.tf)": [[77, "merlin.models.tf.AsTabular"]], "__init__() (merlin.models.tf.astabular method)": [[77, "merlin.models.tf.AsTabular.__init__"]], "call() (merlin.models.tf.astabular method)": [[77, "merlin.models.tf.AsTabular.call"]], "compute_output_shape() (merlin.models.tf.astabular method)": [[77, "merlin.models.tf.AsTabular.compute_output_shape"]], "get_config() (merlin.models.tf.astabular method)": [[77, "merlin.models.tf.AsTabular.get_config"]], "is_tabular (merlin.models.tf.astabular property)": [[77, "merlin.models.tf.AsTabular.is_tabular"]], "averageembeddingsbyweightfeature (class in merlin.models.tf)": [[78, "merlin.models.tf.AverageEmbeddingsByWeightFeature"]], "__init__() (merlin.models.tf.averageembeddingsbyweightfeature method)": [[78, "merlin.models.tf.AverageEmbeddingsByWeightFeature.__init__"]], "call() (merlin.models.tf.averageembeddingsbyweightfeature method)": [[78, "merlin.models.tf.AverageEmbeddingsByWeightFeature.call"]], "compute_output_shape() (merlin.models.tf.averageembeddingsbyweightfeature method)": [[78, "merlin.models.tf.AverageEmbeddingsByWeightFeature.compute_output_shape"]], "from_schema_convention() (merlin.models.tf.averageembeddingsbyweightfeature static method)": [[78, "merlin.models.tf.AverageEmbeddingsByWeightFeature.from_schema_convention"]], "get_config() (merlin.models.tf.averageembeddingsbyweightfeature method)": [[78, "merlin.models.tf.AverageEmbeddingsByWeightFeature.get_config"]], "avgprecisionat (class in merlin.models.tf)": [[79, "merlin.models.tf.AvgPrecisionAt"]], "__init__() (merlin.models.tf.avgprecisionat method)": [[79, "merlin.models.tf.AvgPrecisionAt.__init__"]], "binaryclassificationtask (class in merlin.models.tf)": [[80, "merlin.models.tf.BinaryClassificationTask"]], "default_loss (merlin.models.tf.binaryclassificationtask attribute)": [[80, "merlin.models.tf.BinaryClassificationTask.DEFAULT_LOSS"]], "default_metrics (merlin.models.tf.binaryclassificationtask attribute)": [[80, "merlin.models.tf.BinaryClassificationTask.DEFAULT_METRICS"]], "__init__() (merlin.models.tf.binaryclassificationtask method)": [[80, "merlin.models.tf.BinaryClassificationTask.__init__"]], "call() (merlin.models.tf.binaryclassificationtask method)": [[80, "merlin.models.tf.BinaryClassificationTask.call"]], "compute_output_shape() (merlin.models.tf.binaryclassificationtask method)": [[80, "merlin.models.tf.BinaryClassificationTask.compute_output_shape"]], "from_config() (merlin.models.tf.binaryclassificationtask class method)": [[80, "merlin.models.tf.BinaryClassificationTask.from_config"]], "get_config() (merlin.models.tf.binaryclassificationtask method)": [[80, "merlin.models.tf.BinaryClassificationTask.get_config"]], "binaryoutput (class in merlin.models.tf)": [[81, "merlin.models.tf.BinaryOutput"]], "__init__() (merlin.models.tf.binaryoutput method)": [[81, "merlin.models.tf.BinaryOutput.__init__"]], "broadcasttosequence (class in merlin.models.tf)": [[82, "merlin.models.tf.BroadcastToSequence"]], "__init__() (merlin.models.tf.broadcasttosequence method)": [[82, "merlin.models.tf.BroadcastToSequence.__init__"]], "call() (merlin.models.tf.broadcasttosequence method)": [[82, "merlin.models.tf.BroadcastToSequence.call"]], "compute_mask() (merlin.models.tf.broadcasttosequence method)": [[82, "merlin.models.tf.BroadcastToSequence.compute_mask"]], "compute_output_shape() (merlin.models.tf.broadcasttosequence method)": [[82, "merlin.models.tf.BroadcastToSequence.compute_output_shape"]], "from_config() (merlin.models.tf.broadcasttosequence class method)": [[82, "merlin.models.tf.BroadcastToSequence.from_config"]], "get_config() (merlin.models.tf.broadcasttosequence method)": [[82, "merlin.models.tf.BroadcastToSequence.get_config"]], "cgcblock (class in merlin.models.tf)": [[83, "merlin.models.tf.CGCBlock"]], "__init__() (merlin.models.tf.cgcblock method)": [[83, "merlin.models.tf.CGCBlock.__init__"]], "call() (merlin.models.tf.cgcblock method)": [[83, "merlin.models.tf.CGCBlock.call"]], "compute_call_output_shape() (merlin.models.tf.cgcblock method)": [[83, "merlin.models.tf.CGCBlock.compute_call_output_shape"]], "from_config() (merlin.models.tf.cgcblock class method)": [[83, "merlin.models.tf.CGCBlock.from_config"]], "get_config() (merlin.models.tf.cgcblock method)": [[83, "merlin.models.tf.CGCBlock.get_config"]], "categoricaloutput (class in merlin.models.tf)": [[84, "merlin.models.tf.CategoricalOutput"]], "__init__() (merlin.models.tf.categoricaloutput method)": [[84, "merlin.models.tf.CategoricalOutput.__init__"]], "get_config() (merlin.models.tf.categoricaloutput method)": [[84, "merlin.models.tf.CategoricalOutput.get_config"]], "to_dataset() (merlin.models.tf.categoricaloutput method)": [[84, "merlin.models.tf.CategoricalOutput.to_dataset"]], "categoryencoding (class in merlin.models.tf)": [[85, "merlin.models.tf.CategoryEncoding"]], "requires_schema (merlin.models.tf.categoryencoding attribute)": [[85, "merlin.models.tf.CategoryEncoding.REQUIRES_SCHEMA"]], "__init__() (merlin.models.tf.categoryencoding method)": [[85, "merlin.models.tf.CategoryEncoding.__init__"]], "call() (merlin.models.tf.categoryencoding method)": [[85, "merlin.models.tf.CategoryEncoding.call"]], "compute_output_shape() (merlin.models.tf.categoryencoding method)": [[85, "merlin.models.tf.CategoryEncoding.compute_output_shape"]], "get_config() (merlin.models.tf.categoryencoding method)": [[85, "merlin.models.tf.CategoryEncoding.get_config"]], "columnbasedsampleweight (class in merlin.models.tf)": [[86, "merlin.models.tf.ColumnBasedSampleWeight"]], "__init__() (merlin.models.tf.columnbasedsampleweight method)": [[86, "merlin.models.tf.ColumnBasedSampleWeight.__init__"]], "call() (merlin.models.tf.columnbasedsampleweight method)": [[86, "merlin.models.tf.ColumnBasedSampleWeight.call"]], "compute_output_shape() (merlin.models.tf.columnbasedsampleweight method)": [[86, "merlin.models.tf.ColumnBasedSampleWeight.compute_output_shape"]], "get_config() (merlin.models.tf.columnbasedsampleweight method)": [[86, "merlin.models.tf.ColumnBasedSampleWeight.get_config"]], "cond (class in merlin.models.tf)": [[87, "merlin.models.tf.Cond"]], "__init__() (merlin.models.tf.cond method)": [[87, "merlin.models.tf.Cond.__init__"]], "build() (merlin.models.tf.cond method)": [[87, "merlin.models.tf.Cond.build"]], "call() (merlin.models.tf.cond method)": [[87, "merlin.models.tf.Cond.call"]], "compute_output_shape() (merlin.models.tf.cond method)": [[87, "merlin.models.tf.Cond.compute_output_shape"]], "from_config() (merlin.models.tf.cond class method)": [[87, "merlin.models.tf.Cond.from_config"]], "get_config() (merlin.models.tf.cond method)": [[87, "merlin.models.tf.Cond.get_config"]], "continuous (class in merlin.models.tf)": [[88, "merlin.models.tf.Continuous"]], "__init__() (merlin.models.tf.continuous method)": [[88, "merlin.models.tf.Continuous.__init__"]], "continuousembedding() (in module merlin.models.tf)": [[89, "merlin.models.tf.ContinuousEmbedding"]], "continuousfeatures (class in merlin.models.tf)": [[90, "merlin.models.tf.ContinuousFeatures"]], "__init__() (merlin.models.tf.continuousfeatures method)": [[90, "merlin.models.tf.ContinuousFeatures.__init__"]], "call() (merlin.models.tf.continuousfeatures method)": [[90, "merlin.models.tf.ContinuousFeatures.call"]], "compute_call_output_shape() (merlin.models.tf.continuousfeatures method)": [[90, "merlin.models.tf.ContinuousFeatures.compute_call_output_shape"]], "from_features() (merlin.models.tf.continuousfeatures class method)": [[90, "merlin.models.tf.ContinuousFeatures.from_features"]], "get_config() (merlin.models.tf.continuousfeatures method)": [[90, "merlin.models.tf.ContinuousFeatures.get_config"]], "repr_extra() (merlin.models.tf.continuousfeatures method)": [[90, "merlin.models.tf.ContinuousFeatures.repr_extra"]], "repr_ignore() (merlin.models.tf.continuousfeatures method)": [[90, "merlin.models.tf.ContinuousFeatures.repr_ignore"]], "continuousprojection() (in module merlin.models.tf)": [[91, "merlin.models.tf.ContinuousProjection"]], "contrastiveoutput (class in merlin.models.tf)": [[92, "merlin.models.tf.ContrastiveOutput"]], "__init__() (merlin.models.tf.contrastiveoutput method)": [[92, "merlin.models.tf.ContrastiveOutput.__init__"]], "build() (merlin.models.tf.contrastiveoutput method)": [[92, "merlin.models.tf.ContrastiveOutput.build"]], "call() (merlin.models.tf.contrastiveoutput method)": [[92, "merlin.models.tf.ContrastiveOutput.call"]], "call_contrastive() (merlin.models.tf.contrastiveoutput method)": [[92, "merlin.models.tf.ContrastiveOutput.call_contrastive"]], "embedding_lookup() (merlin.models.tf.contrastiveoutput method)": [[92, "merlin.models.tf.ContrastiveOutput.embedding_lookup"]], "from_config() (merlin.models.tf.contrastiveoutput class method)": [[92, "merlin.models.tf.ContrastiveOutput.from_config"]], "get_config() (merlin.models.tf.contrastiveoutput method)": [[92, "merlin.models.tf.ContrastiveOutput.get_config"]], "has_candidate_weights (merlin.models.tf.contrastiveoutput property)": [[92, "merlin.models.tf.ContrastiveOutput.has_candidate_weights"]], "keys (merlin.models.tf.contrastiveoutput property)": [[92, "merlin.models.tf.ContrastiveOutput.keys"]], "outputs() (merlin.models.tf.contrastiveoutput method)": [[92, "merlin.models.tf.ContrastiveOutput.outputs"]], "sample_negatives() (merlin.models.tf.contrastiveoutput method)": [[92, "merlin.models.tf.ContrastiveOutput.sample_negatives"]], "set_negative_samplers() (merlin.models.tf.contrastiveoutput method)": [[92, "merlin.models.tf.ContrastiveOutput.set_negative_samplers"]], "to_dataset() (merlin.models.tf.contrastiveoutput method)": [[92, "merlin.models.tf.ContrastiveOutput.to_dataset"]], "crossblock() (in module merlin.models.tf)": [[93, "merlin.models.tf.CrossBlock"]], "dcnmodel() (in module merlin.models.tf)": [[94, "merlin.models.tf.DCNModel"]], "dlrmblock() (in module merlin.models.tf)": [[95, "merlin.models.tf.DLRMBlock"]], "dlrmmodel() (in module merlin.models.tf)": [[96, "merlin.models.tf.DLRMModel"]], "deepfmmodel() (in module merlin.models.tf)": [[97, "merlin.models.tf.DeepFMModel"]], "denseresidualblock() (in module merlin.models.tf)": [[98, "merlin.models.tf.DenseResidualBlock"]], "dotproductinteraction (class in merlin.models.tf)": [[99, "merlin.models.tf.DotProductInteraction"]], "__init__() (merlin.models.tf.dotproductinteraction method)": [[99, "merlin.models.tf.DotProductInteraction.__init__"]], "build() (merlin.models.tf.dotproductinteraction method)": [[99, "merlin.models.tf.DotProductInteraction.build"]], "call() (merlin.models.tf.dotproductinteraction method)": [[99, "merlin.models.tf.DotProductInteraction.call"]], "compute_output_shape() (merlin.models.tf.dotproductinteraction method)": [[99, "merlin.models.tf.DotProductInteraction.compute_output_shape"]], "get_config() (merlin.models.tf.dotproductinteraction method)": [[99, "merlin.models.tf.DotProductInteraction.get_config"]], "dualencoderblock (class in merlin.models.tf)": [[100, "merlin.models.tf.DualEncoderBlock"]], "__init__() (merlin.models.tf.dualencoderblock method)": [[100, "merlin.models.tf.DualEncoderBlock.__init__"]], "from_config() (merlin.models.tf.dualencoderblock class method)": [[100, "merlin.models.tf.DualEncoderBlock.from_config"]], "item_block() (merlin.models.tf.dualencoderblock method)": [[100, "merlin.models.tf.DualEncoderBlock.item_block"]], "query_block() (merlin.models.tf.dualencoderblock method)": [[100, "merlin.models.tf.DualEncoderBlock.query_block"]], "embeddingencoder (class in merlin.models.tf)": [[101, "merlin.models.tf.EmbeddingEncoder"]], "__init__() (merlin.models.tf.embeddingencoder method)": [[101, "merlin.models.tf.EmbeddingEncoder.__init__"]], "to_dataset() (merlin.models.tf.embeddingencoder method)": [[101, "merlin.models.tf.EmbeddingEncoder.to_dataset"]], "embeddingtable (class in merlin.models.tf)": [[102, "merlin.models.tf.EmbeddingTable"]], "__init__() (merlin.models.tf.embeddingtable method)": [[102, "merlin.models.tf.EmbeddingTable.__init__"]], "build() (merlin.models.tf.embeddingtable method)": [[102, "merlin.models.tf.EmbeddingTable.build"]], "call() (merlin.models.tf.embeddingtable method)": [[102, "merlin.models.tf.EmbeddingTable.call"]], "compute_call_output_shape() (merlin.models.tf.embeddingtable method)": [[102, "merlin.models.tf.EmbeddingTable.compute_call_output_shape"]], "compute_output_shape() (merlin.models.tf.embeddingtable method)": [[102, "merlin.models.tf.EmbeddingTable.compute_output_shape"]], "from_config() (merlin.models.tf.embeddingtable class method)": [[102, "merlin.models.tf.EmbeddingTable.from_config"]], "from_dataset() (merlin.models.tf.embeddingtable class method)": [[102, "merlin.models.tf.EmbeddingTable.from_dataset"]], "from_pretrained() (merlin.models.tf.embeddingtable class method)": [[102, "merlin.models.tf.EmbeddingTable.from_pretrained"]], "get_config() (merlin.models.tf.embeddingtable method)": [[102, "merlin.models.tf.EmbeddingTable.get_config"]], "select_by_tag() (merlin.models.tf.embeddingtable method)": [[102, "merlin.models.tf.EmbeddingTable.select_by_tag"]], "to_dataset() (merlin.models.tf.embeddingtable method)": [[102, "merlin.models.tf.EmbeddingTable.to_dataset"]], "to_df() (merlin.models.tf.embeddingtable method)": [[102, "merlin.models.tf.EmbeddingTable.to_df"]], "embeddings() (in module merlin.models.tf)": [[103, "merlin.models.tf.Embeddings"]], "encoder (class in merlin.models.tf)": [[104, "merlin.models.tf.Encoder"]], "__init__() (merlin.models.tf.encoder method)": [[104, "merlin.models.tf.Encoder.__init__"]], "batch_predict() (merlin.models.tf.encoder method)": [[104, "merlin.models.tf.Encoder.batch_predict"]], "build() (merlin.models.tf.encoder method)": [[104, "merlin.models.tf.Encoder.build"]], "call() (merlin.models.tf.encoder method)": [[104, "merlin.models.tf.Encoder.call"]], "compute_output_shape() (merlin.models.tf.encoder method)": [[104, "merlin.models.tf.Encoder.compute_output_shape"]], "encode() (merlin.models.tf.encoder method)": [[104, "merlin.models.tf.Encoder.encode"]], "first (merlin.models.tf.encoder property)": [[104, "merlin.models.tf.Encoder.first"]], "fit() (merlin.models.tf.encoder method)": [[104, "merlin.models.tf.Encoder.fit"]], "from_config() (merlin.models.tf.encoder class method)": [[104, "merlin.models.tf.Encoder.from_config"]], "get_config() (merlin.models.tf.encoder method)": [[104, "merlin.models.tf.Encoder.get_config"]], "has_schema (merlin.models.tf.encoder property)": [[104, "merlin.models.tf.Encoder.has_schema"]], "last (merlin.models.tf.encoder property)": [[104, "merlin.models.tf.Encoder.last"]], "save() (merlin.models.tf.encoder method)": [[104, "merlin.models.tf.Encoder.save"]], "schema (merlin.models.tf.encoder property)": [[104, "merlin.models.tf.Encoder.schema"]], "to_call (merlin.models.tf.encoder property)": [[104, "merlin.models.tf.Encoder.to_call"]], "train_step() (merlin.models.tf.encoder method)": [[104, "merlin.models.tf.Encoder.train_step"]], "expanddims (class in merlin.models.tf)": [[105, "merlin.models.tf.ExpandDims"]], "__init__() (merlin.models.tf.expanddims method)": [[105, "merlin.models.tf.ExpandDims.__init__"]], "call() (merlin.models.tf.expanddims method)": [[105, "merlin.models.tf.ExpandDims.call"]], "compute_output_shape() (merlin.models.tf.expanddims method)": [[105, "merlin.models.tf.ExpandDims.compute_output_shape"]], "fmblock() (in module merlin.models.tf)": [[106, "merlin.models.tf.FMBlock"]], "fmpairwiseinteraction (class in merlin.models.tf)": [[107, "merlin.models.tf.FMPairwiseInteraction"]], "__init__() (merlin.models.tf.fmpairwiseinteraction method)": [[107, "merlin.models.tf.FMPairwiseInteraction.__init__"]], "call() (merlin.models.tf.fmpairwiseinteraction method)": [[107, "merlin.models.tf.FMPairwiseInteraction.call"]], "compute_output_shape() (merlin.models.tf.fmpairwiseinteraction method)": [[107, "merlin.models.tf.FMPairwiseInteraction.compute_output_shape"]], "filter (class in merlin.models.tf)": [[108, "merlin.models.tf.Filter"]], "__init__() (merlin.models.tf.filter method)": [[108, "merlin.models.tf.Filter.__init__"]], "call() (merlin.models.tf.filter method)": [[108, "merlin.models.tf.Filter.call"]], "check_feature() (merlin.models.tf.filter method)": [[108, "merlin.models.tf.Filter.check_feature"]], "compute_call_output_shape() (merlin.models.tf.filter method)": [[108, "merlin.models.tf.Filter.compute_call_output_shape"]], "get_config() (merlin.models.tf.filter method)": [[108, "merlin.models.tf.Filter.get_config"]], "select_by_tag() (merlin.models.tf.filter method)": [[108, "merlin.models.tf.Filter.select_by_tag"]], "set_schema() (merlin.models.tf.filter method)": [[108, "merlin.models.tf.Filter.set_schema"]], "hashedcross (class in merlin.models.tf)": [[109, "merlin.models.tf.HashedCross"]], "__init__() (merlin.models.tf.hashedcross method)": [[109, "merlin.models.tf.HashedCross.__init__"]], "call() (merlin.models.tf.hashedcross method)": [[109, "merlin.models.tf.HashedCross.call"]], "compute_output_shape() (merlin.models.tf.hashedcross method)": [[109, "merlin.models.tf.HashedCross.compute_output_shape"]], "get_config() (merlin.models.tf.hashedcross method)": [[109, "merlin.models.tf.HashedCross.get_config"]], "hashedcrossall() (in module merlin.models.tf)": [[110, "merlin.models.tf.HashedCrossAll"]], "inbatchsampler (class in merlin.models.tf)": [[111, "merlin.models.tf.InBatchSampler"]], "__init__() (merlin.models.tf.inbatchsampler method)": [[111, "merlin.models.tf.InBatchSampler.__init__"]], "add() (merlin.models.tf.inbatchsampler method)": [[111, "merlin.models.tf.InBatchSampler.add"]], "batch_size (merlin.models.tf.inbatchsampler property)": [[111, "merlin.models.tf.InBatchSampler.batch_size"]], "build() (merlin.models.tf.inbatchsampler method)": [[111, "merlin.models.tf.InBatchSampler.build"]], "call() (merlin.models.tf.inbatchsampler method)": [[111, "merlin.models.tf.InBatchSampler.call"]], "get_config() (merlin.models.tf.inbatchsampler method)": [[111, "merlin.models.tf.InBatchSampler.get_config"]], "sample() (merlin.models.tf.inbatchsampler method)": [[111, "merlin.models.tf.InBatchSampler.sample"]], "set_batch_size() (merlin.models.tf.inbatchsampler method)": [[111, "merlin.models.tf.InBatchSampler.set_batch_size"]], "inputblock() (in module merlin.models.tf)": [[112, "merlin.models.tf.InputBlock"]], "inputblockv2() (in module merlin.models.tf)": [[113, "merlin.models.tf.InputBlockV2"]], "itemretrievalscorer (class in merlin.models.tf)": [[114, "merlin.models.tf.ItemRetrievalScorer"]], "__init__() (merlin.models.tf.itemretrievalscorer method)": [[114, "merlin.models.tf.ItemRetrievalScorer.__init__"]], "build() (merlin.models.tf.itemretrievalscorer method)": [[114, "merlin.models.tf.ItemRetrievalScorer.build"]], "call() (merlin.models.tf.itemretrievalscorer method)": [[114, "merlin.models.tf.ItemRetrievalScorer.call"]], "call_outputs() (merlin.models.tf.itemretrievalscorer method)": [[114, "merlin.models.tf.ItemRetrievalScorer.call_outputs"]], "from_config() (merlin.models.tf.itemretrievalscorer class method)": [[114, "merlin.models.tf.ItemRetrievalScorer.from_config"]], "get_config() (merlin.models.tf.itemretrievalscorer method)": [[114, "merlin.models.tf.ItemRetrievalScorer.get_config"]], "set_required_features() (merlin.models.tf.itemretrievalscorer method)": [[114, "merlin.models.tf.ItemRetrievalScorer.set_required_features"]], "default_loss (merlin.models.tf.itemretrievaltask attribute)": [[115, "merlin.models.tf.ItemRetrievalTask.DEFAULT_LOSS"]], "default_metrics (merlin.models.tf.itemretrievaltask attribute)": [[115, "merlin.models.tf.ItemRetrievalTask.DEFAULT_METRICS"]], "itemretrievaltask (class in merlin.models.tf)": [[115, "merlin.models.tf.ItemRetrievalTask"]], "__init__() (merlin.models.tf.itemretrievaltask method)": [[115, "merlin.models.tf.ItemRetrievalTask.__init__"]], "call() (merlin.models.tf.itemretrievaltask method)": [[115, "merlin.models.tf.ItemRetrievalTask.call"]], "from_config() (merlin.models.tf.itemretrievaltask class method)": [[115, "merlin.models.tf.ItemRetrievalTask.from_config"]], "get_config() (merlin.models.tf.itemretrievaltask method)": [[115, "merlin.models.tf.ItemRetrievalTask.get_config"]], "retrieval_scorer (merlin.models.tf.itemretrievaltask property)": [[115, "merlin.models.tf.ItemRetrievalTask.retrieval_scorer"]], "set_retrieval_cache_query() (merlin.models.tf.itemretrievaltask method)": [[115, "merlin.models.tf.ItemRetrievalTask.set_retrieval_cache_query"]], "itemsampler (class in merlin.models.tf)": [[116, "merlin.models.tf.ItemSampler"]], "__init__() (merlin.models.tf.itemsampler method)": [[116, "merlin.models.tf.ItemSampler.__init__"]], "add() (merlin.models.tf.itemsampler method)": [[116, "merlin.models.tf.ItemSampler.add"]], "max_num_samples (merlin.models.tf.itemsampler property)": [[116, "merlin.models.tf.ItemSampler.max_num_samples"]], "required_features (merlin.models.tf.itemsampler property)": [[116, "merlin.models.tf.ItemSampler.required_features"]], "sample() (merlin.models.tf.itemsampler method)": [[116, "merlin.models.tf.ItemSampler.sample"]], "set_max_num_samples() (merlin.models.tf.itemsampler method)": [[116, "merlin.models.tf.ItemSampler.set_max_num_samples"]], "l2norm (class in merlin.models.tf)": [[117, "merlin.models.tf.L2Norm"]], "__init__() (merlin.models.tf.l2norm method)": [[117, "merlin.models.tf.L2Norm.__init__"]], "call() (merlin.models.tf.l2norm method)": [[117, "merlin.models.tf.L2Norm.call"]], "compute_output_shape() (merlin.models.tf.l2norm method)": [[117, "merlin.models.tf.L2Norm.compute_output_shape"]], "lazyadam (class in merlin.models.tf)": [[118, "merlin.models.tf.LazyAdam"]], "__init__() (merlin.models.tf.lazyadam method)": [[118, "merlin.models.tf.LazyAdam.__init__"]], "get_weights() (merlin.models.tf.lazyadam method)": [[118, "merlin.models.tf.LazyAdam.get_weights"]], "loader (class in merlin.models.tf)": [[119, "merlin.models.tf.Loader"]], "__init__() (merlin.models.tf.loader method)": [[119, "merlin.models.tf.Loader.__init__"]], "has_transforms (merlin.models.tf.loader property)": [[119, "merlin.models.tf.Loader.has_transforms"]], "output_schema (merlin.models.tf.loader property)": [[119, "merlin.models.tf.Loader.output_schema"]], "mlpblock() (in module merlin.models.tf)": [[120, "merlin.models.tf.MLPBlock"]], "mmoeblock() (in module merlin.models.tf)": [[121, "merlin.models.tf.MMOEBlock"]], "mrrat (class in merlin.models.tf)": [[122, "merlin.models.tf.MRRAt"]], "__init__() (merlin.models.tf.mrrat method)": [[122, "merlin.models.tf.MRRAt.__init__"]], "mapvalues (class in merlin.models.tf)": [[123, "merlin.models.tf.MapValues"]], "__init__() (merlin.models.tf.mapvalues method)": [[123, "merlin.models.tf.MapValues.__init__"]], "call() (merlin.models.tf.mapvalues method)": [[123, "merlin.models.tf.MapValues.call"]], "compute_output_shape() (merlin.models.tf.mapvalues method)": [[123, "merlin.models.tf.MapValues.compute_output_shape"]], "from_config() (merlin.models.tf.mapvalues class method)": [[123, "merlin.models.tf.MapValues.from_config"]], "get_config() (merlin.models.tf.mapvalues method)": [[123, "merlin.models.tf.MapValues.get_config"]], "matrixfactorizationblock() (in module merlin.models.tf)": [[124, "merlin.models.tf.MatrixFactorizationBlock"]], "matrixfactorizationmodel() (in module merlin.models.tf)": [[125, "merlin.models.tf.MatrixFactorizationModel"]], "matrixfactorizationmodelv2() (in module merlin.models.tf)": [[126, "merlin.models.tf.MatrixFactorizationModelV2"]], "modeloutput (class in merlin.models.tf)": [[127, "merlin.models.tf.ModelOutput"]], "__init__() (merlin.models.tf.modeloutput method)": [[127, "merlin.models.tf.ModelOutput.__init__"]], "build() (merlin.models.tf.modeloutput method)": [[127, "merlin.models.tf.ModelOutput.build"]], "call() (merlin.models.tf.modeloutput method)": [[127, "merlin.models.tf.ModelOutput.call"]], "compute_output_shape() (merlin.models.tf.modeloutput method)": [[127, "merlin.models.tf.ModelOutput.compute_output_shape"]], "create_default_metrics() (merlin.models.tf.modeloutput method)": [[127, "merlin.models.tf.ModelOutput.create_default_metrics"]], "from_config() (merlin.models.tf.modeloutput class method)": [[127, "merlin.models.tf.ModelOutput.from_config"]], "get_config() (merlin.models.tf.modeloutput method)": [[127, "merlin.models.tf.ModelOutput.get_config"]], "get_task_name() (merlin.models.tf.modeloutput class method)": [[127, "merlin.models.tf.ModelOutput.get_task_name"]], "task_name (merlin.models.tf.modeloutput property)": [[127, "merlin.models.tf.ModelOutput.task_name"]], "default_loss (merlin.models.tf.multiclassclassificationtask attribute)": [[128, "merlin.models.tf.MultiClassClassificationTask.DEFAULT_LOSS"]], "default_metrics (merlin.models.tf.multiclassclassificationtask attribute)": [[128, "merlin.models.tf.MultiClassClassificationTask.DEFAULT_METRICS"]], "multiclassclassificationtask (class in merlin.models.tf)": [[128, "merlin.models.tf.MultiClassClassificationTask"]], "__init__() (merlin.models.tf.multiclassclassificationtask method)": [[128, "merlin.models.tf.MultiClassClassificationTask.__init__"]], "call() (merlin.models.tf.multiclassclassificationtask method)": [[128, "merlin.models.tf.MultiClassClassificationTask.call"]], "from_schema() (merlin.models.tf.multiclassclassificationtask class method)": [[128, "merlin.models.tf.MultiClassClassificationTask.from_schema"]], "multioptimizer (class in merlin.models.tf)": [[129, "merlin.models.tf.MultiOptimizer"]], "__init__() (merlin.models.tf.multioptimizer method)": [[129, "merlin.models.tf.MultiOptimizer.__init__"]], "add() (merlin.models.tf.multioptimizer method)": [[129, "merlin.models.tf.MultiOptimizer.add"]], "apply_gradients() (merlin.models.tf.multioptimizer method)": [[129, "merlin.models.tf.MultiOptimizer.apply_gradients"]], "from_config() (merlin.models.tf.multioptimizer class method)": [[129, "merlin.models.tf.MultiOptimizer.from_config"]], "get_config() (merlin.models.tf.multioptimizer method)": [[129, "merlin.models.tf.MultiOptimizer.get_config"]], "iterations (merlin.models.tf.multioptimizer property)": [[129, "merlin.models.tf.MultiOptimizer.iterations"]], "optimizers (merlin.models.tf.multioptimizer property)": [[129, "merlin.models.tf.MultiOptimizer.optimizers"]], "update() (merlin.models.tf.multioptimizer method)": [[129, "merlin.models.tf.MultiOptimizer.update"]], "variables() (merlin.models.tf.multioptimizer method)": [[129, "merlin.models.tf.MultiOptimizer.variables"]], "weights (merlin.models.tf.multioptimizer property)": [[129, "merlin.models.tf.MultiOptimizer.weights"]], "ndcgat (class in merlin.models.tf)": [[130, "merlin.models.tf.NDCGAt"]], "__init__() (merlin.models.tf.ndcgat method)": [[130, "merlin.models.tf.NDCGAt.__init__"]], "optimizerblocks (class in merlin.models.tf)": [[131, "merlin.models.tf.OptimizerBlocks"]], "__init__() (merlin.models.tf.optimizerblocks method)": [[131, "merlin.models.tf.OptimizerBlocks.__init__"]], "blocks (merlin.models.tf.optimizerblocks attribute)": [[131, "merlin.models.tf.OptimizerBlocks.blocks"]], "from_config() (merlin.models.tf.optimizerblocks class method)": [[131, "merlin.models.tf.OptimizerBlocks.from_config"]], "get_config() (merlin.models.tf.optimizerblocks method)": [[131, "merlin.models.tf.OptimizerBlocks.get_config"]], "optimizer (merlin.models.tf.optimizerblocks attribute)": [[131, "merlin.models.tf.OptimizerBlocks.optimizer"]], "outputblock() (in module merlin.models.tf)": [[132, "merlin.models.tf.OutputBlock"]], "pleblock() (in module merlin.models.tf)": [[133, "merlin.models.tf.PLEBlock"]], "parallelblock (class in merlin.models.tf)": [[134, "merlin.models.tf.ParallelBlock"]], "__init__() (merlin.models.tf.parallelblock method)": [[134, "merlin.models.tf.ParallelBlock.__init__"]], "add_branch() (merlin.models.tf.parallelblock method)": [[134, "merlin.models.tf.ParallelBlock.add_branch"]], "apply_to_branch() (merlin.models.tf.parallelblock method)": [[134, "merlin.models.tf.ParallelBlock.apply_to_branch"]], "build() (merlin.models.tf.parallelblock method)": [[134, "merlin.models.tf.ParallelBlock.build"]], "call() (merlin.models.tf.parallelblock method)": [[134, "merlin.models.tf.ParallelBlock.call"]], "compute_call_output_shape() (merlin.models.tf.parallelblock method)": [[134, "merlin.models.tf.ParallelBlock.compute_call_output_shape"]], "first (merlin.models.tf.parallelblock property)": [[134, "merlin.models.tf.ParallelBlock.first"]], "from_config() (merlin.models.tf.parallelblock class method)": [[134, "merlin.models.tf.ParallelBlock.from_config"]], "get_config() (merlin.models.tf.parallelblock method)": [[134, "merlin.models.tf.ParallelBlock.get_config"]], "layers (merlin.models.tf.parallelblock property)": [[134, "merlin.models.tf.ParallelBlock.layers"]], "parallel_dict (merlin.models.tf.parallelblock property)": [[134, "merlin.models.tf.ParallelBlock.parallel_dict"]], "parallel_values (merlin.models.tf.parallelblock property)": [[134, "merlin.models.tf.ParallelBlock.parallel_values"]], "parse_config() (merlin.models.tf.parallelblock class method)": [[134, "merlin.models.tf.ParallelBlock.parse_config"]], "schema (merlin.models.tf.parallelblock property)": [[134, "merlin.models.tf.ParallelBlock.schema"]], "select_by_name() (merlin.models.tf.parallelblock method)": [[134, "merlin.models.tf.ParallelBlock.select_by_name"]], "select_by_names() (merlin.models.tf.parallelblock method)": [[134, "merlin.models.tf.ParallelBlock.select_by_names"]], "select_by_tag() (merlin.models.tf.parallelblock method)": [[134, "merlin.models.tf.ParallelBlock.select_by_tag"]], "parallelpredictionblock (class in merlin.models.tf)": [[135, "merlin.models.tf.ParallelPredictionBlock"]], "__init__() (merlin.models.tf.parallelpredictionblock method)": [[135, "merlin.models.tf.ParallelPredictionBlock.__init__"]], "add_task() (merlin.models.tf.parallelpredictionblock method)": [[135, "merlin.models.tf.ParallelPredictionBlock.add_task"]], "call() (merlin.models.tf.parallelpredictionblock method)": [[135, "merlin.models.tf.ParallelPredictionBlock.call"]], "compute_call_output_shape() (merlin.models.tf.parallelpredictionblock method)": [[135, "merlin.models.tf.ParallelPredictionBlock.compute_call_output_shape"]], "from_config() (merlin.models.tf.parallelpredictionblock class method)": [[135, "merlin.models.tf.ParallelPredictionBlock.from_config"]], "from_schema() (merlin.models.tf.parallelpredictionblock class method)": [[135, "merlin.models.tf.ParallelPredictionBlock.from_schema"]], "get_config() (merlin.models.tf.parallelpredictionblock method)": [[135, "merlin.models.tf.ParallelPredictionBlock.get_config"]], "get_tasks_from_schema() (merlin.models.tf.parallelpredictionblock class method)": [[135, "merlin.models.tf.ParallelPredictionBlock.get_tasks_from_schema"]], "parallel_layers (merlin.models.tf.parallelpredictionblock attribute)": [[135, "merlin.models.tf.ParallelPredictionBlock.parallel_layers"]], "pop_labels() (merlin.models.tf.parallelpredictionblock method)": [[135, "merlin.models.tf.ParallelPredictionBlock.pop_labels"]], "repr_ignore() (merlin.models.tf.parallelpredictionblock method)": [[135, "merlin.models.tf.ParallelPredictionBlock.repr_ignore"]], "task_blocks (merlin.models.tf.parallelpredictionblock property)": [[135, "merlin.models.tf.ParallelPredictionBlock.task_blocks"]], "task_names (merlin.models.tf.parallelpredictionblock property)": [[135, "merlin.models.tf.ParallelPredictionBlock.task_names"]], "task_names_from_schema() (merlin.models.tf.parallelpredictionblock class method)": [[135, "merlin.models.tf.ParallelPredictionBlock.task_names_from_schema"]], "popularitybasedsampler (class in merlin.models.tf)": [[136, "merlin.models.tf.PopularityBasedSampler"]], "__init__() (merlin.models.tf.popularitybasedsampler method)": [[136, "merlin.models.tf.PopularityBasedSampler.__init__"]], "add() (merlin.models.tf.popularitybasedsampler method)": [[136, "merlin.models.tf.PopularityBasedSampler.add"]], "call() (merlin.models.tf.popularitybasedsampler method)": [[136, "merlin.models.tf.PopularityBasedSampler.call"]], "get_config() (merlin.models.tf.popularitybasedsampler method)": [[136, "merlin.models.tf.PopularityBasedSampler.get_config"]], "get_distribution_probs() (merlin.models.tf.popularitybasedsampler method)": [[136, "merlin.models.tf.PopularityBasedSampler.get_distribution_probs"]], "sample() (merlin.models.tf.popularitybasedsampler method)": [[136, "merlin.models.tf.PopularityBasedSampler.sample"]], "precisionat (class in merlin.models.tf)": [[137, "merlin.models.tf.PrecisionAt"]], "__init__() (merlin.models.tf.precisionat method)": [[137, "merlin.models.tf.PrecisionAt.__init__"]], "predictiontask (class in merlin.models.tf)": [[138, "merlin.models.tf.PredictionTask"]], "__init__() (merlin.models.tf.predictiontask method)": [[138, "merlin.models.tf.PredictionTask.__init__"]], "build() (merlin.models.tf.predictiontask method)": [[138, "merlin.models.tf.PredictionTask.build"]], "build_task() (merlin.models.tf.predictiontask method)": [[138, "merlin.models.tf.PredictionTask.build_task"]], "child_name() (merlin.models.tf.predictiontask method)": [[138, "merlin.models.tf.PredictionTask.child_name"]], "compute_output_shape() (merlin.models.tf.predictiontask method)": [[138, "merlin.models.tf.PredictionTask.compute_output_shape"]], "create_default_metrics() (merlin.models.tf.predictiontask method)": [[138, "merlin.models.tf.PredictionTask.create_default_metrics"]], "from_config() (merlin.models.tf.predictiontask class method)": [[138, "merlin.models.tf.PredictionTask.from_config"]], "get_config() (merlin.models.tf.predictiontask method)": [[138, "merlin.models.tf.PredictionTask.get_config"]], "pre_call() (merlin.models.tf.predictiontask method)": [[138, "merlin.models.tf.PredictionTask.pre_call"]], "pre_eval_topk (merlin.models.tf.predictiontask property)": [[138, "merlin.models.tf.PredictionTask.pre_eval_topk"]], "pre_loss() (merlin.models.tf.predictiontask method)": [[138, "merlin.models.tf.PredictionTask.pre_loss"]], "task_name (merlin.models.tf.predictiontask property)": [[138, "merlin.models.tf.PredictionTask.task_name"]], "predictiontasks() (in module merlin.models.tf)": [[139, "merlin.models.tf.PredictionTasks"]], "preparefeatures (class in merlin.models.tf)": [[140, "merlin.models.tf.PrepareFeatures"]], "__init__() (merlin.models.tf.preparefeatures method)": [[140, "merlin.models.tf.PrepareFeatures.__init__"]], "call() (merlin.models.tf.preparefeatures method)": [[140, "merlin.models.tf.PrepareFeatures.call"]], "compute_call_output_shape() (merlin.models.tf.preparefeatures method)": [[140, "merlin.models.tf.PrepareFeatures.compute_call_output_shape"]], "compute_output_shape() (merlin.models.tf.preparefeatures method)": [[140, "merlin.models.tf.PrepareFeatures.compute_output_shape"]], "get_config() (merlin.models.tf.preparefeatures method)": [[140, "merlin.models.tf.PrepareFeatures.get_config"]], "preparelistfeatures (class in merlin.models.tf)": [[141, "merlin.models.tf.PrepareListFeatures"]], "__init__() (merlin.models.tf.preparelistfeatures method)": [[141, "merlin.models.tf.PrepareListFeatures.__init__"]], "call() (merlin.models.tf.preparelistfeatures method)": [[141, "merlin.models.tf.PrepareListFeatures.call"]], "compute_call_output_shape() (merlin.models.tf.preparelistfeatures method)": [[141, "merlin.models.tf.PrepareListFeatures.compute_call_output_shape"]], "compute_output_shape() (merlin.models.tf.preparelistfeatures method)": [[141, "merlin.models.tf.PrepareListFeatures.compute_output_shape"]], "get_config() (merlin.models.tf.preparelistfeatures method)": [[141, "merlin.models.tf.PrepareListFeatures.get_config"]], "recallat (class in merlin.models.tf)": [[142, "merlin.models.tf.RecallAt"]], "__init__() (merlin.models.tf.recallat method)": [[142, "merlin.models.tf.RecallAt.__init__"]], "regressionoutput (class in merlin.models.tf)": [[143, "merlin.models.tf.RegressionOutput"]], "__init__() (merlin.models.tf.regressionoutput method)": [[143, "merlin.models.tf.RegressionOutput.__init__"]], "default_loss (merlin.models.tf.regressiontask attribute)": [[144, "merlin.models.tf.RegressionTask.DEFAULT_LOSS"]], "default_metrics (merlin.models.tf.regressiontask attribute)": [[144, "merlin.models.tf.RegressionTask.DEFAULT_METRICS"]], "regressiontask (class in merlin.models.tf)": [[144, "merlin.models.tf.RegressionTask"]], "__init__() (merlin.models.tf.regressiontask method)": [[144, "merlin.models.tf.RegressionTask.__init__"]], "call() (merlin.models.tf.regressiontask method)": [[144, "merlin.models.tf.RegressionTask.call"]], "compute_output_shape() (merlin.models.tf.regressiontask method)": [[144, "merlin.models.tf.RegressionTask.compute_output_shape"]], "from_config() (merlin.models.tf.regressiontask class method)": [[144, "merlin.models.tf.RegressionTask.from_config"]], "get_config() (merlin.models.tf.regressiontask method)": [[144, "merlin.models.tf.RegressionTask.get_config"]], "replacemaskedembeddings (class in merlin.models.tf)": [[145, "merlin.models.tf.ReplaceMaskedEmbeddings"]], "__init__() (merlin.models.tf.replacemaskedembeddings method)": [[145, "merlin.models.tf.ReplaceMaskedEmbeddings.__init__"]], "build() (merlin.models.tf.replacemaskedembeddings method)": [[145, "merlin.models.tf.ReplaceMaskedEmbeddings.build"]], "call() (merlin.models.tf.replacemaskedembeddings method)": [[145, "merlin.models.tf.ReplaceMaskedEmbeddings.call"]], "residualblock (class in merlin.models.tf)": [[146, "merlin.models.tf.ResidualBlock"]], "__init__() (merlin.models.tf.residualblock method)": [[146, "merlin.models.tf.ResidualBlock.__init__"]], "parallel_layers (merlin.models.tf.residualblock attribute)": [[146, "merlin.models.tf.ResidualBlock.parallel_layers"]], "retrievalmodelv2 (class in merlin.models.tf)": [[147, "merlin.models.tf.RetrievalModelV2"]], "__init__() (merlin.models.tf.retrievalmodelv2 method)": [[147, "merlin.models.tf.RetrievalModelV2.__init__"]], "candidate_embeddings() (merlin.models.tf.retrievalmodelv2 method)": [[147, "merlin.models.tf.RetrievalModelV2.candidate_embeddings"]], "candidate_encoder (merlin.models.tf.retrievalmodelv2 property)": [[147, "merlin.models.tf.RetrievalModelV2.candidate_encoder"]], "encoder (merlin.models.tf.retrievalmodelv2 property)": [[147, "merlin.models.tf.RetrievalModelV2.encoder"]], "from_config() (merlin.models.tf.retrievalmodelv2 class method)": [[147, "merlin.models.tf.RetrievalModelV2.from_config"]], "get_config() (merlin.models.tf.retrievalmodelv2 method)": [[147, "merlin.models.tf.RetrievalModelV2.get_config"]], "has_candidate_encoder (merlin.models.tf.retrievalmodelv2 property)": [[147, "merlin.models.tf.RetrievalModelV2.has_candidate_encoder"]], "query_embeddings() (merlin.models.tf.retrievalmodelv2 method)": [[147, "merlin.models.tf.RetrievalModelV2.query_embeddings"]], "query_encoder (merlin.models.tf.retrievalmodelv2 property)": [[147, "merlin.models.tf.RetrievalModelV2.query_encoder"]], "to_top_k_encoder() (merlin.models.tf.retrievalmodelv2 method)": [[147, "merlin.models.tf.RetrievalModelV2.to_top_k_encoder"]], "sequenceembeddingfeatures (class in merlin.models.tf)": [[148, "merlin.models.tf.SequenceEmbeddingFeatures"]], "__init__() (merlin.models.tf.sequenceembeddingfeatures method)": [[148, "merlin.models.tf.SequenceEmbeddingFeatures.__init__"]], "compute_call_output_shape() (merlin.models.tf.sequenceembeddingfeatures method)": [[148, "merlin.models.tf.SequenceEmbeddingFeatures.compute_call_output_shape"]], "compute_mask() (merlin.models.tf.sequenceembeddingfeatures method)": [[148, "merlin.models.tf.SequenceEmbeddingFeatures.compute_mask"]], "get_config() (merlin.models.tf.sequenceembeddingfeatures method)": [[148, "merlin.models.tf.SequenceEmbeddingFeatures.get_config"]], "lookup_feature() (merlin.models.tf.sequenceembeddingfeatures method)": [[148, "merlin.models.tf.SequenceEmbeddingFeatures.lookup_feature"]], "sequencemasklast (class in merlin.models.tf)": [[149, "merlin.models.tf.SequenceMaskLast"]], "__init__() (merlin.models.tf.sequencemasklast method)": [[149, "merlin.models.tf.SequenceMaskLast.__init__"]], "compute_mask() (merlin.models.tf.sequencemasklast method)": [[149, "merlin.models.tf.SequenceMaskLast.compute_mask"]], "configure_for_test() (merlin.models.tf.sequencemasklast method)": [[149, "merlin.models.tf.SequenceMaskLast.configure_for_test"]], "configure_for_train() (merlin.models.tf.sequencemasklast method)": [[149, "merlin.models.tf.SequenceMaskLast.configure_for_train"]], "from_config() (merlin.models.tf.sequencemasklast class method)": [[149, "merlin.models.tf.SequenceMaskLast.from_config"]], "sequencemaskrandom (class in merlin.models.tf)": [[150, "merlin.models.tf.SequenceMaskRandom"]], "__init__() (merlin.models.tf.sequencemaskrandom method)": [[150, "merlin.models.tf.SequenceMaskRandom.__init__"]], "compute_mask() (merlin.models.tf.sequencemaskrandom method)": [[150, "merlin.models.tf.SequenceMaskRandom.compute_mask"]], "configure_for_test() (merlin.models.tf.sequencemaskrandom method)": [[150, "merlin.models.tf.SequenceMaskRandom.configure_for_test"]], "configure_for_train() (merlin.models.tf.sequencemaskrandom method)": [[150, "merlin.models.tf.SequenceMaskRandom.configure_for_train"]], "from_config() (merlin.models.tf.sequencemaskrandom class method)": [[150, "merlin.models.tf.SequenceMaskRandom.from_config"]], "get_config() (merlin.models.tf.sequencemaskrandom method)": [[150, "merlin.models.tf.SequenceMaskRandom.get_config"]], "sequencepredictlast (class in merlin.models.tf)": [[151, "merlin.models.tf.SequencePredictLast"]], "__init__() (merlin.models.tf.sequencepredictlast method)": [[151, "merlin.models.tf.SequencePredictLast.__init__"]], "call() (merlin.models.tf.sequencepredictlast method)": [[151, "merlin.models.tf.SequencePredictLast.call"]], "compute_mask() (merlin.models.tf.sequencepredictlast method)": [[151, "merlin.models.tf.SequencePredictLast.compute_mask"]], "compute_output_shape() (merlin.models.tf.sequencepredictlast method)": [[151, "merlin.models.tf.SequencePredictLast.compute_output_shape"]], "sequencepredictnext (class in merlin.models.tf)": [[152, "merlin.models.tf.SequencePredictNext"]], "__init__() (merlin.models.tf.sequencepredictnext method)": [[152, "merlin.models.tf.SequencePredictNext.__init__"]], "call() (merlin.models.tf.sequencepredictnext method)": [[152, "merlin.models.tf.SequencePredictNext.call"]], "compute_mask() (merlin.models.tf.sequencepredictnext method)": [[152, "merlin.models.tf.SequencePredictNext.compute_mask"]], "compute_output_shape() (merlin.models.tf.sequencepredictnext method)": [[152, "merlin.models.tf.SequencePredictNext.compute_output_shape"]], "configure_for_test() (merlin.models.tf.sequencepredictnext method)": [[152, "merlin.models.tf.SequencePredictNext.configure_for_test"]], "configure_for_train() (merlin.models.tf.sequencepredictnext method)": [[152, "merlin.models.tf.SequencePredictNext.configure_for_train"]], "sequencepredictrandom (class in merlin.models.tf)": [[153, "merlin.models.tf.SequencePredictRandom"]], "__init__() (merlin.models.tf.sequencepredictrandom method)": [[153, "merlin.models.tf.SequencePredictRandom.__init__"]], "call() (merlin.models.tf.sequencepredictrandom method)": [[153, "merlin.models.tf.SequencePredictRandom.call"]], "compute_mask() (merlin.models.tf.sequencepredictrandom method)": [[153, "merlin.models.tf.SequencePredictRandom.compute_mask"]], "sequencetargetasinput (class in merlin.models.tf)": [[154, "merlin.models.tf.SequenceTargetAsInput"]], "__init__() (merlin.models.tf.sequencetargetasinput method)": [[154, "merlin.models.tf.SequenceTargetAsInput.__init__"]], "call() (merlin.models.tf.sequencetargetasinput method)": [[154, "merlin.models.tf.SequenceTargetAsInput.call"]], "from_config() (merlin.models.tf.sequencetargetasinput class method)": [[154, "merlin.models.tf.SequenceTargetAsInput.from_config"]], "sequentialblock (class in merlin.models.tf)": [[155, "merlin.models.tf.SequentialBlock"]], "__init__() (merlin.models.tf.sequentialblock method)": [[155, "merlin.models.tf.SequentialBlock.__init__"]], "build() (merlin.models.tf.sequentialblock method)": [[155, "merlin.models.tf.SequentialBlock.build"]], "call() (merlin.models.tf.sequentialblock method)": [[155, "merlin.models.tf.SequentialBlock.call"]], "call_outputs() (merlin.models.tf.sequentialblock method)": [[155, "merlin.models.tf.SequentialBlock.call_outputs"]], "compute_loss() (merlin.models.tf.sequentialblock method)": [[155, "merlin.models.tf.SequentialBlock.compute_loss"]], "compute_output_shape() (merlin.models.tf.sequentialblock method)": [[155, "merlin.models.tf.SequentialBlock.compute_output_shape"]], "compute_output_signature() (merlin.models.tf.sequentialblock method)": [[155, "merlin.models.tf.SequentialBlock.compute_output_signature"]], "filter_features (merlin.models.tf.sequentialblock property)": [[155, "merlin.models.tf.SequentialBlock.filter_features"]], "first (merlin.models.tf.sequentialblock property)": [[155, "merlin.models.tf.SequentialBlock.first"]], "from_config() (merlin.models.tf.sequentialblock class method)": [[155, "merlin.models.tf.SequentialBlock.from_config"]], "get_config() (merlin.models.tf.sequentialblock method)": [[155, "merlin.models.tf.SequentialBlock.get_config"]], "inputs (merlin.models.tf.sequentialblock property)": [[155, "merlin.models.tf.SequentialBlock.inputs"]], "is_tabular (merlin.models.tf.sequentialblock property)": [[155, "merlin.models.tf.SequentialBlock.is_tabular"]], "last (merlin.models.tf.sequentialblock property)": [[155, "merlin.models.tf.SequentialBlock.last"]], "losses (merlin.models.tf.sequentialblock property)": [[155, "merlin.models.tf.SequentialBlock.losses"]], "non_trainable_weights (merlin.models.tf.sequentialblock property)": [[155, "merlin.models.tf.SequentialBlock.non_trainable_weights"]], "regularizers (merlin.models.tf.sequentialblock property)": [[155, "merlin.models.tf.SequentialBlock.regularizers"]], "set_schema() (merlin.models.tf.sequentialblock method)": [[155, "merlin.models.tf.SequentialBlock.set_schema"]], "trainable (merlin.models.tf.sequentialblock property)": [[155, "merlin.models.tf.SequentialBlock.trainable"]], "trainable_weights (merlin.models.tf.sequentialblock property)": [[155, "merlin.models.tf.SequentialBlock.trainable_weights"]], "stochasticswapnoise (class in merlin.models.tf)": [[156, "merlin.models.tf.StochasticSwapNoise"]], "__init__() (merlin.models.tf.stochasticswapnoise method)": [[156, "merlin.models.tf.StochasticSwapNoise.__init__"]], "augment() (merlin.models.tf.stochasticswapnoise method)": [[156, "merlin.models.tf.StochasticSwapNoise.augment"]], "call() (merlin.models.tf.stochasticswapnoise method)": [[156, "merlin.models.tf.StochasticSwapNoise.call"]], "compute_output_shape() (merlin.models.tf.stochasticswapnoise method)": [[156, "merlin.models.tf.StochasticSwapNoise.compute_output_shape"]], "get_config() (merlin.models.tf.stochasticswapnoise method)": [[156, "merlin.models.tf.StochasticSwapNoise.get_config"]], "tabularblock (class in merlin.models.tf)": [[157, "merlin.models.tf.TabularBlock"]], "__init__() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.__init__"]], "aggregation (merlin.models.tf.tabularblock property)": [[157, "merlin.models.tf.TabularBlock.aggregation"]], "apply_to_all() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.apply_to_all"]], "build() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.build"]], "calculate_batch_size_from_input_shapes() (merlin.models.tf.tabularblock static method)": [[157, "merlin.models.tf.TabularBlock.calculate_batch_size_from_input_shapes"]], "call() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.call"]], "compute_call_output_shape() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.compute_call_output_shape"]], "compute_output_shape() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.compute_output_shape"]], "from_config() (merlin.models.tf.tabularblock class method)": [[157, "merlin.models.tf.TabularBlock.from_config"]], "from_features() (merlin.models.tf.tabularblock class method)": [[157, "merlin.models.tf.TabularBlock.from_features"]], "from_schema() (merlin.models.tf.tabularblock class method)": [[157, "merlin.models.tf.TabularBlock.from_schema"]], "get_config() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.get_config"]], "is_input (merlin.models.tf.tabularblock property)": [[157, "merlin.models.tf.TabularBlock.is_input"]], "is_tabular (merlin.models.tf.tabularblock property)": [[157, "merlin.models.tf.TabularBlock.is_tabular"]], "post (merlin.models.tf.tabularblock property)": [[157, "merlin.models.tf.TabularBlock.post"]], "post_call() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.post_call"]], "pre (merlin.models.tf.tabularblock property)": [[157, "merlin.models.tf.TabularBlock.pre"]], "pre_call() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.pre_call"]], "repr_add() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.repr_add"]], "repr_extra() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.repr_extra"]], "repr_ignore() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.repr_ignore"]], "select_by_tag() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.select_by_tag"]], "set_aggregation() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.set_aggregation"]], "set_post() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.set_post"]], "set_pre() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.set_pre"]], "set_schema() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.set_schema"]], "super() (merlin.models.tf.tabularblock method)": [[157, "merlin.models.tf.TabularBlock.super"]], "tensorinitializer (class in merlin.models.tf)": [[158, "merlin.models.tf.TensorInitializer"]], "__init__() (merlin.models.tf.tensorinitializer method)": [[158, "merlin.models.tf.TensorInitializer.__init__"]], "from_dataset() (merlin.models.tf.tensorinitializer class method)": [[158, "merlin.models.tf.TensorInitializer.from_dataset"]], "get_config() (merlin.models.tf.tensorinitializer method)": [[158, "merlin.models.tf.TensorInitializer.get_config"]], "todense (class in merlin.models.tf)": [[159, "merlin.models.tf.ToDense"]], "__init__() (merlin.models.tf.todense method)": [[159, "merlin.models.tf.ToDense.__init__"]], "call() (merlin.models.tf.todense method)": [[159, "merlin.models.tf.ToDense.call"]], "toonehot (class in merlin.models.tf)": [[160, "merlin.models.tf.ToOneHot"]], "__init__() (merlin.models.tf.toonehot method)": [[160, "merlin.models.tf.ToOneHot.__init__"]], "call_outputs() (merlin.models.tf.toonehot method)": [[160, "merlin.models.tf.ToOneHot.call_outputs"]], "compute_output_shape() (merlin.models.tf.toonehot method)": [[160, "merlin.models.tf.ToOneHot.compute_output_shape"]], "tosparse (class in merlin.models.tf)": [[161, "merlin.models.tf.ToSparse"]], "__init__() (merlin.models.tf.tosparse method)": [[161, "merlin.models.tf.ToSparse.__init__"]], "call() (merlin.models.tf.tosparse method)": [[161, "merlin.models.tf.ToSparse.call"]], "totarget (class in merlin.models.tf)": [[162, "merlin.models.tf.ToTarget"]], "__init__() (merlin.models.tf.totarget method)": [[162, "merlin.models.tf.ToTarget.__init__"]], "call() (merlin.models.tf.totarget method)": [[162, "merlin.models.tf.ToTarget.call"]], "compute_output_schema() (merlin.models.tf.totarget method)": [[162, "merlin.models.tf.ToTarget.compute_output_schema"]], "compute_output_shape() (merlin.models.tf.totarget method)": [[162, "merlin.models.tf.ToTarget.compute_output_shape"]], "topkencoder (class in merlin.models.tf)": [[163, "merlin.models.tf.TopKEncoder"]], "__init__() (merlin.models.tf.topkencoder method)": [[163, "merlin.models.tf.TopKEncoder.__init__"]], "batch_predict() (merlin.models.tf.topkencoder method)": [[163, "merlin.models.tf.TopKEncoder.batch_predict"]], "compile() (merlin.models.tf.topkencoder method)": [[163, "merlin.models.tf.TopKEncoder.compile"]], "encode_candidates() (merlin.models.tf.topkencoder method)": [[163, "merlin.models.tf.TopKEncoder.encode_candidates"]], "fit() (merlin.models.tf.topkencoder method)": [[163, "merlin.models.tf.TopKEncoder.fit"]], "from_candidate_dataset() (merlin.models.tf.topkencoder class method)": [[163, "merlin.models.tf.TopKEncoder.from_candidate_dataset"]], "index_candidates() (merlin.models.tf.topkencoder method)": [[163, "merlin.models.tf.TopKEncoder.index_candidates"]], "topk_layer (merlin.models.tf.topkencoder property)": [[163, "merlin.models.tf.TopKEncoder.topk_layer"]], "topkmetricsaggregator (class in merlin.models.tf)": [[164, "merlin.models.tf.TopKMetricsAggregator"]], "__init__() (merlin.models.tf.topkmetricsaggregator method)": [[164, "merlin.models.tf.TopKMetricsAggregator.__init__"]], "default_metrics() (merlin.models.tf.topkmetricsaggregator class method)": [[164, "merlin.models.tf.TopKMetricsAggregator.default_metrics"]], "from_config() (merlin.models.tf.topkmetricsaggregator class method)": [[164, "merlin.models.tf.TopKMetricsAggregator.from_config"]], "get_config() (merlin.models.tf.topkmetricsaggregator method)": [[164, "merlin.models.tf.TopKMetricsAggregator.get_config"]], "result() (merlin.models.tf.topkmetricsaggregator method)": [[164, "merlin.models.tf.TopKMetricsAggregator.result"]], "update_state() (merlin.models.tf.topkmetricsaggregator method)": [[164, "merlin.models.tf.TopKMetricsAggregator.update_state"]], "twotowerblock (class in merlin.models.tf)": [[165, "merlin.models.tf.TwoTowerBlock"]], "__init__() (merlin.models.tf.twotowerblock method)": [[165, "merlin.models.tf.TwoTowerBlock.__init__"]], "parallel_layers (merlin.models.tf.twotowerblock attribute)": [[165, "merlin.models.tf.TwoTowerBlock.parallel_layers"]], "twotowermodel() (in module merlin.models.tf)": [[166, "merlin.models.tf.TwoTowerModel"]], "twotowermodelv2() (in module merlin.models.tf)": [[167, "merlin.models.tf.TwoTowerModelV2"]], "wideanddeepmodel() (in module merlin.models.tf)": [[168, "merlin.models.tf.WideAndDeepModel"]], "youtubednnretrievalmodel() (in module merlin.models.tf)": [[169, "merlin.models.tf.YoutubeDNNRetrievalModel"]], "youtubednnretrievalmodelv2() (in module merlin.models.tf)": [[170, "merlin.models.tf.YoutubeDNNRetrievalModelV2"]], "bprloss (class in merlin.models.tf.losses)": [[171, "merlin.models.tf.losses.BPRLoss"]], "__init__() (merlin.models.tf.losses.bprloss method)": [[171, "merlin.models.tf.losses.BPRLoss.__init__"]], "compute() (merlin.models.tf.losses.bprloss method)": [[171, "merlin.models.tf.losses.BPRLoss.compute"]], "bprmaxloss (class in merlin.models.tf.losses)": [[172, "merlin.models.tf.losses.BPRmaxLoss"]], "__init__() (merlin.models.tf.losses.bprmaxloss method)": [[172, "merlin.models.tf.losses.BPRmaxLoss.__init__"]], "compute() (merlin.models.tf.losses.bprmaxloss method)": [[172, "merlin.models.tf.losses.BPRmaxLoss.compute"]], "categoricalcrossentropy (class in merlin.models.tf.losses)": [[173, "merlin.models.tf.losses.CategoricalCrossEntropy"]], "__init__() (merlin.models.tf.losses.categoricalcrossentropy method)": [[173, "merlin.models.tf.losses.CategoricalCrossEntropy.__init__"]], "hingeloss (class in merlin.models.tf.losses)": [[174, "merlin.models.tf.losses.HingeLoss"]], "__init__() (merlin.models.tf.losses.hingeloss method)": [[174, "merlin.models.tf.losses.HingeLoss.__init__"]], "compute() (merlin.models.tf.losses.hingeloss method)": [[174, "merlin.models.tf.losses.HingeLoss.compute"]], "logisticloss (class in merlin.models.tf.losses)": [[175, "merlin.models.tf.losses.LogisticLoss"]], "__init__() (merlin.models.tf.losses.logisticloss method)": [[175, "merlin.models.tf.losses.LogisticLoss.__init__"]], "compute() (merlin.models.tf.losses.logisticloss method)": [[175, "merlin.models.tf.losses.LogisticLoss.compute"]], "sparsecategoricalcrossentropy (class in merlin.models.tf.losses)": [[176, "merlin.models.tf.losses.SparseCategoricalCrossEntropy"]], "__init__() (merlin.models.tf.losses.sparsecategoricalcrossentropy method)": [[176, "merlin.models.tf.losses.SparseCategoricalCrossEntropy.__init__"]], "top1loss (class in merlin.models.tf.losses)": [[177, "merlin.models.tf.losses.TOP1Loss"]], "__init__() (merlin.models.tf.losses.top1loss method)": [[177, "merlin.models.tf.losses.TOP1Loss.__init__"]], "compute() (merlin.models.tf.losses.top1loss method)": [[177, "merlin.models.tf.losses.TOP1Loss.compute"]], "top1maxloss (class in merlin.models.tf.losses)": [[178, "merlin.models.tf.losses.TOP1maxLoss"]], "__init__() (merlin.models.tf.losses.top1maxloss method)": [[178, "merlin.models.tf.losses.TOP1maxLoss.__init__"]], "compute() (merlin.models.tf.losses.top1maxloss method)": [[178, "merlin.models.tf.losses.TOP1maxLoss.compute"]], "top1v2loss (class in merlin.models.tf.losses)": [[179, "merlin.models.tf.losses.TOP1v2Loss"]], "__init__() (merlin.models.tf.losses.top1v2loss method)": [[179, "merlin.models.tf.losses.TOP1v2Loss.__init__"]], "compute() (merlin.models.tf.losses.top1v2loss method)": [[179, "merlin.models.tf.losses.TOP1v2Loss.compute"]], "split_embeddings_on_size() (in module merlin.models.tf)": [[180, "merlin.models.tf.split_embeddings_on_size"]], "timing (class in merlin.models.utils.misc_utils)": [[181, "merlin.models.utils.misc_utils.Timing"]], "__init__() (merlin.models.utils.misc_utils.timing method)": [[181, "merlin.models.utils.misc_utils.Timing.__init__"]], "filter_kwargs() (in module merlin.models.utils.misc_utils)": [[182, "merlin.models.utils.misc_utils.filter_kwargs"]], "get_filenames() (in module merlin.models.utils.misc_utils)": [[183, "merlin.models.utils.misc_utils.get_filenames"]], "get_label_feature_name() (in module merlin.models.utils.misc_utils)": [[184, "merlin.models.utils.misc_utils.get_label_feature_name"]], "get_object_size() (in module merlin.models.utils.misc_utils)": [[185, "merlin.models.utils.misc_utils.get_object_size"]], "get_parquet_files_names() (in module merlin.models.utils.misc_utils)": [[186, "merlin.models.utils.misc_utils.get_parquet_files_names"]], "get_timestamp_feature_name() (in module merlin.models.utils.misc_utils)": [[187, "merlin.models.utils.misc_utils.get_timestamp_feature_name"]], "safe_json() (in module merlin.models.utils.misc_utils)": [[188, "merlin.models.utils.misc_utils.safe_json"]], "validate_dataset() (in module merlin.models.utils.misc_utils)": [[189, "merlin.models.utils.misc_utils.validate_dataset"]], "registry (class in merlin.models.utils.registry)": [[190, "merlin.models.utils.registry.Registry"]], "__init__() (merlin.models.utils.registry.registry method)": [[190, "merlin.models.utils.registry.Registry.__init__"]], "class_registry() (merlin.models.utils.registry.registry class method)": [[190, "merlin.models.utils.registry.Registry.class_registry"]], "default_key() (merlin.models.utils.registry.registry method)": [[190, "merlin.models.utils.registry.Registry.default_key"]], "get() (merlin.models.utils.registry.registry method)": [[190, "merlin.models.utils.registry.Registry.get"]], "items() (merlin.models.utils.registry.registry method)": [[190, "merlin.models.utils.registry.Registry.items"]], "keys() (merlin.models.utils.registry.registry method)": [[190, "merlin.models.utils.registry.Registry.keys"]], "name (merlin.models.utils.registry.registry property)": [[190, "merlin.models.utils.registry.Registry.name"]], "on_set() (merlin.models.utils.registry.registry method)": [[190, "merlin.models.utils.registry.Registry.on_set"]], "parse() (merlin.models.utils.registry.registry method)": [[190, "merlin.models.utils.registry.Registry.parse"]], "register() (merlin.models.utils.registry.registry method)": [[190, "merlin.models.utils.registry.Registry.register"]], "register_with_multiple_names() (merlin.models.utils.registry.registry method)": [[190, "merlin.models.utils.registry.Registry.register_with_multiple_names"]], "validate() (merlin.models.utils.registry.registry method)": [[190, "merlin.models.utils.registry.Registry.validate"]], "values() (merlin.models.utils.registry.registry method)": [[190, "merlin.models.utils.registry.Registry.values"]], "registrymixin (class in merlin.models.utils.registry)": [[191, "merlin.models.utils.registry.RegistryMixin"]], "__init__() (merlin.models.utils.registry.registrymixin method)": [[191, "merlin.models.utils.registry.RegistryMixin.__init__"]], "parse() (merlin.models.utils.registry.registrymixin class method)": [[191, "merlin.models.utils.registry.RegistryMixin.parse"]], "registry (merlin.models.utils.registry.registrymixin attribute)": [[191, "merlin.models.utils.registry.RegistryMixin.registry"]], "camelcase_to_snakecase() (in module merlin.models.utils.registry)": [[192, "merlin.models.utils.registry.camelcase_to_snakecase"]], "default_name() (in module merlin.models.utils.registry)": [[193, "merlin.models.utils.registry.default_name"]], "default_object_name() (in module merlin.models.utils.registry)": [[194, "merlin.models.utils.registry.default_object_name"]], "display_list_by_prefix() (in module merlin.models.utils.registry)": [[195, "merlin.models.utils.registry.display_list_by_prefix"]], "snakecase_to_camelcase() (in module merlin.models.utils.registry)": [[196, "merlin.models.utils.registry.snakecase_to_camelcase"]], "categorical_cardinalities() (in module merlin.models.utils.schema_utils)": [[197, "merlin.models.utils.schema_utils.categorical_cardinalities"]], "categorical_domains() (in module merlin.models.utils.schema_utils)": [[198, "merlin.models.utils.schema_utils.categorical_domains"]], "create_categorical_column() (in module merlin.models.utils.schema_utils)": [[199, "merlin.models.utils.schema_utils.create_categorical_column"]], "create_continuous_column() (in module merlin.models.utils.schema_utils)": [[200, "merlin.models.utils.schema_utils.create_continuous_column"]], "filter_dict_by_schema() (in module merlin.models.utils.schema_utils)": [[201, "merlin.models.utils.schema_utils.filter_dict_by_schema"]], "get_embedding_size_from_cardinality() (in module merlin.models.utils.schema_utils)": [[202, "merlin.models.utils.schema_utils.get_embedding_size_from_cardinality"]], "get_embedding_sizes_from_schema() (in module merlin.models.utils.schema_utils)": [[203, "merlin.models.utils.schema_utils.get_embedding_sizes_from_schema"]], "schema_to_tensorflow_metadata_json() (in module merlin.models.utils.schema_utils)": [[204, "merlin.models.utils.schema_utils.schema_to_tensorflow_metadata_json"]], "select_targets() (in module merlin.models.utils.schema_utils)": [[205, "merlin.models.utils.schema_utils.select_targets"]], "tensorflow_metadata_json_to_schema() (in module merlin.models.utils.schema_utils)": [[206, "merlin.models.utils.schema_utils.tensorflow_metadata_json_to_schema"]], "ensemble (class in merlin.systems.dag)": [[207, "merlin.systems.dag.Ensemble"]], "__init__() (merlin.systems.dag.ensemble method)": [[207, "merlin.systems.dag.Ensemble.__init__"]], "export() (merlin.systems.dag.ensemble method)": [[207, "merlin.systems.dag.Ensemble.export"]], "input_schema (merlin.systems.dag.ensemble property)": [[207, "merlin.systems.dag.Ensemble.input_schema"]], "load() (merlin.systems.dag.ensemble class method)": [[207, "merlin.systems.dag.Ensemble.load"]], "output_schema (merlin.systems.dag.ensemble property)": [[207, "merlin.systems.dag.Ensemble.output_schema"]], "save() (merlin.systems.dag.ensemble method)": [[207, "merlin.systems.dag.Ensemble.save"]], "transform() (merlin.systems.dag.ensemble method)": [[207, "merlin.systems.dag.Ensemble.transform"]], "predictforest (class in merlin.systems.dag.ops.fil)": [[208, "merlin.systems.dag.ops.fil.PredictForest"]], "__init__() (merlin.systems.dag.ops.fil.predictforest method)": [[208, "merlin.systems.dag.ops.fil.PredictForest.__init__"]], "compute_input_schema() (merlin.systems.dag.ops.fil.predictforest method)": [[208, "merlin.systems.dag.ops.fil.PredictForest.compute_input_schema"]], "compute_output_schema() (merlin.systems.dag.ops.fil.predictforest method)": [[208, "merlin.systems.dag.ops.fil.PredictForest.compute_output_schema"]], "transform() (merlin.systems.dag.ops.fil.predictforest method)": [[208, "merlin.systems.dag.ops.fil.PredictForest.transform"]], "predictimplicit (class in merlin.systems.dag.ops.implicit)": [[209, "merlin.systems.dag.ops.implicit.PredictImplicit"]], "__init__() (merlin.systems.dag.ops.implicit.predictimplicit method)": [[209, "merlin.systems.dag.ops.implicit.PredictImplicit.__init__"]], "compute_input_schema() (merlin.systems.dag.ops.implicit.predictimplicit method)": [[209, "merlin.systems.dag.ops.implicit.PredictImplicit.compute_input_schema"]], "compute_output_schema() (merlin.systems.dag.ops.implicit.predictimplicit method)": [[209, "merlin.systems.dag.ops.implicit.PredictImplicit.compute_output_schema"]], "load_artifacts() (merlin.systems.dag.ops.implicit.predictimplicit method)": [[209, "merlin.systems.dag.ops.implicit.PredictImplicit.load_artifacts"]], "save_artifacts() (merlin.systems.dag.ops.implicit.predictimplicit method)": [[209, "merlin.systems.dag.ops.implicit.PredictImplicit.save_artifacts"]], "transform() (merlin.systems.dag.ops.implicit.predictimplicit method)": [[209, "merlin.systems.dag.ops.implicit.PredictImplicit.transform"]], "filtercandidates (class in merlin.systems.dag.ops.session_filter)": [[210, "merlin.systems.dag.ops.session_filter.FilterCandidates"]], "__init__() (merlin.systems.dag.ops.session_filter.filtercandidates method)": [[210, "merlin.systems.dag.ops.session_filter.FilterCandidates.__init__"]], "compute_input_schema() (merlin.systems.dag.ops.session_filter.filtercandidates method)": [[210, "merlin.systems.dag.ops.session_filter.FilterCandidates.compute_input_schema"]], "compute_output_schema() (merlin.systems.dag.ops.session_filter.filtercandidates method)": [[210, "merlin.systems.dag.ops.session_filter.FilterCandidates.compute_output_schema"]], "dependencies (merlin.systems.dag.ops.session_filter.filtercandidates property)": [[210, "merlin.systems.dag.ops.session_filter.FilterCandidates.dependencies"]], "transform() (merlin.systems.dag.ops.session_filter.filtercandidates method)": [[210, "merlin.systems.dag.ops.session_filter.FilterCandidates.transform"]], "validate_schemas() (merlin.systems.dag.ops.session_filter.filtercandidates method)": [[210, "merlin.systems.dag.ops.session_filter.FilterCandidates.validate_schemas"]], "softmaxsampling (class in merlin.systems.dag.ops.softmax_sampling)": [[211, "merlin.systems.dag.ops.softmax_sampling.SoftmaxSampling"]], "__init__() (merlin.systems.dag.ops.softmax_sampling.softmaxsampling method)": [[211, "merlin.systems.dag.ops.softmax_sampling.SoftmaxSampling.__init__"]], "compute_input_schema() (merlin.systems.dag.ops.softmax_sampling.softmaxsampling method)": [[211, "merlin.systems.dag.ops.softmax_sampling.SoftmaxSampling.compute_input_schema"]], "compute_output_schema() (merlin.systems.dag.ops.softmax_sampling.softmaxsampling method)": [[211, "merlin.systems.dag.ops.softmax_sampling.SoftmaxSampling.compute_output_schema"]], "dependencies (merlin.systems.dag.ops.softmax_sampling.softmaxsampling property)": [[211, "merlin.systems.dag.ops.softmax_sampling.SoftmaxSampling.dependencies"]], "transform() (merlin.systems.dag.ops.softmax_sampling.softmaxsampling method)": [[211, "merlin.systems.dag.ops.softmax_sampling.SoftmaxSampling.transform"]], "predicttensorflow (class in merlin.systems.dag.ops.tensorflow)": [[212, "merlin.systems.dag.ops.tensorflow.PredictTensorflow"]], "__init__() (merlin.systems.dag.ops.tensorflow.predicttensorflow method)": [[212, "merlin.systems.dag.ops.tensorflow.PredictTensorflow.__init__"]], "compute_input_schema() (merlin.systems.dag.ops.tensorflow.predicttensorflow method)": [[212, "merlin.systems.dag.ops.tensorflow.PredictTensorflow.compute_input_schema"]], "compute_output_schema() (merlin.systems.dag.ops.tensorflow.predicttensorflow method)": [[212, "merlin.systems.dag.ops.tensorflow.PredictTensorflow.compute_output_schema"]], "from_path() (merlin.systems.dag.ops.tensorflow.predicttensorflow class method)": [[212, "merlin.systems.dag.ops.tensorflow.PredictTensorflow.from_path"]], "supported_formats (merlin.systems.dag.ops.tensorflow.predicttensorflow property)": [[212, "merlin.systems.dag.ops.tensorflow.PredictTensorflow.supported_formats"]], "transform() (merlin.systems.dag.ops.tensorflow.predicttensorflow method)": [[212, "merlin.systems.dag.ops.tensorflow.PredictTensorflow.transform"]], "unrollfeatures (class in merlin.systems.dag.ops.unroll_features)": [[213, "merlin.systems.dag.ops.unroll_features.UnrollFeatures"]], "__init__() (merlin.systems.dag.ops.unroll_features.unrollfeatures method)": [[213, "merlin.systems.dag.ops.unroll_features.UnrollFeatures.__init__"]], "compute_output_schema() (merlin.systems.dag.ops.unroll_features.unrollfeatures method)": [[213, "merlin.systems.dag.ops.unroll_features.UnrollFeatures.compute_output_schema"]], "dependencies (merlin.systems.dag.ops.unroll_features.unrollfeatures property)": [[213, "merlin.systems.dag.ops.unroll_features.UnrollFeatures.dependencies"]], "supported_formats (merlin.systems.dag.ops.unroll_features.unrollfeatures property)": [[213, "merlin.systems.dag.ops.unroll_features.UnrollFeatures.supported_formats"]], "transform() (merlin.systems.dag.ops.unroll_features.unrollfeatures method)": [[213, "merlin.systems.dag.ops.unroll_features.UnrollFeatures.transform"]], "transformworkflow (class in merlin.systems.dag.ops.workflow)": [[214, "merlin.systems.dag.ops.workflow.TransformWorkflow"]], "__init__() (merlin.systems.dag.ops.workflow.transformworkflow method)": [[214, "merlin.systems.dag.ops.workflow.TransformWorkflow.__init__"]], "compute_output_schema() (merlin.systems.dag.ops.workflow.transformworkflow method)": [[214, "merlin.systems.dag.ops.workflow.TransformWorkflow.compute_output_schema"]], "nvt_model_name (merlin.systems.dag.ops.workflow.transformworkflow property)": [[214, "merlin.systems.dag.ops.workflow.TransformWorkflow.nvt_model_name"]], "set_nvt_model_name() (merlin.systems.dag.ops.workflow.transformworkflow method)": [[214, "merlin.systems.dag.ops.workflow.TransformWorkflow.set_nvt_model_name"]], "supported_formats (merlin.systems.dag.ops.workflow.transformworkflow property)": [[214, "merlin.systems.dag.ops.workflow.TransformWorkflow.supported_formats"]], "transform() (merlin.systems.dag.ops.workflow.transformworkflow method)": [[214, "merlin.systems.dag.ops.workflow.TransformWorkflow.transform"]], "convert_df_to_triton_input() (in module merlin.systems.triton)": [[215, "merlin.systems.triton.convert_df_to_triton_input"]], "convert_triton_output_to_df() (in module merlin.systems.triton)": [[216, "merlin.systems.triton.convert_triton_output_to_df"]], "addmetadata (class in nvtabular.ops)": [[220, "nvtabular.ops.AddMetadata"]], "__init__() (nvtabular.ops.addmetadata method)": [[220, "nvtabular.ops.AddMetadata.__init__"]], "output_properties (nvtabular.ops.addmetadata property)": [[220, "nvtabular.ops.AddMetadata.output_properties"]], "output_tags (nvtabular.ops.addmetadata property)": [[220, "nvtabular.ops.AddMetadata.output_tags"]], "transform() (nvtabular.ops.addmetadata method)": [[220, "nvtabular.ops.AddMetadata.transform"]], "addproperties (class in nvtabular.ops)": [[221, "nvtabular.ops.AddProperties"]], "__init__() (nvtabular.ops.addproperties method)": [[221, "nvtabular.ops.AddProperties.__init__"]], "addtags (class in nvtabular.ops)": [[222, "nvtabular.ops.AddTags"]], "__init__() (nvtabular.ops.addtags method)": [[222, "nvtabular.ops.AddTags.__init__"]], "bucketize (class in nvtabular.ops)": [[223, "nvtabular.ops.Bucketize"]], "__init__() (nvtabular.ops.bucketize method)": [[223, "nvtabular.ops.Bucketize.__init__"]], "output_dtype (nvtabular.ops.bucketize property)": [[223, "nvtabular.ops.Bucketize.output_dtype"]], "output_tags (nvtabular.ops.bucketize property)": [[223, "nvtabular.ops.Bucketize.output_tags"]], "transform() (nvtabular.ops.bucketize method)": [[223, "nvtabular.ops.Bucketize.transform"]], "categorify (class in nvtabular.ops)": [[224, "nvtabular.ops.Categorify"]], "__init__() (nvtabular.ops.categorify method)": [[224, "nvtabular.ops.Categorify.__init__"]], "clear() (nvtabular.ops.categorify method)": [[224, "nvtabular.ops.Categorify.clear"]], "column_mapping() (nvtabular.ops.categorify method)": [[224, "nvtabular.ops.Categorify.column_mapping"]], "compute_selector() (nvtabular.ops.categorify method)": [[224, "nvtabular.ops.Categorify.compute_selector"]], "fit() (nvtabular.ops.categorify method)": [[224, "nvtabular.ops.Categorify.fit"]], "fit_finalize() (nvtabular.ops.categorify method)": [[224, "nvtabular.ops.Categorify.fit_finalize"]], "get_embedding_sizes() (nvtabular.ops.categorify method)": [[224, "nvtabular.ops.Categorify.get_embedding_sizes"]], "inference_initialize() (nvtabular.ops.categorify method)": [[224, "nvtabular.ops.Categorify.inference_initialize"]], "output_dtype (nvtabular.ops.categorify property)": [[224, "nvtabular.ops.Categorify.output_dtype"]], "output_tags (nvtabular.ops.categorify property)": [[224, "nvtabular.ops.Categorify.output_tags"]], "process_vocabs() (nvtabular.ops.categorify method)": [[224, "nvtabular.ops.Categorify.process_vocabs"]], "set_storage_path() (nvtabular.ops.categorify method)": [[224, "nvtabular.ops.Categorify.set_storage_path"]], "transform() (nvtabular.ops.categorify method)": [[224, "nvtabular.ops.Categorify.transform"]], "clip (class in nvtabular.ops)": [[225, "nvtabular.ops.Clip"]], "__init__() (nvtabular.ops.clip method)": [[225, "nvtabular.ops.Clip.__init__"]], "transform() (nvtabular.ops.clip method)": [[225, "nvtabular.ops.Clip.transform"]], "columnsimilarity (class in nvtabular.ops)": [[226, "nvtabular.ops.ColumnSimilarity"]], "__init__() (nvtabular.ops.columnsimilarity method)": [[226, "nvtabular.ops.ColumnSimilarity.__init__"]], "column_mapping() (nvtabular.ops.columnsimilarity method)": [[226, "nvtabular.ops.ColumnSimilarity.column_mapping"]], "compute_selector() (nvtabular.ops.columnsimilarity method)": [[226, "nvtabular.ops.ColumnSimilarity.compute_selector"]], "output_dtype (nvtabular.ops.columnsimilarity property)": [[226, "nvtabular.ops.ColumnSimilarity.output_dtype"]], "output_tags (nvtabular.ops.columnsimilarity property)": [[226, "nvtabular.ops.ColumnSimilarity.output_tags"]], "transform() (nvtabular.ops.columnsimilarity method)": [[226, "nvtabular.ops.ColumnSimilarity.transform"]], "differencelag (class in nvtabular.ops)": [[227, "nvtabular.ops.DifferenceLag"]], "__init__() (nvtabular.ops.differencelag method)": [[227, "nvtabular.ops.DifferenceLag.__init__"]], "column_mapping() (nvtabular.ops.differencelag method)": [[227, "nvtabular.ops.DifferenceLag.column_mapping"]], "dependencies (nvtabular.ops.differencelag property)": [[227, "nvtabular.ops.DifferenceLag.dependencies"]], "output_dtype (nvtabular.ops.differencelag property)": [[227, "nvtabular.ops.DifferenceLag.output_dtype"]], "output_tags (nvtabular.ops.differencelag property)": [[227, "nvtabular.ops.DifferenceLag.output_tags"]], "transform() (nvtabular.ops.differencelag method)": [[227, "nvtabular.ops.DifferenceLag.transform"]], "droplowcardinality (class in nvtabular.ops)": [[228, "nvtabular.ops.DropLowCardinality"]], "__init__() (nvtabular.ops.droplowcardinality method)": [[228, "nvtabular.ops.DropLowCardinality.__init__"]], "compute_selector() (nvtabular.ops.droplowcardinality method)": [[228, "nvtabular.ops.DropLowCardinality.compute_selector"]], "transform() (nvtabular.ops.droplowcardinality method)": [[228, "nvtabular.ops.DropLowCardinality.transform"]], "dropna (class in nvtabular.ops)": [[229, "nvtabular.ops.Dropna"]], "__init__() (nvtabular.ops.dropna method)": [[229, "nvtabular.ops.Dropna.__init__"]], "transform() (nvtabular.ops.dropna method)": [[229, "nvtabular.ops.Dropna.transform"]], "fillmedian (class in nvtabular.ops)": [[230, "nvtabular.ops.FillMedian"]], "__init__() (nvtabular.ops.fillmedian method)": [[230, "nvtabular.ops.FillMedian.__init__"]], "clear() (nvtabular.ops.fillmedian method)": [[230, "nvtabular.ops.FillMedian.clear"]], "column_mapping() (nvtabular.ops.fillmedian method)": [[230, "nvtabular.ops.FillMedian.column_mapping"]], "fit() (nvtabular.ops.fillmedian method)": [[230, "nvtabular.ops.FillMedian.fit"]], "fit_finalize() (nvtabular.ops.fillmedian method)": [[230, "nvtabular.ops.FillMedian.fit_finalize"]], "transform() (nvtabular.ops.fillmedian method)": [[230, "nvtabular.ops.FillMedian.transform"]], "fillmissing (class in nvtabular.ops)": [[231, "nvtabular.ops.FillMissing"]], "__init__() (nvtabular.ops.fillmissing method)": [[231, "nvtabular.ops.FillMissing.__init__"]], "column_mapping() (nvtabular.ops.fillmissing method)": [[231, "nvtabular.ops.FillMissing.column_mapping"]], "inference_initialize() (nvtabular.ops.fillmissing method)": [[231, "nvtabular.ops.FillMissing.inference_initialize"]], "transform() (nvtabular.ops.fillmissing method)": [[231, "nvtabular.ops.FillMissing.transform"]], "filter (class in nvtabular.ops)": [[232, "nvtabular.ops.Filter"]], "__init__() (nvtabular.ops.filter method)": [[232, "nvtabular.ops.Filter.__init__"]], "transform() (nvtabular.ops.filter method)": [[232, "nvtabular.ops.Filter.transform"]], "groupby (class in nvtabular.ops)": [[233, "nvtabular.ops.Groupby"]], "__init__() (nvtabular.ops.groupby method)": [[233, "nvtabular.ops.Groupby.__init__"]], "column_mapping() (nvtabular.ops.groupby method)": [[233, "nvtabular.ops.Groupby.column_mapping"]], "compute_output_schema() (nvtabular.ops.groupby method)": [[233, "nvtabular.ops.Groupby.compute_output_schema"]], "dependencies (nvtabular.ops.groupby property)": [[233, "nvtabular.ops.Groupby.dependencies"]], "transform() (nvtabular.ops.groupby method)": [[233, "nvtabular.ops.Groupby.transform"]], "hashbucket (class in nvtabular.ops)": [[234, "nvtabular.ops.HashBucket"]], "__init__() (nvtabular.ops.hashbucket method)": [[234, "nvtabular.ops.HashBucket.__init__"]], "get_embedding_sizes() (nvtabular.ops.hashbucket method)": [[234, "nvtabular.ops.HashBucket.get_embedding_sizes"]], "output_dtype (nvtabular.ops.hashbucket property)": [[234, "nvtabular.ops.HashBucket.output_dtype"]], "output_tags (nvtabular.ops.hashbucket property)": [[234, "nvtabular.ops.HashBucket.output_tags"]], "transform() (nvtabular.ops.hashbucket method)": [[234, "nvtabular.ops.HashBucket.transform"]], "hashedcross (class in nvtabular.ops)": [[235, "nvtabular.ops.HashedCross"]], "__init__() (nvtabular.ops.hashedcross method)": [[235, "nvtabular.ops.HashedCross.__init__"]], "column_mapping() (nvtabular.ops.hashedcross method)": [[235, "nvtabular.ops.HashedCross.column_mapping"]], "output_dtype (nvtabular.ops.hashedcross property)": [[235, "nvtabular.ops.HashedCross.output_dtype"]], "transform() (nvtabular.ops.hashedcross method)": [[235, "nvtabular.ops.HashedCross.transform"]], "joinexternal (class in nvtabular.ops)": [[236, "nvtabular.ops.JoinExternal"]], "__init__() (nvtabular.ops.joinexternal method)": [[236, "nvtabular.ops.JoinExternal.__init__"]], "column_mapping() (nvtabular.ops.joinexternal method)": [[236, "nvtabular.ops.JoinExternal.column_mapping"]], "compute_output_schema() (nvtabular.ops.joinexternal method)": [[236, "nvtabular.ops.JoinExternal.compute_output_schema"]], "compute_selector() (nvtabular.ops.joinexternal method)": [[236, "nvtabular.ops.JoinExternal.compute_selector"]], "transform() (nvtabular.ops.joinexternal method)": [[236, "nvtabular.ops.JoinExternal.transform"]], "joingroupby (class in nvtabular.ops)": [[237, "nvtabular.ops.JoinGroupby"]], "__init__() (nvtabular.ops.joingroupby method)": [[237, "nvtabular.ops.JoinGroupby.__init__"]], "clear() (nvtabular.ops.joingroupby method)": [[237, "nvtabular.ops.JoinGroupby.clear"]], "column_mapping() (nvtabular.ops.joingroupby method)": [[237, "nvtabular.ops.JoinGroupby.column_mapping"]], "compute_selector() (nvtabular.ops.joingroupby method)": [[237, "nvtabular.ops.JoinGroupby.compute_selector"]], "cont_names (nvtabular.ops.joingroupby property)": [[237, "nvtabular.ops.JoinGroupby.cont_names"]], "dependencies (nvtabular.ops.joingroupby property)": [[237, "nvtabular.ops.JoinGroupby.dependencies"]], "fit() (nvtabular.ops.joingroupby method)": [[237, "nvtabular.ops.JoinGroupby.fit"]], "fit_finalize() (nvtabular.ops.joingroupby method)": [[237, "nvtabular.ops.JoinGroupby.fit_finalize"]], "set_storage_path() (nvtabular.ops.joingroupby method)": [[237, "nvtabular.ops.JoinGroupby.set_storage_path"]], "transform() (nvtabular.ops.joingroupby method)": [[237, "nvtabular.ops.JoinGroupby.transform"]], "lambdaop (in module nvtabular.ops)": [[238, "nvtabular.ops.LambdaOp"]], "listslice (class in nvtabular.ops)": [[239, "nvtabular.ops.ListSlice"]], "__init__() (nvtabular.ops.listslice method)": [[239, "nvtabular.ops.ListSlice.__init__"]], "output_tags (nvtabular.ops.listslice property)": [[239, "nvtabular.ops.ListSlice.output_tags"]], "transform() (nvtabular.ops.listslice method)": [[239, "nvtabular.ops.ListSlice.transform"]], "logop (class in nvtabular.ops)": [[240, "nvtabular.ops.LogOp"]], "__init__() (nvtabular.ops.logop method)": [[240, "nvtabular.ops.LogOp.__init__"]], "output_dtype (nvtabular.ops.logop property)": [[240, "nvtabular.ops.LogOp.output_dtype"]], "output_tags (nvtabular.ops.logop property)": [[240, "nvtabular.ops.LogOp.output_tags"]], "transform() (nvtabular.ops.logop method)": [[240, "nvtabular.ops.LogOp.transform"]], "normalize (class in nvtabular.ops)": [[241, "nvtabular.ops.Normalize"]], "__init__() (nvtabular.ops.normalize method)": [[241, "nvtabular.ops.Normalize.__init__"]], "clear() (nvtabular.ops.normalize method)": [[241, "nvtabular.ops.Normalize.clear"]], "fit() (nvtabular.ops.normalize method)": [[241, "nvtabular.ops.Normalize.fit"]], "fit_finalize() (nvtabular.ops.normalize method)": [[241, "nvtabular.ops.Normalize.fit_finalize"]], "output_dtype (nvtabular.ops.normalize property)": [[241, "nvtabular.ops.Normalize.output_dtype"]], "output_tags (nvtabular.ops.normalize property)": [[241, "nvtabular.ops.Normalize.output_tags"]], "supported_formats (nvtabular.ops.normalize property)": [[241, "nvtabular.ops.Normalize.supported_formats"]], "supports (nvtabular.ops.normalize property)": [[241, "nvtabular.ops.Normalize.supports"]], "transform() (nvtabular.ops.normalize method)": [[241, "nvtabular.ops.Normalize.transform"]], "normalizeminmax (class in nvtabular.ops)": [[242, "nvtabular.ops.NormalizeMinMax"]], "__init__() (nvtabular.ops.normalizeminmax method)": [[242, "nvtabular.ops.NormalizeMinMax.__init__"]], "clear() (nvtabular.ops.normalizeminmax method)": [[242, "nvtabular.ops.NormalizeMinMax.clear"]], "fit() (nvtabular.ops.normalizeminmax method)": [[242, "nvtabular.ops.NormalizeMinMax.fit"]], "fit_finalize() (nvtabular.ops.normalizeminmax method)": [[242, "nvtabular.ops.NormalizeMinMax.fit_finalize"]], "output_dtype (nvtabular.ops.normalizeminmax property)": [[242, "nvtabular.ops.NormalizeMinMax.output_dtype"]], "output_tags (nvtabular.ops.normalizeminmax property)": [[242, "nvtabular.ops.NormalizeMinMax.output_tags"]], "supported_formats (nvtabular.ops.normalizeminmax property)": [[242, "nvtabular.ops.NormalizeMinMax.supported_formats"]], "supports (nvtabular.ops.normalizeminmax property)": [[242, "nvtabular.ops.NormalizeMinMax.supports"]], "transform() (nvtabular.ops.normalizeminmax method)": [[242, "nvtabular.ops.NormalizeMinMax.transform"]], "operator (in module nvtabular.ops)": [[243, "nvtabular.ops.Operator"]], "reducedtypesize (class in nvtabular.ops)": [[244, "nvtabular.ops.ReduceDtypeSize"]], "__init__() (nvtabular.ops.reducedtypesize method)": [[244, "nvtabular.ops.ReduceDtypeSize.__init__"]], "clear() (nvtabular.ops.reducedtypesize method)": [[244, "nvtabular.ops.ReduceDtypeSize.clear"]], "compute_output_schema() (nvtabular.ops.reducedtypesize method)": [[244, "nvtabular.ops.ReduceDtypeSize.compute_output_schema"]], "fit() (nvtabular.ops.reducedtypesize method)": [[244, "nvtabular.ops.ReduceDtypeSize.fit"]], "fit_finalize() (nvtabular.ops.reducedtypesize method)": [[244, "nvtabular.ops.ReduceDtypeSize.fit_finalize"]], "transform() (nvtabular.ops.reducedtypesize method)": [[244, "nvtabular.ops.ReduceDtypeSize.transform"]], "rename (class in nvtabular.ops)": [[245, "nvtabular.ops.Rename"]], "__init__() (nvtabular.ops.rename method)": [[245, "nvtabular.ops.Rename.__init__"]], "column_mapping() (nvtabular.ops.rename method)": [[245, "nvtabular.ops.Rename.column_mapping"]], "transform() (nvtabular.ops.rename method)": [[245, "nvtabular.ops.Rename.transform"]], "statoperator (class in nvtabular.ops)": [[246, "nvtabular.ops.StatOperator"]], "__init__() (nvtabular.ops.statoperator method)": [[246, "nvtabular.ops.StatOperator.__init__"]], "clear() (nvtabular.ops.statoperator method)": [[246, "nvtabular.ops.StatOperator.clear"]], "fit() (nvtabular.ops.statoperator method)": [[246, "nvtabular.ops.StatOperator.fit"]], "fit_finalize() (nvtabular.ops.statoperator method)": [[246, "nvtabular.ops.StatOperator.fit_finalize"]], "fitted (nvtabular.ops.statoperator attribute)": [[246, "nvtabular.ops.StatOperator.fitted"]], "set_storage_path() (nvtabular.ops.statoperator method)": [[246, "nvtabular.ops.StatOperator.set_storage_path"]], "tagasitemfeatures (class in nvtabular.ops)": [[247, "nvtabular.ops.TagAsItemFeatures"]], "__init__() (nvtabular.ops.tagasitemfeatures method)": [[247, "nvtabular.ops.TagAsItemFeatures.__init__"]], "tagasitemid (class in nvtabular.ops)": [[248, "nvtabular.ops.TagAsItemID"]], "__init__() (nvtabular.ops.tagasitemid method)": [[248, "nvtabular.ops.TagAsItemID.__init__"]], "tagasuserfeatures (class in nvtabular.ops)": [[249, "nvtabular.ops.TagAsUserFeatures"]], "__init__() (nvtabular.ops.tagasuserfeatures method)": [[249, "nvtabular.ops.TagAsUserFeatures.__init__"]], "tagasuserid (class in nvtabular.ops)": [[250, "nvtabular.ops.TagAsUserID"]], "__init__() (nvtabular.ops.tagasuserid method)": [[250, "nvtabular.ops.TagAsUserID.__init__"]], "targetencoding (class in nvtabular.ops)": [[251, "nvtabular.ops.TargetEncoding"]], "__init__() (nvtabular.ops.targetencoding method)": [[251, "nvtabular.ops.TargetEncoding.__init__"]], "clear() (nvtabular.ops.targetencoding method)": [[251, "nvtabular.ops.TargetEncoding.clear"]], "column_mapping() (nvtabular.ops.targetencoding method)": [[251, "nvtabular.ops.TargetEncoding.column_mapping"]], "compute_selector() (nvtabular.ops.targetencoding method)": [[251, "nvtabular.ops.TargetEncoding.compute_selector"]], "dependencies (nvtabular.ops.targetencoding property)": [[251, "nvtabular.ops.TargetEncoding.dependencies"]], "fit() (nvtabular.ops.targetencoding method)": [[251, "nvtabular.ops.TargetEncoding.fit"]], "fit_finalize() (nvtabular.ops.targetencoding method)": [[251, "nvtabular.ops.TargetEncoding.fit_finalize"]], "output_dtype (nvtabular.ops.targetencoding property)": [[251, "nvtabular.ops.TargetEncoding.output_dtype"]], "output_tags (nvtabular.ops.targetencoding property)": [[251, "nvtabular.ops.TargetEncoding.output_tags"]], "set_storage_path() (nvtabular.ops.targetencoding method)": [[251, "nvtabular.ops.TargetEncoding.set_storage_path"]], "target_columns (nvtabular.ops.targetencoding property)": [[251, "nvtabular.ops.TargetEncoding.target_columns"]], "transform() (nvtabular.ops.targetencoding method)": [[251, "nvtabular.ops.TargetEncoding.transform"]], "valuecount (class in nvtabular.ops)": [[252, "nvtabular.ops.ValueCount"]], "__init__() (nvtabular.ops.valuecount method)": [[252, "nvtabular.ops.ValueCount.__init__"]], "clear() (nvtabular.ops.valuecount method)": [[252, "nvtabular.ops.ValueCount.clear"]], "fit() (nvtabular.ops.valuecount method)": [[252, "nvtabular.ops.ValueCount.fit"]], "fit_finalize() (nvtabular.ops.valuecount method)": [[252, "nvtabular.ops.ValueCount.fit_finalize"]], "transform() (nvtabular.ops.valuecount method)": [[252, "nvtabular.ops.ValueCount.transform"]], "workflow (class in nvtabular.workflow.workflow)": [[253, "nvtabular.workflow.workflow.Workflow"]], "__init__() (nvtabular.workflow.workflow.workflow method)": [[253, "nvtabular.workflow.workflow.Workflow.__init__"]], "clear_stats() (nvtabular.workflow.workflow.workflow method)": [[253, "nvtabular.workflow.workflow.Workflow.clear_stats"]], "fit() (nvtabular.workflow.workflow.workflow method)": [[253, "nvtabular.workflow.workflow.Workflow.fit"]], "fit_schema() (nvtabular.workflow.workflow.workflow method)": [[253, "nvtabular.workflow.workflow.Workflow.fit_schema"]], "fit_transform() (nvtabular.workflow.workflow.workflow method)": [[253, "nvtabular.workflow.workflow.Workflow.fit_transform"]], "get_subworkflow() (nvtabular.workflow.workflow.workflow method)": [[253, "nvtabular.workflow.workflow.Workflow.get_subworkflow"]], "input_dtypes (nvtabular.workflow.workflow.workflow property)": [[253, "nvtabular.workflow.workflow.Workflow.input_dtypes"]], "input_schema (nvtabular.workflow.workflow.workflow property)": [[253, "nvtabular.workflow.workflow.Workflow.input_schema"]], "load() (nvtabular.workflow.workflow.workflow class method)": [[253, "nvtabular.workflow.workflow.Workflow.load"]], "output_dtypes (nvtabular.workflow.workflow.workflow property)": [[253, "nvtabular.workflow.workflow.Workflow.output_dtypes"]], "output_node (nvtabular.workflow.workflow.workflow property)": [[253, "nvtabular.workflow.workflow.Workflow.output_node"]], "output_schema (nvtabular.workflow.workflow.workflow property)": [[253, "nvtabular.workflow.workflow.Workflow.output_schema"]], "remove_inputs() (nvtabular.workflow.workflow.workflow method)": [[253, "nvtabular.workflow.workflow.Workflow.remove_inputs"]], "save() (nvtabular.workflow.workflow.workflow method)": [[253, "nvtabular.workflow.workflow.Workflow.save"]], "subworkflows (nvtabular.workflow.workflow.workflow property)": [[253, "nvtabular.workflow.workflow.Workflow.subworkflows"]], "transform() (nvtabular.workflow.workflow.workflow method)": [[253, "nvtabular.workflow.workflow.Workflow.transform"]], "workflownode (in module nvtabular.workflow.workflow)": [[254, "nvtabular.workflow.workflow.WorkflowNode"]]}})