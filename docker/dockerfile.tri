# syntax=docker/dockerfile:1
ARG TRITON_VERSION=21.11
ARG IMAGE=nvcr.io/nvidia/tritonserver:${TRITON_VERSION}-py3
FROM ${IMAGE}
ARG RMM_VER=vnightly
ARG CUDF_VER=vnightly
ARG HUGECTR_VER=vnightly
ARG HUGECTR_BACKEND_VER=vnightly
ARG NVTAB_VER=vnightly
ARG TF4REC_VER=vnightly

ARG RELEASE=false
ARG SM="60;61;70;75;80"

SHELL ["/bin/bash", "-c"]

ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/lib:/repos/dist/lib
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_HOME=/usr/local/cuda
ENV CUDA_PATH=$CUDA_HOME
ENV CUDA_CUDA_LIBRARY=${CUDA_HOME}/lib64/stubs
ENV PATH=${CUDA_HOME}/lib64/:${PATH}:${CUDA_HOME}/bin

# Build env variables for rmm
ENV INSTALL_PREFIX=/usr

RUN apt update -y --fix-missing && \
    apt upgrade -y && \
      apt install -y --no-install-recommends software-properties-common && \
      add-apt-repository -y ppa:deadsnakes/ppa && \
      apt update -y --fix-missing

RUN apt install -y --no-install-recommends \
      git \
      build-essential \
      autoconf \
      bison \
      flex \
      libboost-serialization-dev \
      wget \
      libssl-dev \
      zlib1g-dev \
      protobuf-compiler \
      clang-format \
      aptitude \
      libaio-dev \
      libtool && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN ln -s /usr/bin/python3 /usr/bin/python
RUN pip uninstall protobuf -y; pip install protobuf
RUN pip install git+git://github.com/gevent/gevent.git@21.8.0#egg=gevent

# Install cmake
RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \
    apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main' && \
    apt-get update && \
    apt-get install -y cmake

# Install spdlog from source
RUN git clone --branch v1.9.2 https://github.com/gabime/spdlog.git build-env && \
    pushd build-env && \
      mkdir build && cd build && cmake .. && make -j && make install && \
    popd && \
    rm -rf build-env

# Install arrow from source
ENV ARROW_HOME=/usr/local
RUN git clone --branch apache-arrow-4.0.1 --recurse-submodules https://github.com/apache/arrow.git build-env && \
    pushd build-env && \
      export PARQUET_TEST_DATA="${PWD}/cpp/submodules/parquet-testing/data" && \
      export ARROW_TEST_DATA="${PWD}/testing/data" && \
      pip install -r python/requirements-build.txt && \
      mkdir cpp/release && \
      pushd cpp/release && \
        cmake -DCMAKE_INSTALL_PREFIX=${ARROW_HOME} \
              -DCMAKE_INSTALL_LIBDIR=lib \
              -DCMAKE_LIBRARY_PATH=${CUDA_CUDA_LIBRARY} \
              -DARROW_FLIGHT=ON \
              -DARROW_GANDIVA=OFF \
              -DARROW_ORC=ON \
              -DARROW_WITH_BZ2=ON \
              -DARROW_WITH_ZLIB=ON \
              -DARROW_WITH_ZSTD=ON \
              -DARROW_WITH_LZ4=ON \
              -DARROW_WITH_SNAPPY=ON \
              -DARROW_WITH_BROTLI=ON \
              -DARROW_PARQUET=ON \
              -DARROW_PYTHON=ON \
              -DARROW_PLASMA=ON \
              -DARROW_BUILD_TESTS=ON \
              -DARROW_CUDA=ON \
              -DARROW_DATASET=ON \
              .. && \
        make -j$(nproc) && \
        make install && \
      popd && \
      pushd python && \
        export PYARROW_WITH_PARQUET=ON && \
        export PYARROW_WITH_CUDA=ON && \
        export PYARROW_WITH_ORC=ON && \
        export PYARROW_WITH_DATASET=ON && \
        python setup.py build_ext --build-type=release bdist_wheel && \
        pip install dist/*.whl && \
      popd && \
    popd && \
    rm -rf build-env

# Install rmm from source
RUN git clone https://github.com/rapidsai/rmm.git build-env && cd build-env/ && \
    if [ "$RELEASE" == "true" ] && [ ${RMM_VER} != "vnightly" ] ; then git fetch --all --tags && git checkout tags/${RMM_VER}; else git checkout branch-21.08; fi; \
    sed -i '/11.2/ a "11.4": "11.x",' python/setup.py && \
    cd ..; \
    pushd build-env && \
    ./build.sh librmm && \
    pip install python/. && \
    popd && \
    rm -rf build-env

# Build env for CUDF build
RUN git clone https://github.com/rapidsai/cudf.git build-env && cd build-env/ && \
    if [ "$RELEASE" == "true" ] && [ ${CUDF_VER} != "vnightly" ] ; then git fetch --all --tags && git checkout tags/${CUDF_VER}; else git checkout branch-21.08; fi; \
    git submodule update --init --recursive && \
    cd .. && \
    pushd build-env && \
      export CUDF_HOME=${PWD} && \
      export CUDF_ROOT=${PWD}/cpp/build/ && \
      export CMAKE_LIBRARY_PATH=${CUDA_CUDA_LIBRARY} && \
      export CUDAFLAGS=-Wno-error=unknown-pragmas && \
      ./build.sh libcudf cudf dask_cudf --allgpuarch && \
      protoc -I=python/cudf/cudf/utils/metadata --python_out=/usr/local/lib/python3.8/dist-packages/cudf/utils/metadata python/cudf/cudf/utils/metadata/orc_column_statistics.proto && \
    popd && \
    rm -rf build-env

ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION='python'

SHELL ["/bin/bash", "-c"]

RUN pip install cupy-cuda114 cachetools fastavro typing_extensions nvtx pandas==1.1.5
RUN pip install pybind11 gcsfs 
RUN apt install -y rapidjson-dev

# need for testing fixtures must be available for nvt testing
RUN pip install botocore>=1.21.6
RUN git clone https://github.com/rapidsai/asvdb.git /repos/asvdb && cd /repos/asvdb && python setup.py install

# Install NVTabular
RUN git clone https://github.com/NVIDIA-Merlin/NVTabular.git /nvtabular/ && \
    cd /nvtabular/; if [ "$RELEASE" == "true" ] && [ ${NVTAB_VER} != "vnightly" ] ; then git fetch --all --tags && git checkout tags/${NVTAB_VER}; else git checkout main; fi; \
    python setup.py develop;

# Install Transformers4Rec
RUN git clone https://github.com/NVIDIA-Merlin/Transformers4Rec.git /transformers4rec && \
    cd /transformers4rec/;  if [ "$RELEASE" == "true" ] && [ ${TF4REC_VER} != "vnightly" ] ; then git fetch --all --tags && git checkout tags/${TF4REC_VER}; else git checkout main; fi; \
    pip install -e .[tensorflow,pytorch,nvtabular]

# Install NVTabular Triton Backend
ARG TRITON_VERSION

RUN git clone https://github.com/NVIDIA-Merlin/nvtabular_triton_backend.git build-env && \
    cd build-env && \ 
    if [ "$RELEASE" == "true" ] && [ ${NVTAB_VER} != "vnightly" ] ; then git fetch --all --tags && git checkout tags/${NVTAB_VER}; else git checkout main; fi; \
    cd .. && \
    pushd build-env && \
      mkdir build && \
      cd build && \
      cmake -Dpybind11_DIR=/usr/local/lib/python3.8/dist-packages/pybind11/share/cmake/pybind11 \
        -D TRITON_COMMON_REPO_TAG="r$TRITON_VERSION"    \
        -D TRITON_CORE_REPO_TAG="r$TRITON_VERSION"      \
        -D TRITON_BACKEND_REPO_TAG="r$TRITON_VERSION" .. \
      && make -j 4 && \
      mkdir /opt/tritonserver/backends/nvtabular && \
      cp libtriton_nvtabular.so /opt/tritonserver/backends/nvtabular/ && \
    popd && \
    rm -rf build-env 

RUN pip install dask==2021.07.1 distributed==2021.07.1 dask[dataframe]==2021.07.1 dask-cuda
RUN pip install pynvml pytest graphviz sklearn scipy matplotlib
RUN pip install nvidia-pyindex; pip install tritonclient[all] grpcio-channelz

RUN apt update; apt install -y graphviz libtbb-dev;

#Hiredis
RUN mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 https://github.com/redis/hiredis.git && cd - && \
    cd /var/tmp/hiredis && \
    mkdir build && cd build && \
    cmake .. && \
    make -j$(nproc) && make install && \
    rm -rf /var/tmp/hiredis

#redis++
RUN mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 -b 1.3.2 https://github.com/sewenew/redis-plus-plus.git && cd - && \
    cd /var/tmp/redis-plus-plus && \
    mkdir build && cd build && \
    cmake -DREDIS_PLUS_PLUS_CXX_STANDARD=17 .. && \
    make -j$(nproc) && make install && \
    rm -rf /var/tmp/redis-plus-plus

#RocksDB
RUN mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 https://github.com/facebook/rocksdb.git && cd - && \
    cd /var/tmp/rocksdb && \
    PORTABLE=1 make -j$(nproc) shared_lib && \
    make install-shared && \
    rm -rf /var/tmp/rocksdb
    
# Install LibRdKafka from source
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive && apt-get install -y --no-install-recommends libssl-dev libsasl2-dev liblz4-dev libzstd-dev && \
    mkdir -p /var/tmp && cd /var/tmp && git clone --depth 1 -b v1.8.2 https://github.com/edenhill/librdkafka.git && cd - && \
    cd /var/tmp/librdkafka && \
    ./configure && make -j$(nproc) && make install && \
    rm -rf /var/tmp/librdkafka
    
ENV CPATH=/usr/local/include:$CPATH

# Arguments "_XXXX" are only valid when $RELEASE==ture
ARG _HUGECTR_BRANCH=master
ARG _HUGECTR_REPO="github.com/NVIDIA-Merlin/HugeCTR.git"

ARG INSTALL_HUGECTR_BACKEND=true
# Arguments "_XXXX" are only valid when $RELEASE==ture
ARG _HUGECTR_BACKEND_BRANCH=main
ARG _HUGECTR_BACKEND_REPO="github.com/triton-inference-server/hugectr_backend"

ARG _CI_JOB_TOKEN=""

# Install HugeCTR
RUN apt update -y && apt install rapidjson-dev -y
RUN if [ "$RELEASE" == "true" ]; then \
      git clone https://${_CI_JOB_TOKEN}${_HUGECTR_REPO} /hugectr && cd /hugectr && git fetch --all; \
      if [ ${HUGECTR_VER} != "vnightly" ]; then \
        git fetch --all --tags && git checkout tags/${HUGECTR_VER}; \
      else \
        git checkout ${_HUGECTR_BRANCH}; \
      fi; \
      git submodule update --init --recursive && \
      mkdir -p build && cd build &&\
      cmake -DCMAKE_BUILD_TYPE=Release -DSM=$SM -DENABLE_INFERENCE=ON .. && \
      make -j$(nproc) && make install && \
      chmod +x /usr/local/hugectr/bin/* &&\
      export CPATH=/usr/local/hugectr/include:$CPATH && \
      export LIBRARY_PATH=/usr/local/hugectr/lib:$LIBRARY_PATH; \
    fi

RUN if [ "$INSTALL_HUGECTR_BACKEND" == "true" ]; then \
      git clone https://${_CI_JOB_TOKEN}${_HUGECTR_BACKEND_REPO} /repos/hugectr_inference_backend && cd /repos/hugectr_inference_backend &&  \
      if [ "$RELEASE" == "true" ] && [ "$HUGECTR_BACKEND_VER" != "vnightly" ]; then \
        git fetch --all --tags && git checkout tags/${HUGECTR_BACKEND_VER}; \
      else \
        git checkout ${_HUGECTR_BACKEND_BRANCH}; \
      fi && \
      mkdir -p build && cd build && \
      cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local/hugectr \
            -DTRITON_COMMON_REPO_TAG="r$TRITON_VERSION" \
            -DTRITON_CORE_REPO_TAG="r$TRITON_VERSION" \
            -DTRITON_BACKEND_REPO_TAG="r$TRITON_VERSION" .. && \
      make -j$(nproc) && make install && \
      rm -rf /repos/hugectr_inference_backend; \
    fi

ENV CPATH=/usr/local/hugectr/include:$CPATH
ENV LIBRARY_PATH=/usr/local/hugectr/lib:$LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/hugectr/lib:$LD_LIBRARY_PATH
ENV PATH=/usr/local/hugectr/bin:$PATH

RUN ln -s /usr/local/hugectr/backends/hugectr /opt/tritonserver/backends/

RUN rm -rf /repos
RUN pip install tqdm
RUN pip install numba numpy --upgrade
RUN echo $(du -h --max-depth=1 /)

HEALTHCHECK NONE
ENTRYPOINT []
CMD ["/bin/bash"]
