# syntax=docker/dockerfile:1
ARG TRITON_VERSION=22.01
ARG IMAGE=nvcr.io/nvidia/tritonserver:${TRITON_VERSION}-py3
FROM ${IMAGE}

# Args
ARG RELEASE=false
ARG RMM_VER=vnightly
ARG CUDF_VER=vnightly
ARG NVTAB_VER=vnightly
ARG MODELS_VER=vnightly
ARG HUGECTR_VER=vnightly
ARG HUGECTR_BACKEND_VER=vnightly
ARG TF4REC_VER=vnightly

# Base images
from rapidsai/rapidsai-core-dev:21.12-cuda11.5-devel-ubuntu20.04-py3.8 as rapids

# Envs
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/lib:/repos/dist/lib
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_HOME=/usr/local/cuda
ENV CUDA_PATH=$CUDA_HOME
ENV CUDA_CUDA_LIBRARY=${CUDA_HOME}/lib64/stubs
ENV PATH=${CUDA_HOME}/lib64/:${PATH}:${CUDA_HOME}/bin
ENV PYTHONPATH=/usr/lib/python3.8/site-packages:$PYTHONPATH

# Install packages
ENV DEBIAN_FRONTEND=noninteractive
RUN apt update -y --fix-missing && \
    apt install -y --no-install-recommends software-properties-common && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    apt update -y --fix-missing && \
    apt-get install -y --no-install-recommends \
        git \
        build-essential \
        autoconf \
        bison \
        flex \
        libboost-serialization-dev \
        wget \
        graphviz \
        libssl-dev \
        zlib1g-dev \
        protobuf-compiler \
        clang-format \
        libtbb-dev \
        aptitude \
        rapidjson-dev \
        libaio-dev \
        libtool && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Rapids
RUN --mount=from=rapids,source=/rapids,target=/rapids \
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$CUDA_HOME/lib:$CUDA_HOME/lib64" \
 && tar --exclude="*.a" -C /usr --strip-components=1 -xf /rapids/RMM-*.tar.gz \
 && tar --exclude="*.a" -C /usr --strip-components=1 -xf /rapids/CUMLPRIMS_MG-*.tar.gz \
 && tar --exclude="*.a" -C /usr --strip-components=1 -xf /rapids/CUML-*.tar.gz \
 && tar --exclude="*.a" -C /usr --strip-components=1 -xf /rapids/CUGRAPH-*.tar.gz \
 && tar --exclude="*.a" -C /usr --strip-components=1 -xf /rapids/CUDF-*.tar.gz \
 && tar --exclude="*.a" --exclude="bin/xgboost" -C /usr --strip-components=1 -xf /rapids/xgboost-*.tar.gz \
 && pip install --no-cache-dir \
        /rapids/Cython-*.whl \
        /rapids/numba-*.whl \
        /rapids/nvtx-*.whl \
        /rapids/fsspec-*.whl \
        /rapids/fastavro-*.whl \
        /rapids/transformers-*.whl \
        /rapids/pandas-*.whl \
        /rapids/cmake_setuptools-*.tar.gz \
        /rapids/cupy_cuda*-*.whl \
        /rapids/dask-*.whl \
        /rapids/distributed-*.whl \
        /rapids/dask_cuda-*.whl \
        /rapids/treelite-*.whl \
        /rapids/scikit_learn-*.whl \
        /rapids/treelite_runtime-*.whl \
        /rapids/rmm-*.whl \
        /rapids/pyarrow-*.whl \
        /rapids/ucx_py-*.whl \
        /rapids/cuml-*.whl \
        /rapids/cugraph-*.whl \
        /rapids/cudf-*.whl \
        /rapids/dask_cudf-*.whl \
        /rapids/xgboost-*.whl \
        matplotlib==3.5.0 \
        networkx==2.6.3 \
 && rm $(pip show xgboost | grep Location | awk '{print $2}')/xgboost/lib/libxgboost.so;

# Install multiple packages
RUN ln -s /usr/bin/python3 /usr/bin/python
RUN pip cache purge
RUN pip uninstall protobuf -y
RUN pip install protobuf
RUN pip install nvtx pandas cupy-cuda115 cachetools typing_extensions fastavro
RUN pip install pynvml pytest graphviz scipy matplotlib tqdm pydot nvidia-pyindex
RUN pip install tritonclient[all] grpcio-channelz
RUN pip install pybind11 jupyterlab gcsfs
RUN pip3 install --no-cache-dir mpi4py ortools sklearn onnx onnxruntime
RUN pip install dask==2021.11.2 distributed==2021.11.2 dask[dataframe]==2021.11.2 dask-cuda
RUN pip install betterproto tensorflow-metadata
RUN pip install gevent==21.8.0
RUN pip install --no-cache-dir git+https://github.com/rapidsai/asvdb.git@main
RUN pip install botocore>=1.21.6

# Install NVTabular
RUN git clone https://github.com/NVIDIA-Merlin/NVTabular.git /nvtabular/ && \
    cd /nvtabular/; if [ "$RELEASE" == "true" ] && [ ${NVTAB_VER} != "vnightly" ] ; then git fetch --all --tags && git checkout tags/${NVTAB_VER}; else git checkout main; fi; \
    python install .;

# Install Transformers4Rec
RUN pip install transformers
RUN git clone https://github.com/NVIDIA-Merlin/Transformers4Rec.git /transformers4rec && \
    cd /transformers4rec/;  if [ "$RELEASE" == "true" ] && [ ${TF4REC_VER} != "vnightly" ] ; then git fetch --all --tags && git checkout tags/${TF4REC_VER}; else git checkout main; fi; \
    pip install .[tensorflow,pytorch,nvtabular] --no-deps

# Install Models
RUN git clone https://github.com/NVIDIA-Merlin/Models.git /models/ && \
    cd /models/; if [ "$RELEASE" == "true" ] && [ ${MODELS_VER} != "vnightly" ] ; then git fetch --all --tags && git checkout tags/${MODELS_VER}; else git checkout main; fi; \
    python install . --no-deps;

# Install NVTabular Triton Backend
ARG TRITON_VERSION
RUN git clone https://github.com/NVIDIA-Merlin/nvtabular_triton_backend.git build-env && \
    cd build-env && \ 
    if [ "$RELEASE" == "true" ] && [ ${NVTAB_VER} != "vnightly" ] ; then git fetch --all --tags && git checkout tags/${NVTAB_VER}; else git checkout main; fi; \
    cd .. && \
    pushd build-env && \
      mkdir build && \
      cd build && \
      cmake -Dpybind11_DIR=/usr/local/lib/python3.8/dist-packages/pybind11/share/cmake/pybind11 \
        -D TRITON_COMMON_REPO_TAG="r$TRITON_VERSION"    \
        -D TRITON_CORE_REPO_TAG="r$TRITON_VERSION"      \
        -D TRITON_BACKEND_REPO_TAG="r$TRITON_VERSION" .. \
      && make -j && \
      mkdir /opt/tritonserver/backends/nvtabular && \
      cp libtriton_nvtabular.so /opt/tritonserver/backends/nvtabular/ && \
    popd && \
    rm -rf build-env 

# Install Hiredis
RUN mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 https://github.com/redis/hiredis.git && cd - && \
    cd /var/tmp/hiredis && \
    mkdir build && cd build && \
    cmake .. && \
    make -j$(nproc) && make install && \
    rm -rf /var/tmp/hiredis

# Install redis++
RUN mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 -b 1.3.2 https://github.com/sewenew/redis-plus-plus.git && cd - && \
    cd /var/tmp/redis-plus-plus && \
    mkdir build && cd build && \
    cmake -DREDIS_PLUS_PLUS_CXX_STANDARD=17 .. && \
    make -j$(nproc) && make install && \
    rm -rf /var/tmp/redis-plus-plus

# Install RocksDB
RUN mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 https://github.com/facebook/rocksdb.git && cd - && \
    cd /var/tmp/rocksdb && \
    PORTABLE=1 make -j$(nproc) shared_lib && \
    make install-shared && \
    rm -rf /var/tmp/rocksdb
    
# Install LibRdKafka
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive && apt-get install -y --no-install-recommends libssl-dev libsasl2-dev liblz4-dev libzstd-dev && \
    mkdir -p /var/tmp && cd /var/tmp && git clone --depth 1 -b v1.8.2 https://github.com/edenhill/librdkafka.git && cd - && \
    cd /var/tmp/librdkafka && \
    ./configure && make -j$(nproc) && make install && \
    rm -rf /var/tmp/librdkafka

# Install Java
RUN mkdir -p /var/tmp && cd /var/tmp && wget https://download.java.net/java/GA/jdk16.0.2/d4a915d82b4c4fbb9bde534da945d746/7/GPL/openjdk-16.0.2_linux-x64_bin.tar.gz && \
    mkdir -p /usr/java && tar -zxvf ./openjdk-16.0.2_linux-x64_bin.tar.gz -C /usr/java &&  \
    rm -rf ./openjdk-16.0.2_linux-x64_bin.tar.gz

#Intall libhdfs client
RUN mkdir -p /var/tmp && cd /var/tmp && wget https://archive.apache.org/dist/hadoop/common/hadoop-3.3.1/hadoop-3.3.1.tar.gz && \
    tar -zxvf ./hadoop-3.3.1.tar.gz && rm -rf hadoop-3.3.1.tar.gz && \
    cp ./hadoop-3.3.1/lib/native/libhdfs.so.0.0.0 /usr/local/lib/ && cp hadoop-3.3.1/include/hdfs.h /usr/local/include/ && \
    mv ./hadoop-3.3.1 /usr/local/hadoop && cd /usr/local/lib/ && ln -s libhdfs.so.0.0.0 libhdfs.so 

ENV JAVA_HOME=/usr/java/jdk-16.0.2
ENV PATH=$JAVA_HOME/bin:$PATH
ENV LD_LIBRARY_PATH=$JAVA_HOME/lib/server
ENV HADOOP_HOME=/usr/local/hadoop
ENV PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin

# Arguments "_XXXX" are only valid when $HUGECTR_DEV_MODE==false
ARG HUGECTR_DEV_MODE=false
ARG _HUGECTR_BRANCH=master
ARG _HUGECTR_REPO="github.com/NVIDIA-Merlin/HugeCTR.git"
ARG _HUGECTR_BACKEND_BRANCH=main
ARG _HUGECTR_BACKEND_REPO="github.com/triton-inference-server/hugectr_backend"

ARG _CI_JOB_TOKEN=""

# Install HugeCTR
RUN if [ "$HUGECTR_DEV_MODE" == "false" ]; then \
      git clone https://${_CI_JOB_TOKEN}${_HUGECTR_REPO} /hugectr && cd /hugectr && git fetch --all; \
      if [ "$RELEASE" == "true" ] && [ ${HUGECTR_VER} != "vnightly" ]; then \
        git fetch --all --tags && git checkout tags/${HUGECTR_VER}; \
      else \
        git checkout ${_HUGECTR_BRANCH}; \
      fi; \
      git submodule update --init --recursive && \
      mkdir -p build && cd build &&\
      cmake -DCMAKE_BUILD_TYPE=Release -DSM="60;61;70;75;80" -DENABLE_INFERENCE=ON .. && \
      make -j$(nproc) && make install && \
      chmod +x /usr/local/hugectr/bin/*; \
    fi

ENV CPATH=/usr/local/hugectr/include:$CPATH
ENV LIBRARY_PATH=/usr/local/hugectr/lib:$LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/hugectr/lib:$LD_LIBRARY_PATH
ENV PATH=/usr/local/hugectr/bin:$PATH

RUN if [ "$HUGECTR_DEV_MODE" == "false" ]; then \
      git clone https://${_CI_JOB_TOKEN}${_HUGECTR_BACKEND_REPO} /repos/hugectr_inference_backend && cd /repos/hugectr_inference_backend &&  \
      if [ "$RELEASE" == "true" ] && [ "$HUGECTR_BACKEND_VER" != "vnightly" ]; then \
        git fetch --all --tags && git checkout tags/${HUGECTR_BACKEND_VER}; \
      else \
        git checkout ${_HUGECTR_BACKEND_BRANCH}; \
      fi && \
      mkdir -p build && cd build && \
      cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local/hugectr \
            -DTRITON_COMMON_REPO_TAG="r$TRITON_VERSION" \
            -DTRITON_CORE_REPO_TAG="r$TRITON_VERSION" \
            -DTRITON_BACKEND_REPO_TAG="r$TRITON_VERSION" .. && \
      make -j$(nproc) && make install && \
      rm -rf /repos/hugectr_inference_backend; \
    fi

RUN ln -s /usr/local/hugectr/backends/hugectr /opt/tritonserver/backends/

# Clean up
RUN rm -rf /repos
RUN echo $(du -h --max-depth=1 /)

HEALTHCHECK NONE
CMD ["/bin/bash"]
