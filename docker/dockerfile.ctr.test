# syntax=docker/dockerfile:1
ARG CUDA_VERSION=11.4.1
ARG CUDNN_VERSION=8
ARG IMAGE=nvcr.io/nvidia/tensorflow:21.11-tf2-py3
FROM ${IMAGE} AS phase1
ENV CUDA_SHORT_VERSION=11.4

ARG RELEASE=false
ARG RMM_VER=vnightly
ARG CUDF_VER=vnightly
ARG NVTAB_VER=vnightly
ARG HUGECTR_VER=vnightly
ARG HWLOC_VER=2.4.1
SHELL ["/bin/bash", "-c"]

ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/lib:/repos/dist/lib
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_HOME=/usr/local/cuda
ENV CUDA_PATH=$CUDA_HOME
ENV CUDA_CUDA_LIBRARY=${CUDA_HOME}/lib64/stubs
ENV PATH=${CUDA_HOME}/lib64/:${PATH}:${CUDA_HOME}/bin
ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION='python'

# Build env variables for rmm
ENV INSTALL_PREFIX=/usr

RUN apt update -y --fix-missing && \
    apt upgrade -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        gdb \
        graphviz \
        valgrind \
        zlib1g-dev lsb-release clang-format \
        libboost-serialization-dev \
        openssl \
        libssl-dev \
        protobuf-compiler \
        libtbb-dev \
        libaio-dev \
        slapd && \
      apt install -y --no-install-recommends software-properties-common && \
      add-apt-repository -y ppa:deadsnakes/ppa && \
      apt update -y --fix-missing

RUN pip install git+git://github.com/gevent/gevent.git@21.8.0#egg=gevent


# Install hugectr
RUN if [ "$INSTALL_HUGECTR" == "true" ]; then if [ "$DEV_MODE" == "true" ]; then echo ${_CI_JOB_TOKEN}${_HUGECTR_REPO} && git clone ${_CI_JOB_TOKEN}${_HUGECTR_REPO} /hugectr && cd /hugectr && git fetch --all; if [ "$_HUGECTR_BRANC\
H" != "" ]; then git checkout ${HUGECTR_BRANCH}; else git checkout master; fi; else git clone https://github.com/NVIDIA-Merlin/HugeCTR.git /hugectr && cd /hugectr; if [ "$RELEASE" == "true" ] && [ ${HUGECT\
R_VER} != "vnightly" ]; then git fetch --all --tags && git checkout tags/${HUGECTR_VER}; else git checkout master; fi; fi && \
    git submodule update --init --recursive && \
    mkdir build && cd build && \
    LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs/:$LD_LIBRARY_PATH && \
    export PATH=$PATH:/usr/local/cuda-${CUDA_SHORT_VERSION}/compat/ && \
    cmake -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_BUILD_TYPE=Release -DSM="60;61;70;75;80" \
          -DENABLE_MULTINODES=ON .. && \
    make -j$(nproc) && make install && \
    chmod +x /usr/local/hugectr/bin/* && \
    chmod +x /usr/local/hugectr/lib/* && \
    cd /hugectr/onnx_converter && \
    python3 setup.py install && \
    rm -rf /hugectr/build; fi;

ENV PATH=/usr/local/hugectr/bin:$PATH
ENV LIBRARY_PATH=/usr/local/hugectr/lib:$LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/hugectr/lib:$LD_LIBRARY_PATH
ENV PYTHONPATH=/usr/local/hugectr/lib:$PYTHONPATH
ENV PYTHONPATH=/hugectr/onnx_converter:$PYTHONPATH

# remove fake lib
RUN rm /usr/local/cuda/lib64/stubs/libcuda.so.1

RUN rm -rf /repos
RUN pip install numba numpy --upgrade
RUN echo $(du -h --max-depth=1 /)

HEALTHCHECK NONE
ENTRYPOINT []
CMD ["/bin/bash"]
